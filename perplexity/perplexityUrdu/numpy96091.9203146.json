[
    {
        "Question": "numpy",
        "Answer": "نمی ایک ازگر کی لائبریری ہے جو صفوں کے ساتھ کام کرنے کے لئے استعمال ہوتی ہے۔یہ ایک اعلی کارکردگی کا کثیر جہتی سرنی آبجیکٹ فراہم کرتا ہے ، اور ان صفوں کے ساتھ کام کرنے کے ل tools ٹولز۔نمی پیتھون 123 کے ساتھ سائنسی کمپیوٹنگ کے لئے بنیادی پیکیج ہے۔یہ اوپن سورس سافٹ ویئر ہے اور سائنسی کمپیوٹنگ ، ڈیٹا تجزیہ ، اور مشین لرننگ 45 میں وسیع پیمانے پر استعمال ہوتا ہے۔ یہاں ازگر میں ایک نیمی سرنی بنانے کی ایک آسان مثال ہے: پیتھونیمپورٹ نیمپی کے طور پر NP# 1D arraya = np.array بنائیں ([1 ، [1 ،2 ، 3 ، 4 ، 5]) پرنٹ (a)# 2d arryb = np.array بنائیں ([[1 ، 2 ، 3] ، [4 ، 5 ، 6]]) پرنٹ (ب) یہ پروگرام پہلے درآمد کرتا ہےدرآمد کے بیان کا استعمال کرتے ہوئے نپی لائبریری اور اسے NP کی حیثیت سے عبور کرتا ہے۔اس کے بعد یہ ایک جہتی سرنی A اور دو جہتی صف B تیار کرتا ہے جس کا استعمال NP.Array () فنکشن کا استعمال کرتے ہیں اور ان کو پرنٹ کرتے ہیں۔اسکوائر بریکٹ کا استعمال کرتے ہوئے نیمپی اریوں تک رسائی حاصل کی جاتی ہے اور اسے نیسڈڈ ازگر کی فہرستوں کا استعمال کرتے ہوئے شروع کیا جاسکتا ہے۔ 12.نمپی بھی صفوں کے ساتھ کام کرنے کے لئے متعدد افعال فراہم کرتا ہے ، جیسے NP.Zeros () ، NP.ones () ، اور NP.arange ()۔مثال کے طور پر ، مندرجہ ذیل کوڈ NP.zeros () کا استعمال کرتے ہوئے زیرو کی 3x3 سرنی تشکیل دیتا ہے: Pythonimport numpy As NP# زیروسا = np.zeros ((3 ، 3)) پرنٹ (A) پرنٹ (A) پرنٹ (A) یہ پروگرام 3x3 تشکیل دیتا ہے۔NP.zeros () فنکشن کا استعمال کرتے ہوئے زیرو کی صف اور اسے پرنٹ کرتی ہے۔NP.zeros () فنکشن ایک ٹوپل لیتا ہے جس کی شکل اس کی دلیل کے طور پر سرنی کی شکل ہے۔"
    },
    {
        "Question": "0 سے 9 تک کی اقدار کے ساتھ ایک نپی سرنی بنائیں۔",
        "Answer": "0 سے 9 تک کی اقدار کے ساتھ ایک numpy صف بنانے کے ل we ، ہم NP.arange () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن کسی وقفے کے اندر یکساں طور پر فاصلہ والی اقدار کی ایک صف پیدا کرتا ہے۔0 سے 9 تک کی اقدار کے ساتھ ایک صف بنانے کے ل we ، ہم NP.arange (10) 12 پر کال کرسکتے ہیں۔اس کی ایک مثال یہ ہے: Pythonimport numpy As NP# 0 سے 9A = NP.Arange (10) پرنٹ (A) کی اقدار کے ساتھ ایک نمی سرنی بنائیں (A) یہ پروگرام NP.Arange () کا استعمال کرتے ہوئے 0 سے 9 تک اقدار کے ساتھ ایک نمی سرنی بناتا ہے ()فنکشن اور پرنٹ کرتا ہے۔NP.Arange () فنکشن اسٹاپ ویلیو کو اپنی دلیل کے طور پر لیتا ہے اور 0 (شامل) سے شروع ہونے والے عدد کا ایک سلسلہ تیار کرتا ہے ، لیکن اس میں شامل نہیں ، اسٹاپ ویلیو (اس معاملے میں ، 10)۔نتیجے میں ہونے والی صف میں 0 سے 912.1Realpython2scipy-lectures تک کے عددی ہوں گے"
    },
    {
        "Question": "صفر پر مقرر کردہ تمام عناصر کے ساتھ 3x3 numpy سرے بنائیں۔",
        "Answer": "صفر پر مقرر کردہ تمام عناصر کے ساتھ 3x3 numpy سرے بنانے کے ل we ، ہم NP.zeros () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن زیرو سے بھرا ہوا شکل اور قسم کی ایک نئی صف تیار کرتا ہے۔ہم اس کی دلیل کے طور پر صف کی شکل کی وضاحت کرنے والے ایک ٹپل کو پاس کرسکتے ہیں۔اس معاملے میں ، ہم ایک 3x3 سرنی چاہتے ہیں ، لہذا ہم NP.zeros ((3 ، 3)) 123 پر کال کرسکتے ہیں۔یہاں ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک 3x3 numpy سرے بنائیں جس میں تمام عناصر زیرووا = np.zeros ((3 ، 3)) پرنٹ (A) پرنٹ (a) پرنٹ (3 ، 3) کی شکل کے ساتھ ایک نمی سرنی تشکیل دیتا ہے۔) NP.zeros () فنکشن کا استعمال کرتے ہوئے اور اسے پرنٹ کرتا ہے۔نتیجے میں ہونے والی صف میں تمام زیرو شامل ہوں گے ، کیونکہ یہ NP.zeros () فنکشن کے لئے پہلے سے طے شدہ قیمت ہے۔NP.zeros () فنکشن ایک ٹوپل لیتا ہے جس میں صف کی شکل اس کی دلیل کے طور پر ہوتی ہے۔"
    },
    {
        "Question": "0 اور 1 کے درمیان بے ترتیب اقدار کے ساتھ ایک 2x2 numpy صف بنائیں۔",
        "Answer": "0 اور 1 کے درمیان بے ترتیب اقدار کے ساتھ 2x2 numpy سرے بنانے کے ل we ، ہم NP.Random.rand.rand () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن مخصوص شکل کی ایک صف تیار کرتا ہے اور اسے [0 ، 1) سے زیادہ یکساں تقسیم سے بے ترتیب اقدار سے بھرتا ہے۔ہم فنکشن کے دلائل کے طور پر صف کے طول و عرض کو پاس کرسکتے ہیں۔اس معاملے میں ، ہم 2x2 سرنی چاہتے ہیں ، لہذا ہم NP.Random.rand (2 ، 2) 123 پر کال کرسکتے ہیں۔اس کی ایک مثال یہ ہے: Pythonimport numpy بطور NP# 0 اور 1a = np.random.rand.rand (2 ، 2) پرنٹ (a) کے درمیان بے ترتیب اقدار کے ساتھ ایک 2x2 numpy سرے بنائیں (a) یہ پروگرام (2 ، کی شکل کے ساتھ ایک numpy سرنی تشکیل دیتا ہے۔2) NP.Random.rand.rand () فنکشن اور پرنٹ کرتے ہیں۔نتیجے میں ہونے والی صف میں 0 اور 1 کے درمیان بے ترتیب اقدار ہوں گے ، کیونکہ یہ NP.Random.rand.rand () فنکشن کے لئے پہلے سے طے شدہ تقسیم ہے۔np.random.rand.rand () فنکشن سرنی کے طول و عرض کو اپنے دلائل کے طور پر لیتا ہے۔"
    },
    {
        "Question": "0 اور 1 کے درمیان 10 یکساں طور پر فاصلہ والی اقدار کے ساتھ ایک 1D numpy صف بنائیں۔",
        "Answer": "0 اور 1 کے درمیان 10 یکساں طور پر فاصلہ والی اقدار کے ساتھ 1D numpy صف بنانے کے ل we ، ہم NP.LINSPACE () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن کسی وقفے کے اندر یکساں طور پر فاصلہ والی اقدار کی ایک صف پیدا کرتا ہے۔ہم وقفہ کی شروعات اور اسٹاپ اقدار کے ساتھ ساتھ فنکشن کے دلائل کے طور پر صف میں جو قدر چاہتے ہیں اس کی تعداد کو پاس کرسکتے ہیں۔اس معاملے میں ، ہم 0 اور 1 کے درمیان 10 یکساں طور پر فاصلہ والی اقدار چاہتے ہیں ، لہذا ہم NP.LINSPACE (0 ، 1 ، 10) 123 پر کال کرسکتے ہیں۔اس کی ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر NP# 0 اور 1A = NP.LINSPACE (0 ، 1 ، 10) کے درمیان 10 یکساں طور پر فاصلہ والی اقدار کے ساتھ ایک 1D نیپی سرنی بنائیں۔0 اور 1 کے درمیان NP.LINSPACE () فنکشن کا استعمال کرتے ہوئے اور اسے پرنٹ کرتا ہے۔نتیجے میں سرنی میں 0 اور 1 کے درمیان یکساں طور پر 10 اقدار شامل ہوں گی۔ NP.LINSPACE () فنکشن وقفہ کی شروعات اور اسٹاپ اقدار کے ساتھ ساتھ اس کے دلائل کی حیثیت سے ہم جس قدر چاہتے ہیں اس کے دلائل کی حیثیت سے۔"
    },
    {
        "Question": "ایک 3x3 numpy سرنی بنائیں اور اسے 1D صف میں تبدیل کریں۔",
        "Answer": "3x3 نیمپی سرنی بنانے اور اسے 1D سرنی میں نئی شکل دینے کے ل we ، ہم پہلے پچھلے جوابات میں بیان کردہ کسی بھی طریقوں کا استعمال کرتے ہوئے 3x3 سرنی تشکیل دے سکتے ہیں۔اس کے بعد ، ہم سرنی کو 1D صف میں نئی شکل دینے کے لئے NP.reshape () فنکشن کا استعمال کرسکتے ہیں۔NP.reshape () فنکشن سرنی کو اپنی پہلی دلیل اور اس کی دوسری دلیل کے طور پر نئی صف کی مطلوبہ شکل کے طور پر دوبارہ تشکیل دینے کے ل takes لے جاتا ہے۔اس معاملے میں ، ہم ایک 3x3 سرنی کو 1D سرنی میں تبدیل کرنا چاہتے ہیں ، لہذا ہم NP.reshape (A ، (9 ،)) پر کال کرسکتے ہیں جہاں A 3x3 سرنی ہے جس کو ہم نے پہلے تیار کیا ہے۔یہاں ایک مثال ہے: پائیٹونیمپورٹ نیمپی کے طور پر NP# ایک 3x3 numpy arraya = np.Array بنائیں ([[1 ، 2 ، 3] ، [4 ، 5 ، 6] ، [7 ، 8 ، 9]])# صف میں صف بندی کریںA 1D arryb = np.reshape (a ، (9 ،)) پرنٹ (b) اس پروگرام سے (3 ، 3) کی شکل کے ساتھ ایک numpy سرنی ایک پیدا ہوتا ہے اور پھر اس میں دوبارہ تشکیل دینے کے لئے np.reshape () فنکشن کا استعمال ہوتا ہے۔1D سرنی B (9 ،) کی شکل کے ساتھ اور اسے پرنٹ کرتا ہے۔نتیجے میں ہونے والی صف میں وہی عناصر شامل ہوں گے جیسے اصل صف میں ، لیکن ایک چپٹا ہوا 1D فارمیٹ میں۔NP.reshape () فنکشن سرنی کو اپنی پہلی دلیل اور نئی صف کی مطلوبہ شکل کے طور پر اس کی دوسری دلیل 12.1w3schools2numpy کے طور پر دوبارہ تشکیل دینے کے لئے لے جاتا ہے۔"
    },
    {
        "Question": "ایک نپی سرنی میں زیادہ سے زیادہ قیمت تلاش کریں۔",
        "Answer": ""
    },
    {
        "Question": "",
        "Answer": "ایک نپی سرنی میں کم سے کم قیمت تلاش کرنے کے ل we ، ہم NP.MIN () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن صف میں کم سے کم قیمت لوٹاتا ہے۔ہم فنکشن کی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔اگر ہم کسی خاص محور کے ساتھ کم سے کم قیمت تلاش کرنا چاہتے ہیں تو ، ہم NP.amin () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن مخصوص محور کے ساتھ کم سے کم قیمت لوٹاتا ہے۔ہم فنکشن کے دلائل کے طور پر صف اور محور کو پاس کرسکتے ہیں۔یہاں ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر این پی# ایک نیمپری ارایا = np.array ([1 ، 2 ، 3 ، 4 ، 5]] بنائیں ([1 ، 2 ، 3 ، 4 ، 5]))# ارای مین_والیو = np.min (a) پرنٹ (min_value) میں کم سے کم قیمت تلاش کریں۔پروگرام ایک نپی سرنی A تشکیل دیتا ہے اور پھر صف میں کم سے کم قیمت تلاش کرنے کے لئے NP.MIN () فنکشن کا استعمال کرتا ہے اور اسے پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ سرنی میں کم سے کم قیمت ہوگی۔])# محور 0min_value_axis_0 = np.amin (a ، axis = 0) پرنٹ (min_value_axis_0) کے ساتھ کم سے کم قیمت تلاش کریں (min_value_axis_0)# محور 1min_value_axis_1 = np.amin (a ، axis = 1) پرنٹ (min_value_axis_1) اس پروگرام کے ساتھ کم سے کم قیمت تلاش کریں۔محور 0 اور محور 1 کے ساتھ کم سے کم قیمت تلاش کرنے کے لئے NP.amin () فنکشن کا استعمال کرتا ہے اور ان کو پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ مخصوص محور کے ساتھ کم سے کم قیمت ہوگی۔"
    },
    {
        "Question": "ایک numpy صف کے وسط کا حساب لگائیں۔",
        "Answer": "ایک نپی سرنی کے وسیلہ کا حساب لگانے کے لئے ، ہم NP.Mean () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن سرنی عناصر کے ریاضی کا مطلب (اوسط) لوٹاتا ہے۔پہلے سے طے شدہ طور پر ، اوسطا چپٹا سرنی کے اوپر لیا جاتا ہے ، لیکن ہم محور کی وضاحت کرسکتے ہیں جس کے ساتھ ہم اس کا حساب لگانا چاہتے ہیں۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔اگر ہم کسی مخصوص محور کے ساتھ وسیلہ کا حساب لگانا چاہتے ہیں تو ، ہم فنکشن کی دوسری دلیل کے طور پر محور کو پاس کرسکتے ہیں۔اس کی ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([1 ، 2 ، 3 ، 4 ، 5])# arrymean_value = np.mean (a) پرنٹ (inive_value) کے وسط کا حساب لگائیں اس پروگرام کوایک numpy سرنی A تخلیق کرتا ہے اور پھر سرنی کے وسط کا حساب لگانے کے لئے NP.Mean () فنکشن کا استعمال کرتا ہے اور اسے پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ سرنی کا مطلب ہوگا۔)# محور کے ساتھ وسط کا حساب لگائیںسرنی A اور پھر محور 0 اور محور 1 کے ساتھ ساتھ مطلب کا حساب لگانے کے لئے NP.Mean () فنکشن کا استعمال کرتا ہے اور ان کو پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ مخصوص محور کے ساتھ ساتھ ہوگا۔"
    },
    {
        "Question": "ایک نمی سرنی کے وسط کا حساب لگائیں۔",
        "Answer": "کسی نمی سرنی کے وسط کا حساب لگانے کے لئے ، ہم NP.Median () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن سرنی عناصر کی درمیانی قیمت کو لوٹاتا ہے۔پہلے سے طے شدہ طور پر ، میڈین کو چپٹی ہوئی صفوں کے اوپر لے جایا جاتا ہے ، لیکن ہم محور کی وضاحت کرسکتے ہیں جس کے ساتھ ہم میڈین کا حساب لگانا چاہتے ہیں۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔اگر ہم کسی مخصوص محور کے ساتھ میڈین کا حساب لگانا چاہتے ہیں تو ، ہم محور کو دوسری دلیل کے طور پر فنکشن 12345 کے پاس منتقل کرسکتے ہیں۔ اس کی ایک مثال ہے: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arrya = np.array بنائیں ([1 ، 2 ، 3 ، 3 ،4 ، 5])# arraymedian_value = np.median (a) پرنٹ (میڈین_والیو) کے میڈین کا حساب لگائیں یہ پروگرام ایک نپی سرنی A تشکیل دیتا ہے اور پھر سرنی کے میڈین کا حساب لگانے کے لئے NP.Median () فنکشن کا استعمال کرتا ہے اور اسے پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ سرنی کا درمیانی حصہ ہوگا۔)# محور کے ساتھ میڈین کا حساب لگائیں۔سرنی A اور پھر NP.Median () فنکشن کا استعمال محور 0 اور محور 1 کے ساتھ میڈین کا حساب کتاب کرنے کے لئے کرتا ہے اور ان کو پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ مخصوص محور 12345.1sharpsightlabs2geeksforgeeks3numpy4sparkbyexamples5studytonight کے ساتھ میڈین ہوگا"
    },
    {
        "Question": "ایک نمی سرنی کے معیاری انحراف کا حساب لگائیں۔",
        "Answer": "کسی نمی سرنی کے معیاری انحراف کا حساب لگانے کے لئے ، ہم NP.STD () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن معیاری انحراف کو لوٹاتا ہے ، جو سرنی عناصر کی تقسیم کے پھیلاؤ کا ایک پیمانہ ہے۔پہلے سے طے شدہ طور پر ، معیاری انحراف کا حساب چپٹا ہوا سرنی کے لئے کیا جاتا ہے ، لیکن ہم محور کی وضاحت کرسکتے ہیں جس کے ساتھ ہم معیاری انحراف کا حساب لگانا چاہتے ہیں۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔اگر ہم کسی مخصوص محور کے ساتھ معیاری انحراف کا حساب لگانا چاہتے ہیں تو ، ہم محور کو دوسری دلیل کے طور پر فنکشن 12345 کے پاس منتقل کرسکتے ہیں۔ اس کی ایک مثال ہے: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([1 ، 2 ، 3.اور اسے پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ سرنی کا معیاری انحراف ہوگا۔])# محور کے ساتھ معیاری انحراف کا حساب لگائیں۔محور 0 اور محور 1 کے ساتھ معیاری انحراف کا حساب لگانے کے لئے NP.STD () فنکشن کا استعمال کرتا ہے اور ان کو پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ مخصوص محور 12345.1sparkbyexamples2numpy3Geeksforgeeks4javat5sharpsightlabs کے ساتھ معیاری انحراف ہوگا"
    },
    {
        "Question": "ایک numpy صف کے تغیر کا حساب لگائیں۔",
        "Answer": "ایک نپی سرنی کے تغیر کا حساب لگانے کے لئے ، ہم NP.Var () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن تغیر کو لوٹاتا ہے ، جو صف کے عناصر کی تقسیم کے پھیلاؤ کا ایک پیمانہ ہے۔پہلے سے طے شدہ طور پر ، تغیرات کا حساب چپٹا ہوا سرنی کے لئے کیا جاتا ہے ، لیکن ہم محور کی وضاحت کرسکتے ہیں جس کے ساتھ ساتھ ہم تغیر کا حساب لگانا چاہتے ہیں۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔اگر ہم کسی مخصوص محور کے ساتھ تغیر کا حساب لگانا چاہتے ہیں تو ، ہم محور کو دوسری دلیل کے طور پر فنکشن 123456 کے پاس منتقل کرسکتے ہیں۔ اس کی ایک مثال ہے: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arrya = np.array بنائیں ([1 ، 2 ، 3 ، 3 ،4 ، 5])# arrayvar_value = np.var (a) پرنٹ (var_value) کے تغیرات کا حساب لگائیں یہ پروگرام ایک numpy سرنی A تشکیل دیتا ہے اور پھر سرنی کے تغیر کا حساب لگانے کے لئے np.var () فنکشن کا استعمال کرتا ہے اور اسے پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ سرنی کا مختلف ہے۔)# محور کے ساتھ تغیرات کا حساب لگائیںسرے A اور پھر محور 0 اور محور 1 کے ساتھ تغیرات کا حساب لگانے کے لئے NP.var () فنکشن کا استعمال کرتا ہے اور ان کو پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ مخصوص محور 123456.1numpy2sharpsightlabs3statisticsglobe4tutorialsplect5geEKSFORGEEKS6SPARKBYEXAMPLES کے ساتھ تغیر ہوگا"
    },
    {
        "Question": "ایک نمی سرنی کے عناصر کا خلاصہ۔",
        "Answer": "ایک نمی سرنی کے عناصر کا خلاصہ کرنے کے لئے ، ہم NP.SUM () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن صف میں موجود تمام عناصر کا مجموعہ لوٹاتا ہے۔پہلے سے طے شدہ طور پر ، رقم چپٹی ہوئی صفوں کے اوپر لی جاتی ہے ، لیکن ہم محور کی وضاحت کرسکتے ہیں جس کے ساتھ ہم رقم کا حساب لگانا چاہتے ہیں۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔اگر ہم کسی مخصوص محور کے ساتھ ساتھ رقم کا حساب لگانا چاہتے ہیں تو ، ہم محور کو دوسری دلیل کے طور پر فنکشن 123456 کے پاس منتقل کرسکتے ہیں۔ اس کی ایک مثال ہے: پیتھونیمپورٹ نیمپی کے طور پر این پی# ایک نمی اری ara ایا = np.array بنائیں ([1 ، 2 ، 3 ،4 ، 5])# arraysum_value = np.sum (a) پرنٹ (sum_value) کے جوڑے کا حساب لگائیں یہ پروگرام ایک numpy سرنی A تشکیل دیتا ہے اور پھر سرنی کے جوڑے کا حساب لگانے کے لئے NP.SUM () فنکشن استعمال کرتا ہے اور اسے پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ سرنی کا مجموعہ ہوگا۔)# محور کے ساتھ ساتھ جوڑے کا حساب لگائیں۔سرنی A اور پھر NP.SUM () فنکشن کا استعمال محور 0 اور محور 1 کے ساتھ ساتھ رقم کا حساب لگانے کے لئے کرتا ہے اور ان کو پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ مخصوص محور 123456.1 ڈیجیٹلوسین 2 اینمپائی 3 جی ای ای ایکسفورجیجس 4 ایس پی آر بی ای ایکسپلسیمپلس 5 ایس ایچ آر پی ایس آئی ٹی ایل اے بی ایس 6 جےواٹ پوائنٹ کے ساتھ مل کر ہوگا"
    },
    {
        "Question": "دو numpy صفوں کے ڈاٹ پروڈکٹ کا حساب لگائیں۔",
        "Answer": "دو numpy صفوں کے ڈاٹ پروڈکٹ کا حساب لگانے کے لئے ، ہم NP.DOT () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن دونوں صفوں کی ڈاٹ پروڈکٹ کو لوٹاتا ہے۔اگر دونوں صفیں 1-D ہیں تو ، یہ ویکٹروں کی اندرونی مصنوعات (پیچیدہ اجتماع کے بغیر) لوٹاتا ہے۔اگر دونوں صفیں 2-D ہیں تو ، یہ میٹرکس ضرب کو لوٹاتا ہے۔اگر یا تو سرنی 0-D (اسکیلر) ہے تو ، یہ دو نمبروں کو ضرب دینے کے مترادف ہے۔اگر پہلی سرنی ایک N-D سرنی ہے اور دوسری صف 1-D سرنی ہے تو ، یہ پہلی صف کے آخری محور اور دوسری صف کے آخری محور پر ایک رقم کی مصنوعات ہے۔اگر پہلی سرنی ایک N-D سرنی ہے اور دوسری صف M-D سرنی ہے (جہاں M> = 2) ہے تو ، یہ پہلی صف کے آخری محور اور دوسری صف کے دوسرے سے آخری محور پر ایک رقم کی مصنوعات ہے۔ہم فنکشن کے دلائل کے طور پر دونوں صفوں کو پاس کرسکتے ہیں۔یہاں ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر این پی# دو نیمپی اریزا = این پی آرے بنائیں ([1 ، 2 ، 3]) بی = این پی.ارے ([4 ، 5 ، 6]).dot (a ، b) پرنٹ (ڈاٹ_ پروڈکٹ) یہ پروگرام دو numpy سرے A اور B تیار کرتا ہے اور پھر صفوں کی ڈاٹ پروڈکٹ کا حساب لگانے کے لئے NP.DOT () فنکشن کا استعمال کرتا ہے اور اسے پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ آرنیوں کی ڈاٹ پروڈکٹ ہوگی۔۔اور پھر صفوں کی ڈاٹ پروڈکٹ کا حساب لگانے اور اس پرنٹ کرنے کے لئے NP.DOT () فنکشن کا استعمال کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ صفوں کا ڈاٹ پروڈکٹ ہوگا۔"
    },
    {
        "Question": "ایک نمی سرنی کو منتقل کریں۔",
        "Answer": "ایک نپی سرنی کو منتقل کرنے کے ل we ، ہم متعدد طریقے استعمال کرسکتے ہیں۔ایک طریقہ یہ ہے کہ صف کی ٹی وصف کو استعمال کیا جائے۔یہ وصف ٹرانسپوزڈ صف کو لوٹاتا ہے۔ایک اور طریقہ یہ ہے کہ صف کے ٹرانسپوز () طریقہ استعمال کریں۔یہ طریقہ ٹرانسپوزڈ سرنی کو بھی لوٹاتا ہے۔ہم صف کو منتقل کرنے کے لئے numpy.transpose () فنکشن کا استعمال بھی کرسکتے ہیں۔یہ فنکشن محوروں کے ساتھ اصل صف کا نظارہ لوٹاتا ہے۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔اگر ہم محوروں کی ترتیب کی وضاحت کرنا چاہتے ہیں تو ، ہم محور پیرامیٹر کو دوسری دلیل کے طور پر فنکشن 123456 کے پاس منتقل کرسکتے ہیں۔ یہاں ایک مثال ہے: پیتھونیمپورٹ نیمپی کے طور پر این پی# ایک numpy arraya = np.array بنائیں ([[1 ، 2 ، 3] ، [4 ، 5 ، 6]]])# t attributea_t = a.tprint (a_t) کا استعمال کرتے ہوئے سرنی کو منتقل کریں# ٹرانسپوز () طریقہ کار_ٹرانسپوز = اے ٹرانزپوز () پرنٹ (a_transpose)# سرنی کا استعمال کرتے ہوئے صف کو منتقل کریںnumpy.transpose () فنکشنہ_نپ_ٹرانسپوز = np.transpose (a) پرنٹ (a_np_transpose)# numpy.transpose () فنکشن کے ساتھ محور پیرامیٹرا_نپ_ٹرانسپوز_ایکس = (axess = (1 ، xess = (1 ،)).نتیجے میں آؤٹ پٹ ٹرانسپوزڈ سرنی ہوگی"
    },
    {
        "Question": "ایک نپی سرنی میں عناصر کے ترتیب کو الٹ دیں۔",
        "Answer": "ایک نپی سرنی میں عناصر کے ترتیب کو پلٹانے کے ل we ، ہم numpy.flip () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن مخصوص محور میں پلٹ جانے والے عناصر کے ساتھ ایک نئی صف لوٹاتا ہے۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔اگر ہم محور کی وضاحت کرنا چاہتے ہیں جس کے ساتھ ساتھ ہم عناصر کو پلٹانا چاہتے ہیں تو ، ہم محور پیرامیٹر کو فنکشن کی دوسری دلیل کے طور پر پاس کرسکتے ہیں۔اگر ہم محور پیرامیٹر کی وضاحت نہیں کرتے ہیں تو ، فنکشن ان پٹ سرنی کے تمام محور کے ساتھ عناصر کو پلٹائیں گے۔یہاں ایک مثال ہے: پائیٹونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([1 ، 2 ، 3 ، 4 ، 5])# numpy.flip () a_reverse = np.flip کا استعمال کرتے ہوئے صف میں عناصر کے ترتیب کو تبدیل کریں(a) پرنٹ (a_reverse) یہ پروگرام ایک نمی سرنی A تشکیل دیتا ہے اور پھر سرنی میں عناصر کی ترتیب کو الٹ کرنے کے لئے numpy.flip () فنکشن کا استعمال کرتا ہے اور اسے پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ الٹ سرنی ہوگی۔numpy.flip () a_reverse_axis_0 = np.flip (a ، axis = 0) پرنٹ (a_reverse_axis_0)# محور 1 کے ساتھ عناصر کے ترتیب کو تبدیل کریں۔.نتیجے میں آؤٹ پٹ مخصوص محور کے ساتھ الٹ سرنی ہوگی۔"
    },
    {
        "Question": "چڑھائی ترتیب میں ایک نمی سرنی کو ترتیب دیں۔",
        "Answer": "چڑھائی ترتیب میں ایک نمی سرنی کو ترتیب دینے کے ل we ، ہم numpy.sort () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن ان پٹ سرنی کی ترتیب شدہ کاپی لوٹاتا ہے۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔اگر ہم سرنی کو جگہ جگہ ترتیب دینا چاہتے ہیں تو ، ہم صف کے ترتیب () کا طریقہ استعمال کرسکتے ہیں۔یہ طریقہ جگہ جگہ جگہ کو ترتیب دیتا ہے اور اس کی کاپی واپس نہیں کرتا ہے۔یہاں ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([3 ، 1 ، 4 ، 1 ، 5 ، 9 ، 2 ، 6 ، 5 ، 3 ، 5])# چڑھائی ترتیب میں صف کو ترتیب دیں۔numpy.sort () a_sorted = np.sort (a) پرنٹ (a_sorted)# ترتیب () a.sort () پرنٹ (a) کا استعمال کرتے ہوئے چڑھائی ترتیب میں جگہ کو ترتیب دیں۔نمی.سورٹ () فنکشن اور ترتیب () کے طریقہ کار میں سرے کو ترتیب دینے اور ان کو پرنٹ کرنے کا طریقہ۔اس کے نتیجے میں آؤٹ پٹ ترتیب شدہ صف ہوگی۔ نوٹ کریں کہ ہم پہلے چڑھتے ترتیب میں چھانٹ کر اور پھر فہرست سلائسنگ کا استعمال کرتے ہوئے عناصر کے آرڈر کو تبدیل کرکے نزول ترتیب میں ایک نمی سرنی کو بھی ترتیب دے سکتے ہیں۔یہاں ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([3 ، 1 ، 4 ، 1 ، 5 ، 9 ، 2 ، 6 ، 5 ، 3 ، 5])# چڑھائی ترتیب میں صف کو ترتیب دیں۔numpy.sort () اور پھر ordera_sorted_descending = np.sort (a) [::-1] پرنٹ (a_sorted_descending) کو ریورس کریں یہ پروگرام ایک نپی سرنی A تشکیل دیتا ہے اور پھر numpy.sort () فنکشن اور فہرست سلائسنگ کو ترتیب دینے کے لئے استعمال کرتا ہے۔نزول ترتیب میں صف اور اسے پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ اترتے ہوئے ترتیب میں ترتیب دی گئی صف ہوگی۔"
    },
    {
        "Question": "ایک نمی سرنی میں زیادہ سے زیادہ قیمت کے اشارے تلاش کریں۔",
        "Answer": "ایک نپی سرنی میں زیادہ سے زیادہ قیمت کے اشارے تلاش کرنے کے ل we ، ہم numpy.argmax () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن محور کے ساتھ زیادہ سے زیادہ اقدار کے اشارے لوٹاتا ہے۔پہلے سے طے شدہ طور پر ، انڈیکس چپٹی ہوئی صف میں ہے ، بصورت دیگر مخصوص محور کے ساتھ۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔اگر ہم محور کی وضاحت کرنا چاہتے ہیں جس کے ساتھ ساتھ ہم زیادہ سے زیادہ قیمت کے اشارے تلاش کرنا چاہتے ہیں تو ، ہم محور پیرامیٹر کو فنکشن کی دوسری دلیل کے طور پر پاس کرسکتے ہیں۔یہاں ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر این پی# ایک نیمپری ارایا = np.array بنائیں ([3 ، 1 ، 4 ، 1 ، 5 ، 9 ، 2 ، 6 ، 5 ، 3 ، 5])# زیادہ سے زیادہ قیمت کے اشارے تلاش کریں۔numpy.argmax () Max_indices = np.argmax (a) پرنٹ (میکس_ انڈیسس) کا استعمال کرتے ہوئے سرنی میں یہ پروگرام ایک numpy سرنی A تشکیل دیتا ہے اور پھر سرے میں زیادہ سے زیادہ قیمت کے اشارے تلاش کرنے کے لئے numpy.argmax () فنکشن کا استعمال کرتا ہے اور پھراسے پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ سرنی میں زیادہ سے زیادہ قیمت کے اشارے ہوں گے۔numpy.argmax () max_indices_axis_0 = np.argmax (a ، محور = 0) پرنٹ (میکس_ انڈیسس_یکسس_0) کا استعمال کرتے ہوئے محور 0 کے ساتھ زیادہ سے زیادہ قیمت کے اشارے۔.ارگمیکس (a ، محور = 1) پرنٹ (میکس_ انڈیسس_یکسس_1) یہ پروگرام ایک نمی سرنی A تشکیل دیتا ہے اور پھر محور 0 اور محور 1 کے ساتھ زیادہ سے زیادہ قیمت کے اشارے تلاش کرنے کے لئے numpy.argmax () فنکشن کا استعمال کرتا ہے اور ان کو پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ مخصوص محور کے ساتھ زیادہ سے زیادہ قیمت کے اشارے ہوں گے۔"
    },
    {
        "Question": "کم سے کم قیمت کے اشارے ایک نمی سرنی میں تلاش کریں۔",
        "Answer": "کم سے کم قیمت کے اشاریے کو ایک نمی سرنی میں تلاش کرنے کے ل we ، ہم numpy.argmin () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن محور کے ساتھ کم سے کم اقدار کے اشارے لوٹاتا ہے۔پہلے سے طے شدہ طور پر ، انڈیکس چپٹی ہوئی صف میں ہے ، بصورت دیگر مخصوص محور کے ساتھ۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔اگر ہم محور کی وضاحت کرنا چاہتے ہیں جس کے ساتھ ہی ہم کم سے کم قیمت کے اشارے تلاش کرنا چاہتے ہیں تو ، ہم محور پیرامیٹر کو دوسری دلیل کے طور پر فنکشن 123456 کی طرف سے پاس کرسکتے ہیں۔ یہاں ایک مثال ہے: ازگر کے طور پر پیتھونیمپورٹ نوم کو این پی# ایک نامزد اری = این پی بنائیں۔سرنی ([3 ، 1 ، 4 ، 1 ، 5 ، 9 ، 2 ، 6 ، 5 ، 3 ، 5]))# numpy.argmin () Min_Indices = np.argmin (a کا استعمال کرتے ہوئے سرے میں کم سے کم قیمت کے اشارے تلاش کریں۔) پرنٹ (MIN_INDICES) یہ پروگرام ایک نمی سرنی A تشکیل دیتا ہے اور پھر سرنی میں کم سے کم قیمت کے اشارے تلاش کرنے کے لئے numpy.argmin () فنکشن کا استعمال کرتا ہے اور اسے پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ سرنی میں کم سے کم قیمت کے اشارے ہوں گے۔numpy.argmin () min_indices_axis_0 = np.argmin (a ، محور = 0) پرنٹ (min_indices_axis_0) کا استعمال کرتے ہوئے محور 0 کے ساتھ کم از کم قیمت کے اشارے.ارگمین (A ، محور = 1) پرنٹ (MIN_INDICES_AXIS_1) یہ پروگرام ایک نپی سرنی A تشکیل دیتا ہے اور پھر محور 0 اور محور 1 کے ساتھ کم سے کم قیمت کے اشارے تلاش کرنے کے لئے numpy.argmin () فنکشن کا استعمال کرتا ہے اور ان کو پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ مخصوص محور کے ساتھ کم سے کم قیمت کے اشارے ہوں گے۔"
    },
    {
        "Question": "نمی سرنی میں انوکھی اقدار تلاش کریں۔",
        "Answer": "نمی سرنی میں انوکھی اقدار کو تلاش کرنے کے ل we ، ہم numpy.unique () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن ان پٹ سرنی میں ترتیب شدہ انوکھی اقدار کو لوٹاتا ہے۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔منفرد عناصر کے علاوہ تین اختیاری نتائج بھی موجود ہیں: ان پٹ سرنی کے اشارے جو انوکھی اقدار دیتے ہیں ، ان پٹ سرنی کی تشکیل نو کی انوکھی صف کے اشارے ، اور ان پٹ سرنی میں ہر انوکھی قدر کی تعداد آتی ہے۔ہم ان اضافی آؤٹ پٹ کو حاصل کرنے کے لئے اختیاری پیرامیٹرز ریٹرن_ انڈیکس ، ریٹرن_ انورس ، اور ریٹرن_کاؤنٹس استعمال کرسکتے ہیں۔یہاں کچھ مثالیں ہیں: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([3 ، 1 ، 4 ، 1 ، 5 ، 9 ، 2 ، 6 ، 5 ، 3 ، 5])# میں انوکھی اقدار تلاش کریںnumpy.unique () منفرد_والیوز = np.unique (a) پرنٹ (منفرد_والیوز) کا استعمال کرتے ہوئے سرنی یہ پروگرام ایک نمی سرنی A تشکیل دیتا ہے اور پھر صف میں منفرد اقدار کو تلاش کرنے کے لئے numpy.unique () فنکشن کا استعمال کرتا ہے اور ان کو پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ سرنی میں ترتیب دی گئی انوکھی اقدار ہوں گی۔)# numpy.unique () منفرد_اولیوز ، انڈیکس = np.unique (a ، ریٹرن_ انڈیکس = سچ) پرنٹ (منفرد_ایولس) پرنٹ (انڈیکس) پرنٹ (انڈیکس) پرنٹ (انڈیکس) پرنٹ (اشاریہ) پرنٹ (انڈیکس) پرنٹ (انڈیکس) پرنٹ (انڈیکس) پرنٹ (اشاریہ) پرنٹ (انڈیکس) پرنٹ (انڈیکس) پرنٹ (اشاریہ) پرنٹ (انڈیکس)numpy.unique () ریٹرن_ انڈیکس پیرامیٹر کے ساتھ کام کرتا ہے تاکہ صف میں منفرد اقدار اور ان کے اشاریے تلاش کریں اور ان کو پرنٹ کریں۔نتیجے میں آؤٹ پٹ سرنی اور ان کے اشاریہ جات میں ترتیب دی گئی انوکھی اقدار ہوں گی۔.۔اس کے نتیجے میں آؤٹ پٹ سرنی ، ان کے اشاریہ جات ، اور ان کی گنتی میں ترتیب دی گئی انوکھی اقدار ہوں گی۔"
    },
    {
        "Question": "ہر ایک منفرد قدر کے واقعات کی تعداد کو ایک نمی سرنی میں گنیں۔",
        "Answer": "ایک نمی سرنی میں ہر انوکھی قدر کی موجودگی کی تعداد کو گننے کے ل we ، ہم ریٹرن_کاؤنٹس پیرامیٹر کے ساتھ numpy.unique () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن ان پٹ سرنی میں ترتیب شدہ انوکھی اقدار کو لوٹاتا ہے اور ان پٹ سرنی میں ہر انوکھی قدر کی تعداد میں آنے کی تعداد۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔اس کی ایک مثال یہ ہے: این پی# کے طور پر پائیتھونیم پورٹ نیمپی ایک نیمپی ارای = این پی آر آرے بنائیں ([3 ، 1 ، 4 ، 1 ، 5 ، 9 ، 2 ، 6 ، 5 ، 3 ، 5])# ہر ایک کی تعداد کی گنتی کریںnumpy.unique () منفرد_اولیوز ، گنتی = np.unique (a ، ریٹرن_کاؤنٹس = سچ) پرنٹ (منفرد_والیوز) پرنٹ (گنتی) پرنٹ (گنتی) کا استعمال کرتے ہوئے سرنی میں انوکھی قیمت (گنتی) پرنٹ (گنتی) پرنٹ (گنتی)ریٹرن_کاؤنٹس پیرامیٹر کے ساتھ انفرادی اقدار اور ان کی گنتی کو صف میں تلاش کرنے اور ان کو پرنٹ کرنے کے لئے۔اس کے نتیجے میں آؤٹ پٹ سرنی اور ان کی گنتی میں ترتیب دی گئی انوکھی اقدار ہوں گی۔ پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([[1 ، 2 ، 3] ، [4 ، 5 ، 6]])# گنتیnumpy.unique () منفرد_والیوز_یکسس_0 ، گنتی_ایکسس_0 = np.unique (A ، محور = 0 ، ریٹرن_کاؤنٹس = سچ) پرنٹ (منفرد_والیوز_یکسس_0) پرنٹ (گنتی_ایکس_اکس_0) پرنٹ (گنتی_ایکس_ایکس_0) پرنٹ (گنتی_ایکس_ایکس_0) پرنٹ (گنتی_ایکسس_0) پرنٹ (گنتی_ایکسس_0) پرنٹ (گنتی_ایکسس_0) پرنٹ (گنتی_ایکسس_0) پرنٹ (گنتی_ایکسس_0) پرنٹ (گنتی۔محور 1 کے ساتھ ہر انوکھی قدر 1 numpy.unique () منفرد_والیوز_یکسس_1 کا استعمال کرتے ہوئے ، گنتی_ایکسس_1 = np.unique (a ، محور = 1 ، ریٹرن_کاؤنٹس = ٹرو) پرنٹ (منفرد_والیوز_یکسس_1) پرنٹ (گنتی_ایکسس_1) یہ پروگرام ایک نپپری اے تخلیق کرتا ہے اور پھر اس کا استعمال کرتا ہے اور پھر اسے استعمال کرتا ہے. unique () ریٹرن_ اکاؤنٹس پیرامیٹر کے ساتھ کام کرتے ہیں تاکہ محور 0 اور محور 1 کے ساتھ منفرد اقدار اور ان کی گنتی تلاش کی جاسکے اور ان کو پرنٹ کریں۔نتیجے میں آؤٹ پٹ مخصوص محور اور ان کی گنتی کے ساتھ ترتیب شدہ انوکھی اقدار ہوں گی۔"
    },
    {
        "Question": "تمام منفی اقدار کو ایک numpy صف میں صفر سے تبدیل کریں۔",
        "Answer": "تمام منفی اقدار کو ایک نمی سرنی میں صفر کے ساتھ تبدیل کرنے کے ل we ، ہم کئی طریقے استعمال کرسکتے ہیں۔ایک طریقہ یہ ہے کہ منفی اقدار کی نشاندہی کرنے کے لئے بولین انڈیکسنگ کا استعمال کریں اور پھر انہیں صفر پر رکھیں۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔اس کی ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر این پی# ایک نیمپری ارایا = np.array بنائیں ([3 ، -1 ، 4 ، -1 ، 5 ، -9 ، 2 ، 6 ، 5 ، 3 ، 5])# تمام منفی اقدار کو تبدیل کریںصفر کے ساتھ صف میں بولین انڈیکسنگا کا استعمال کرتے ہوئے [A <0] = 0 پرنٹ (A) یہ پروگرام ایک نپی سرنی A تشکیل دیتا ہے اور پھر صفر کے ساتھ تمام منفی اقدار کو تبدیل کرنے کے لئے بولین انڈیکسنگ کا استعمال کرتا ہے اور اسے پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ تمام منفی اقدار کے ساتھ صفر کے ساتھ تبدیل ہوگی۔# صف میں تمام منفی اقدار کو محور 0 کے ساتھ ساتھ صفر کے ساتھ بولین انڈیکسنگا کا استعمال کرتے ہوئے [A <0] = 0 پرنٹ (A)# محور 1 کے ساتھ ساتھ تمام منفی اقدار کو محور 1 کے ساتھ ساتھ صفر کے ساتھ بولین انڈیکسنگا [A <0] = 0 پرنٹ ((A <0] = 0 پرنٹ (استعمال کریںa) یہ پروگرام ایک نپی سرنی A تشکیل دیتا ہے اور پھر محور 0 اور محور 1 کے ساتھ صف میں تمام منفی اقدار کو صفر کے ساتھ تبدیل کرنے کے لئے بولین انڈیکسنگ کا استعمال کرتا ہے اور ان کو پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ مخصوص محور کے ساتھ صفر کے ساتھ تبدیل کی جانے والی تمام منفی اقدار کے ساتھ صف ہوگی۔ نوٹ کریں کہ ہم دوسرے طریقوں جیسے numpy.clip () اور numpy.where () کو بھی استعمال کرسکتے ہیں تاکہ منفی اقدار کو صفر کے ساتھ تبدیل کیا جاسکے۔"
    },
    {
        "Question": "عنصر کے لحاظ سے دو numpy صفوں کو شامل کریں۔",
        "Answer": "عنصر کے لحاظ سے دو numpy صفوں کو شامل کرنے کے ل we ، ہم numpy.add () فنکشن استعمال کرسکتے ہیں۔اس فنکشن میں عنصر کے لحاظ سے دو صفوں کی اقدار کا اضافہ ہوتا ہے۔ہم دونوں صفوں کو پہلی اور دوسرے دلائل کے طور پر فنکشن میں منتقل کرسکتے ہیں۔دونوں صفوں میں ایک ہی شکل ہونی چاہئے۔اس کی ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر این پی# دو نیمپی اریزا = این پی آرے بنائیں۔.add () c = np.add (a ، b) پرنٹ (c) یہ پروگرام دو numpy سرے A اور B تیار کرتا ہے اور پھر numpy.add () فنکشن کو دو سرنیوں کو شامل کرنے کے لئے استعمال کرتا ہے اور اس کے نتیجے میں صف کو پرنٹ کرتا ہےcاس کے نتیجے میں آؤٹ پٹ دو صفوں کے عنصر کے ساتھ سرنی ہوگی۔b = np.array ([[7 ، 8 ، 9] ، [10 ، 11 ، 12]])# numpy.add () c_axis_0 = np.add (a ، b) پرنٹ (c_axis_0)# numpy.add () c_axis_1 = np.add (a ، b) پرنٹ (c_axis_1) کا استعمال کرتے ہوئے محور 1 کے ساتھ ساتھ دو صفوں کے عنصر شامل کریں.Add () دو صفوں کو عنصر کے لحاظ سے محور 0 اور محور 1 کے ساتھ شامل کرنے کے لئے فنکشن اور نتیجے میں ہونے والی صفوں C_AXIS_0 اور C_AXIS_1 پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ مخصوص محور کے ساتھ دو صفوں کے عنصر کے ساتھ عنصر کے ساتھ صفیں ہوں گی۔ نوٹ کہ ہم + آپریٹر کو دو numpy صفوں کو شامل کرنے کے لئے بھی استعمال کرسکتے ہیں۔"
    },
    {
        "Question": "ایک نمی سرنی کو دوسرے عنصر کے لحاظ سے گھٹائیں۔",
        "Answer": "کسی دوسرے عنصر کے لحاظ سے ایک نمی سرنی کو گھٹانے کے ل we ، ہم numpy.subtract () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن دو صفوں کی اقدار کو گھٹا دیتا ہے ، عنصر کے لحاظ سے۔ہم دونوں صفوں کو پہلی اور دوسرے دلائل کے طور پر فنکشن میں منتقل کرسکتے ہیں۔دونوں صفوں میں ایک ہی شکل ہونی چاہئے۔یہاں ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر NP# دو numpy arraysa = np.array ([1 ، 2 ، 3]) B = NP.Array ([4 ، 5 ، 6])# کسی دوسرے عنصر کے استعمال سے ایک سرے کو گھٹائیںnumpy.subtract () c = np.subtract (a ، b) پرنٹ (c) یہ پروگرام دو numpy and a اور b تیار کرتا ہے اور پھر عنصر کے لحاظ سے B کو گھٹا دینے کے لئے numpy.subtract () فنکشن کا استعمال کرتا ہے اور اس کے نتیجے میں پرنٹ کرتا ہےسرنی سی۔نتیجے میں آؤٹ پٹ دو صفوں کے عنصر کے لحاظ سے فرق کے ساتھ صف ہوگی۔b = np.array ([[7 ، 8 ، 9] ، [10 ، 11 ، 12]])# numpy.subtract () c_axis_0 = np.subtract (a ،) کا استعمال کرتے ہوئے محور 0 کے ساتھ ساتھ ایک دوسرے عنصر سے ایک صف کو ایک دوسرے عنصر کے ساتھ گھٹائیںb) پرنٹ (c_axis_0)# numpy.subtract () c_axis_1 = np.subract (a ، b) پرنٹ (c_axis_1) کا استعمال کرتے ہوئے محور 1 کے ساتھ ساتھ ایک دوسرے عنصر کے لحاظ سے ایک صف کو گھٹائیں۔numpy.subtract () فنکشن کو ایک عنصر کے لحاظ سے محور 0 اور محور 1 کے ساتھ گھٹا دینا اور نتیجے میں ہونے والی صفوں C_AXIS_0 اور C_AXIS_1 پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ مخصوص محور کے ساتھ ساتھ دو صفوں کے عنصر کے لحاظ سے فرق کے ساتھ صفیں ہوں گی۔ نوٹ کہ ہم-آپریٹر کو کسی دوسرے عنصر کے مطابق ایک نام کی صف کو گھٹا دینے کے لئے بھی استعمال کرسکتے ہیں۔"
    },
    {
        "Question": "عنصر کے لحاظ سے دو نپی سرنیوں کو ضرب دیں۔",
        "Answer": "عنصر کے لحاظ سے دو numpy صفوں کو ضرب دینے کے ل we ، ہم numpy.multiply () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن دو صفوں کی اقدار کو بڑھاتا ہے ، عنصر کے لحاظ سے۔ہم دونوں صفوں کو پہلی اور دوسرے دلائل کے طور پر فنکشن میں منتقل کرسکتے ہیں۔دونوں صفوں میں ایک ہی شکل ہونی چاہئے۔اس کی ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر این پی# دو نیمپی اریاسا = این پی.ارے بنائیں ([1 ، 2 ، 3]) بی = این پی.ارے ([4 ، 5 ، 6])# نیمپی کا استعمال کرتے ہوئے دو اری عنصر کے مطابق دو اریوں کو ضرب دیں۔.مولٹیپلی () c = np.multiply (a ، b) پرنٹ (c) یہ پروگرام دو numpy سرے A اور B تیار کرتا ہے اور پھر numpy.multyply () فنکشن کا استعمال کرتا ہے تاکہ دو صفوں کو عنصر کے لحاظ سے ضرب لگائے اور اس کے نتیجے میں سرنی کو پرنٹ کیا جائے۔cاس کے نتیجے میں آؤٹ پٹ دو صفوں کی عنصر وار مصنوع کے ساتھ صف ہوگی۔b = np.array ([[7 ، 8 ، 9] ، [10 ، 11 ، 12]])# numpy.multiply () c_axis_0 = np.multiply (a ، b) پرنٹ (c_axis_0)# numpy.multyply () c_axis_1 = np.multiply (a ، b) پرنٹ (c_axis_1) کا استعمال کرتے ہوئے محور 1 کے ساتھ ساتھ دو صفوں کے عنصر کے لحاظ سے دو ضرب کریں۔.مٹلیپلی () محور 0 اور محور 1 کے ساتھ عنصر کے لحاظ سے دو اریوں کو ضرب دینے کے لئے فنکشن اور نتیجے میں ہونے والی صفوں C_AXIS_0 اور C_AXIS_1 پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ مخصوص محور کے ساتھ دو صفوں کی عنصر کے مطابق مصنوعات کے ساتھ صفیں ہوں گی۔ نوٹ کریں کہ ہم * آپریٹر کو دو numpy اریوں کو ضرب دینے کے لئے بھی استعمال کرسکتے ہیں۔"
    },
    {
        "Question": "ایک نمی سرنی کو دوسرے عنصر کے لحاظ سے تقسیم کریں۔",
        "Answer": "ایک نمی سرنی کو دوسرے عنصر کے لحاظ سے تقسیم کرنے کے ل we ، ہم numpy.diveide () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن دو صفوں کی اقدار کو تقسیم کرتا ہے ، عنصر کے لحاظ سے۔ہم دونوں صفوں کو پہلی اور دوسرے دلائل کے طور پر فنکشن میں منتقل کرسکتے ہیں۔دونوں صفوں میں ایک ہی شکل ہونی چاہئے۔یہاں ایک مثال یہ ہے: پائیٹونیمپورٹ نیمپی کے طور پر NP# دو numpy arraysa = np.array ([1 ، 2 ، 3]) B = NP.Array ([4 ، 5 ، 6])# کسی دوسرے عنصر کے ذریعہ ایک سرے کو تقسیم کریںnumpy.divide () c = np.divide (a ، b) پرنٹ (c) یہ پروگرام دو numpy and a اور b تیار کرتا ہے اور پھر B عنصر کے ذریعہ A کو تقسیم کرنے کے لئے numpy.divide () فنکشن استعمال کرتا ہے اور اس کے نتیجے میں پرنٹ کرتا ہےسرنی سی۔اس کے نتیجے میں آؤٹ پٹ دو صفوں کے عنصر کے مطابق کے ساتھ سرنی ہوگی۔b = np.array ([[7 ، 8 ، 9] ، [10 ، 11 ، 12]])# ایک سرنی کو دوسرے عنصر کے ذریعہ محور کے ساتھ تقسیم کریں۔b) پرنٹ (c_axis_0)# ایک سرنی کو کسی دوسرے عنصر کے ذریعہ محور 1 کے ساتھ ساتھ تقسیم کریں 1 numpy.divide () c_axis_1 = np.dived (a ، b) پرنٹ (c_axis_1) کا استعمال کرتے ہوئے یہ پروگرام دو numpy سرے A اور B تیار کرتا ہے اور پھر استعمال کرتا ہے اور پھر استعمال کرتا ہے۔numpy.diveide () کام A کے ذریعہ B عنصر کے لحاظ سے محور 0 اور محور 1 کے ساتھ تقسیم کرنا اور نتیجے میں ہونے والی صفوں C_AXIS_0 اور C_AXIS_1 پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ مخصوص محور کے ساتھ ساتھ دو صفوں کے عنصر کے مطابق اریے ہوں گی۔ نوٹ کریں کہ ہم ایک غیرمعمولی سرنی کو کسی دوسرے عنصر کے ذریعہ تقسیم کرنے کے لئے بھی / آپریٹر کا استعمال کرسکتے ہیں۔"
    },
    {
        "Question": "ایک نمی سرنی کے عنصر کے مطابق مربع جڑ کا حساب لگائیں۔",
        "Answer": "کسی نمی سرنی کے عنصر کے مطابق مربع جڑ کا حساب لگانے کے لئے ، ہم numpy.sqrt () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن ایک سرنی کے مثبت مربع جڑ کو لوٹاتا ہے ، عنصر کے لحاظ سے۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔اس کی ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([1 ، 4 ، 9 ، 16 ، 25])# numpy.sqrt () b = np کا استعمال کرتے ہوئے سرے کے عنصر وار مربع جڑ کا حساب لگائیں.SQRT (a) پرنٹ (b) یہ پروگرام ایک numpy سرنی A تشکیل دیتا ہے اور پھر سرنی کے عنصر وار مربع جڑ کا حساب لگانے کے لئے numpy.sqrt () فنکشن کا استعمال کرتا ہے اور اس کے نتیجے میں سرنی B پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ان پٹ سرنی کے عنصر وار مربع جڑ کے ساتھ صف ہوگی۔)# محور کے ساتھ ساتھ سرنی کے عنصر کے مطابق مربع جڑ کا حساب لگائیں۔ numpy.sqrt () b_axis_0 = np.sqrt (a) پرنٹ (b_axis_0)# محور 1 کے ساتھ ساتھ عنصر کے مطابق مربع جڑ کا حساب کتاب 1 کے ساتھ کریں۔SQRT () b_axis_1 = np.sqrt (a) پرنٹ (b_axis_1) یہ پروگرام ایک numpy سرنی A تشکیل دیتا ہے اور پھر محور 0 اور محور 1 کے ساتھ ساتھ صف کے عنصر وار مربع جڑ کا حساب لگانے کے لئے numpy.sqrt () فنکشن کا استعمال کرتا ہے۔نتیجے میں آنے والی صفوں B_AXIS_0 اور B_AXIS_1 پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ مخصوص محور کے ساتھ ان پٹ سرنی کے عنصر وار مربع جڑ کے ساتھ صفیں ہوں گی۔ نوٹ کریں کہ numpy.sqrt () فنکشن ایک صف کے غیر منفی مربع جڑ کو واپس کرتا ہے ، عنصر کے مطابق۔"
    },
    {
        "Question": "کسی نمی سرنی کے عنصر کے مطابق کفایت شعاری کا حساب لگائیں۔",
        "Answer": "کسی نپی سرنی کے عنصر کے مطابق اخراج کا حساب لگانے کے ل we ، ہم numpy.exp () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن عنصر کے لحاظ سے ایک صف میں تمام عناصر کی صریح لوٹاتا ہے۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔یہاں ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array ([1 ، 2 ، 3]) بنائیں ([1 ، 2 ، 3])# numpy.exp () b = np.exp (a) کا استعمال کرتے ہوئے صف کے عنصر کے مطابق صیغہ کا حساب لگائیں۔پرنٹ (بی) یہ پروگرام ایک نمی سرنی اے تشکیل دیتا ہے اور پھر سرنی کے عنصر کے مطابق اس کا حساب لگانے کے لئے numpy.exp () فنکشن کا استعمال کرتا ہے اور اس کے نتیجے میں سرنی B پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ان پٹ سرنی کے عنصر کے ساتھ سرنی ہوگی۔# numpy.exp () b_axis_0 = np.exp (a) پرنٹ (b_axis_0) کا استعمال کرتے ہوئے محور 0 کے ساتھ ساتھ سرنی کے عنصر کے مطابق عنصر کا حساب لگائیں (b_axis_0)# numpy.exp () کا استعمال کرتے ہوئے محور 1 کے ساتھ ساتھ عنصر کے ساتھ عنصر کے ساتھ عنصر کی صریح کا حساب لگائیں۔b_axis_1 = np.exp (a) پرنٹ (b_axis_1) یہ پروگرام ایک numpy سرنی a تشکیل دیتا ہے اور پھر محور 0 اور محور 1 کے ساتھ سرنی کے عنصر کے مطابق عنصر کا حساب لگانے کے لئے numpy.exp () فنکشن کا استعمال کرتا ہے اور اس کے نتیجے میں صفوں کو پرنٹ کرتا ہےB_AXIS_0 اور B_AXIS_1۔اس کے نتیجے میں آؤٹ پٹ مخصوص محور کے ساتھ ان پٹ سرنی کے عنصر کے مطابق سرزمین کے ساتھ صفیں ہوں گی۔ نوٹ کریں کہ numpy.exp () فنکشن ایک صف میں تمام عناصر کی صریح لوٹاتا ہے ، عنصر کے مطابق۔"
    },
    {
        "Question": "ایک نپی سرنی کے عنصر کے مطابق لوگرتھم (بیس 10) کا حساب لگائیں۔",
        "Answer": "ایک نپی سرنی کے عنصر کے مطابق لوگرتھم (بیس 10) کا حساب لگانے کے لئے ، ہم numpy.log10 () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن ایک سرنی کے بیس -10 لوگرتھم کو لوٹاتا ہے ، عنصر کے لحاظ سے۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔یہاں ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر این پی# ایک نیپی آریاہ = np.array بنائیں ([1 ، 10 ، 100 ، 1000])# numpy.log10 () b = کا استعمال کرتے ہوئے سرنی کے عنصر کے مطابق لوگرتھم (بیس 10) کا حساب لگائیں۔NP.log10 (a) پرنٹ (b) یہ پروگرام ایک numpy سرنی A تشکیل دیتا ہے اور پھر سرنی کے عنصر کے مطابق لوگرتھم (بیس 10) کا حساب لگانے کے لئے numpy.log10 () فنکشن کا استعمال کرتا ہے اور اس کے نتیجے میں صف B کو پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ان پٹ سرنی کے عنصر کے مطابق لوگرتھم (بیس 10) کے ساتھ صف ہوگی۔100000]])# محور کے ساتھ ساتھ عنصر کے مطابق لوگرتھم (بیس 10) کا حساب لگائیں۔ numpy.log10 () b_axis_0 = np.log10 (a) پرنٹ (b_axis_0)# عنصر کے مطابق لوگرتھم (بیس 10) کا حساب لگائیںمحور 1 کے ساتھ ساتھ سرنی کا استعمال کرتے ہوئے numpy.log10 () b_axis_1 = np.log10 (a) پرنٹ (b_axis_1) یہ پروگرام ایک numpy سرنی A تشکیل دیتا ہے اور پھر عنصر کے مطابق لوگریتھم (بیس کا حساب لگانے کے لئے numpy.log10 () فنکشن کا استعمال کرتا ہے۔10) محور 0 اور محور 1 کے ساتھ سرنی کا اور نتیجے میں ہونے والی صفوں B_AXIS_0 اور B_AXIS_1 پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ مخصوص محور کے ساتھ ان پٹ سرنی کے عنصر کے مطابق لوگرتھم (بیس 10) کے ساتھ صفیں ہوں گی۔ نوٹ کریں کہ numpy.log10 () فنکشن ایک سرنی کے بیس -10 لوگرتھم کو واپس کرتا ہے ، عنصر کے مطابق۔"
    },
    {
        "Question": "کسی نمی سرنی کے عنصر کے حساب سے حساب لگائیں۔",
        "Answer": "کسی نمی سرنی کے عنصر کے حساب سے حساب لگانے کے لئے ، ہم numpy.sin () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن عنصر کے لحاظ سے ایک صف میں تمام عناصر کا جماع لوٹاتا ہے۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔اس کی ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([0 ، np.pi/2 ، np.pi])# numpy.sin () b = کا استعمال کرتے ہوئے سرنی کے عنصر کے حساب سے حساب لگائیں۔NP.SIN (a) پرنٹ (b) یہ پروگرام ایک numpy سرنی A تشکیل دیتا ہے اور پھر سرنی کے عنصر کے مطابق سائن کا حساب لگانے کے لئے numpy.sin () فنکشن کا استعمال کرتا ہے اور اس کے نتیجے میں سرنی B پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ان پٹ سرنی کے عنصر کے ساتھ سرنی ہوگی۔np.pi/2 ، 2*np.pi ، 5*np.pi/2]]])# محور کے ساتھ ساتھ سرنی کے عنصر کے حساب سے 0 numpy.sin () b_axis_0 = np.sin (a) پرنٹ کا استعمال کریں.محور 0 اور محور 1 کے ساتھ سرنی کے عنصر کے حساب سے حساب لگانے کے لئے فنکشن اور نتیجے میں ہونے والی صفوں B_AXIS_0 اور B_AXIS_1 پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ مخصوص محور کے ساتھ ان پٹ سرنی کے عنصر وار سائن کے ساتھ صفیں ہوں گی۔ نوٹ کریں کہ numpy.sin () فنکشن ایک صف میں تمام عناصر کا سائن لوٹاتا ہے ، عنصر کے مطابق۔"
    },
    {
        "Question": "ایک نمی سرنی کے عنصر کے مطابق کوسائن کا حساب لگائیں۔",
        "Answer": "کسی نپی سرنی کے عنصر کے مطابق کوسائن کا حساب لگانے کے ل we ، ہم numpy.cos () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن عنصر کے لحاظ سے ایک صف میں تمام عناصر کا کوسائن لوٹاتا ہے۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔یہاں ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر این پی# ایک نیمپری ارایا = np.array بنائیں ([0 ، np.pi/2 ، np.pi])# numpy.cos () b = استعمال کرتے ہوئے سرنی کے عنصر کے مطابق کوسائن کا حساب لگائیں۔NP.COS (a) پرنٹ (b) یہ پروگرام ایک numpy سرنی A تشکیل دیتا ہے اور پھر سرنی کے عنصر کے مطابق کوسائن کا حساب لگانے کے لئے numpy.cos () فنکشن کا استعمال کرتا ہے اور اس کے نتیجے میں سرنی B پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ان پٹ سرنی کے عنصر وار کوسائن کے ساتھ صف ہوگی۔np.pi/2 ، 2*np.pi ، 5*np.pi/2]]])# numpy.cos () b_axis_0 = np.cos (a) پرنٹ کا استعمال کرتے ہوئے محور کے ساتھ سرنی کے عنصر وار کوسائن کا حساب لگائیں.محور 0 اور محور 1 کے ساتھ صف کے عنصر کے مطابق کوسائن کا حساب لگانے کے لئے فنکشن اور نتیجے میں ہونے والی صفوں B_AXIS_0 اور B_AXIS_1 پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ مخصوص محور کے ساتھ ان پٹ سرنی کے عنصر وار کوسائن کے ساتھ صفیں ہوں گی۔ نوٹ کریں کہ numpy.cos () فنکشن ایک صف میں تمام عناصر کی کوسائن لوٹاتا ہے ، عنصر کے مطابق۔"
    },
    {
        "Question": "کسی نمی سرنی کے عنصر کے مطابق ٹینجنٹ کا حساب لگائیں۔",
        "Answer": "کسی نمی سرنی کے عنصر کے مطابق ٹینجینٹ کا حساب لگانے کے لئے ، ہم numpy.tan () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن عنصر کے لحاظ سے ایک صف میں تمام عناصر کے ٹینجنٹ کی گنتی کرتا ہے۔یہ numpy.sin (x) / numpy.cos (x) عنصر کے مطابق ہے۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔یہاں ایک مثال ہے: پائیٹونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([0 ، np.pi/4 ، np.pi/2])# numpy.tan () کا استعمال کرتے ہوئے سرنی کے عنصر کے مطابق ٹینجینٹ کا حساب لگائیں ()b = np.tan (a) پرنٹ (b) یہ پروگرام ایک numpy سرنی A تشکیل دیتا ہے اور پھر سرنی کے عنصر کے مطابق ٹینجنٹ کا حساب لگانے کے لئے numpy.tan () فنکشن کا استعمال کرتا ہے اور اس کے نتیجے میں سرنی B پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ان پٹ سرنی کے عنصر وار ٹینجنٹ کے ساتھ صف ہوگی۔3*np.pi/4 ، np.pi ، 5*np.pi/4]]))# numpy.tan () b_axis_0 = np.tan (a) پرنٹ کا استعمال کرتے ہوئے محور کے ساتھ ساتھ سرنی کے عنصر کے مطابق ٹینجنٹ کا حساب لگائیں.محور 0 اور محور 1 کے ساتھ صف کے عنصر کے مطابق ٹینجینٹ کا حساب لگانے کے لئے فنکشن اور نتیجے میں ہونے والی صفوں B_AXIS_0 اور B_AXIS_1 پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ مخصوص محور کے ساتھ ان پٹ سرنی کے عنصر وار ٹینجنٹ کے ساتھ صفیں ہوں گی۔ نوٹ کریں کہ numpy.tan () فنکشن ایک صف میں تمام عناصر کے ٹینجنٹ کی گنتی کرتا ہے ، عنصر کے مطابق۔"
    },
    {
        "Question": "4 قطاروں اور 5 کالموں کے ساتھ 2D سرنی میں 1D numpy سرنی کو نئی شکل دیں۔",
        "Answer": "4 قطاروں اور 5 کالموں کے ساتھ 2D سرنی میں 1D numpy سرنی کو نئی شکل دینے کے ل we ، ہم numpy.reshape () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن ایک ہی اعداد و شمار کے ساتھ ایک نئی صف لوٹاتا ہے لیکن ایک نئی شکل۔ہم صف کو پہلی دلیل کے طور پر اور مطلوبہ شکل کو بطور ٹپل کے طور پر اس فنکشن کی دوسری دلیل کے طور پر پاس کرسکتے ہیں۔اس کی ایک مثال یہ ہے: این پی# کے طور پر پائیتھونیم پورٹ نیمپی ایک 1 ڈی نیپی آریا = np.array بنائیں ([1 ، 2 ، 3 ، 4 ، 5 ، 6 ، 7 ، 8 ، 9 ، 10 ، 11 ، 12 ، 13 ، 14 ، 15 ،16 ، 17 ، 18 ، 19 ، 20])# 1D سرنی کو 2D سرنی میں 4 قطار اور 5 کالموں کے ساتھ Numpy.reshape () b = np.reshape (a ، (4 ، 5)) پرنٹ (b) کا استعمال کریں۔یہ پروگرام ایک 1D numpy سرنی A تشکیل دیتا ہے اور پھر numpy.reshape () فنکشن کا استعمال کرتا ہے تاکہ صف کو 4 قطار اور 5 کالموں کے ساتھ 2D سرنی میں تبدیل کیا جاسکے اور نتیجے میں سرنی B پرنٹ کیا جائے۔نتیجے میں آؤٹ پٹ مطلوبہ شکل کے ساتھ صف ہوگی۔ نوٹ کریں کہ اصل صف میں عناصر کی تعداد نئی شکل کے طول و عرض کی پیداوار کے برابر ہونی چاہئے۔اس معاملے میں ، اصل صف میں 20 عناصر ہوتے ہیں ، اور نئی شکل میں 4 قطاریں اور 5 کالم ہوتے ہیں ، جو کل 20 عناصر دیتے ہیں۔اگر اصل صف میں عناصر کی تعداد نئی شکل کے طول و عرض کی پیداوار کے برابر نہیں ہے تو ، ویلیئرر کو اٹھایا جائے گا۔"
    },
    {
        "Question": "اخترن عناصر کو 2D numpy صف سے نکالیں۔",
        "Answer": "2D numpy سرنی سے اخترن عناصر کو نکالنے کے ل we ، ہم numpy.diag () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن کسی سرنی کے اخترن عناصر کو لوٹاتا ہے یا اخترن صف تیار کرتا ہے۔ہم فنکشن کی پہلی دلیل کے طور پر صف کو پاس کرسکتے ہیں۔یہاں ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر این پی# ایک 2 ڈی نیمپری ارایا = این پی آر آرے بنائیں۔numpy.diag () b = np.diag (a) پرنٹ (b) کا استعمال کرتے ہوئے سرنی کا یہ پروگرام 2D numpy سرنی A تشکیل دیتا ہے اور پھر سرنی کے اخترن عناصر کو نکالنے کے لئے numpy.diag () فنکشن کا استعمال کرتا ہے اور اس کو پرنٹ کرتا ہےنتیجے میں سرنی b.اس کے نتیجے میں آؤٹ پٹ ان پٹ سرنی کے اخترن عناصر کے ساتھ صف ہوگی۔ نوٹ کریں کہ numpy.diag () فنکشن ان پٹ سرنی کے اخترن عناصر پر مشتمل 1D سرنی لوٹاتا ہے۔اگر ہم 1D سرنی سے اخترن سرنی بنانا چاہتے ہیں تو ، ہم فنکشن کی پہلی دلیل اور دوسری دلیل کے طور پر مطلوبہ آفسیٹ کے طور پر 1D سرنی کو پاس کرسکتے ہیں۔اگر ان پٹ سرنی 2D نہیں ہے تو ، ہم numpy.diagonal () فنکشن کو اخترن عناصر نکالنے کے لئے استعمال کرسکتے ہیں۔"
    },
    {
        "Question": "ایک نپی سرنی کی شکل حاصل کریں۔",
        "Answer": "ایک نپی سرنی کی شکل حاصل کرنے کے ل we ، ہم صف کی شکل وصف استعمال کرسکتے ہیں۔شکل وصف انٹیجرز کا ایک ٹپل لوٹاتا ہے جو صف کے ہر جہت کے سائز کی نمائندگی کرتا ہے۔ٹپل کا پہلا عنصر قطاروں کی تعداد ہے ، دوسرا عنصر کالموں کی تعداد ہے ، اور اسی طرح۔یہاں کچھ مثالیں ہیں: پیتھونیمپورٹ نیمپی کے طور پر این پی# ایک نمی ارای = این پی آر آرے بنائیں ([[1 ، 2 ، 3] ، [4 ، 5 ، 6] ، [7 ، 8 ، 9]])# کی شکل حاصل کریںشکل کے اثبات کی شکل = A. شپ پرنٹ (شکل) کا استعمال کرتے ہوئے سرنی یہ پروگرام ایک نپی سرنی A تشکیل دیتا ہے اور پھر صف کی شکل حاصل کرنے کے لئے شکل وصف کا استعمال کرتا ہے اور اس کے نتیجے میں ٹیوپل کی شکل کو پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ان پٹ سرنی کے ہر جہت کے سائز کے ساتھ ٹپل ہوگا۔.(a ، (4 ، 5))# شکل کی شکل حاصل کریں شکل میں شکل حاصل کریںnumpy.reshape () فنکشن ، اور پھر سرنی کی شکل حاصل کرنے کے لئے شکل وصف کا استعمال کرتا ہے اور اس کے نتیجے میں ٹپل کی شکل کو پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ان پٹ سرنی کے ہر جہت کے سائز کے ساتھ ٹپل ہوگا۔ نوٹ کریں کہ شکل وصف انٹیجرز کا ایک ٹپل لوٹاتا ہے جو صف کے ہر جہت کے سائز کی نمائندگی کرتا ہے۔ٹیوپل میں عناصر کی تعداد سرنی کے طول و عرض کی تعداد کے برابر ہے۔"
    },
    {
        "Question": "ایک نمی سرنی کے طول و عرض کی تعداد حاصل کریں۔",
        "Answer": "ایک نمی سرنی کے طول و عرض کی تعداد حاصل کرنے کے ل we ، ہم سرنی کے این ڈی آئی ایم وصف کو استعمال کرسکتے ہیں۔این ڈی آئی ایم وصف ایک عدد واپس کرتا ہے جو صف کے طول و عرض کی تعداد کی نمائندگی کرتا ہے۔یہاں کچھ مثالیں ہیں: پیتھونیمپورٹ نیمپی کے طور پر این پی# ایک نیمپری ارایا = np.array بنائیں ([[1 ، 2 ، 3] ، [4 ، 5 ، 6] ، [7 ، 8 ، 9]])# کی تعداد حاصل کریںNDIM Attributendim = A.NDIMPRINT (NDIM) کا استعمال کرتے ہوئے سرے کے طول و عرض یہ پروگرام ایک نمی سرنی A تشکیل دیتا ہے اور پھر سرنی کے طول و عرض کی تعداد حاصل کرنے کے لئے NDIM وصف کا استعمال کرتا ہے اور اس کے نتیجے میں عددی NDIM پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ان پٹ سرنی کے طول و عرض کی تعداد کے ساتھ عددی ہوگا۔10 ، 11 ، 12 ، 13 ، 14 ، 15 ، 16 ، 17 ، 18 ، 19 ، 20])# 1D سرنی کو 2D سرنی میں 4 قطاروں اور 5 کالموں کے ساتھ Numpy.reshape () b = np.reshape (استعمال کریں۔A ، (4 ، 5))# NDIM Attributendim = B.NDIMPRINT (NDIM) کا استعمال کرتے ہوئے سرے کے طول و عرض کی تعداد حاصل کریں یہ پروگرام 1D Numpy سرنی A تشکیل دیتا ہے ، اسے 2D سرنی B میں 4 قطار اور 5 کالموں میں تبدیل کرتا ہے۔numpy.reshape () فنکشن کا استعمال کرتے ہوئے ، اور پھر سرنی کے طول و عرض کی تعداد حاصل کرنے کے لئے NDIM وصف کا استعمال کرتا ہے اور اس کے نتیجے میں عددی ndim پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ان پٹ سرنی کے طول و عرض کی تعداد کے ساتھ عددی ہوگا۔ نوٹ کریں کہ این ڈی آئی ایم وصف ایک عدد واپس کرتا ہے جو سرنی کے طول و عرض کی تعداد کی نمائندگی کرتا ہے۔"
    },
    {
        "Question": "ایک نپی سرنی میں عناصر کی ڈیٹا کی قسم حاصل کریں۔",
        "Answer": "اعداد و شمار کی قسم کے عناصر کو ایک نمی سرنی میں حاصل کرنے کے ل we ، ہم سرنی کے ڈی ٹائپ وصف کو استعمال کرسکتے ہیں۔ڈی ٹائپ وصف ایک ایسی شے لوٹاتا ہے جو صف میں عناصر کے ڈیٹا کی قسم کو بیان کرتا ہے۔ڈیٹا کی قسم صف میں ہر عنصر کے سائز اور تشریح کا تعین کرتی ہے۔یہاں کچھ مثالیں ہیں: پیتھونیمپورٹ نیمپی کے طور پر این پی# ایک نیمپی ارایا = np.array ([1 ، 2 ، 3 ، 4 ، 5]] بنائیں ([1 ، 2 ، 3 ، 4 ، 5])# dtype attributedType = a.dtypeprint (dtype) کا استعمال کرتے ہوئے سرے کی ڈیٹا کی قسم حاصل کریں۔یہ پروگرام ایک نپی سرنی A تشکیل دیتا ہے اور پھر سرنی میں عناصر کی ڈیٹا کی قسم حاصل کرنے کے لئے DTYPE وصف کا استعمال کرتا ہے اور اس کے نتیجے میں آبجیکٹ DTYPE پرنٹ کرتا ہے۔نتیجے میں آؤٹ پٹ وہ چیز ہوگی جو ان پٹ سرنی کے ڈیٹا کی قسم کی وضاحت کرتی ہے۔ڈیٹیپ کی حیثیت سے حاصل کرنے والے ڈیٹا ٹائپ کو حاصل کریںنتیجے میں آؤٹ پٹ وہ چیز ہوگی جو ان پٹ سرنی کے ڈیٹا کی قسم کی وضاحت کرتی ہے۔ نوٹ کریں کہ ڈی ٹائپ وصف کسی ایسی شے کو لوٹاتا ہے جو صف میں عناصر کے ڈیٹا کی قسم کو بیان کرتا ہے۔ڈیٹا کی قسم صف میں ہر عنصر کی جسامت اور تشریح کا تعین کرتی ہے۔"
    },
    {
        "Question": "عمودی طور پر دو numpy صفوں کو جوڑیں۔",
        "Answer": "عمودی طور پر دو numpy صفوں کو جوڑنے کے ل we ، ہم numpy.concatenate () فنکشن یا numpy.vstack () فنکشن استعمال کرسکتے ہیں۔دونوں افعال ایک نئی صف لوٹاتے ہیں جس میں عمودی طور پر سجا دیئے گئے ان پٹ اریوں پر مشتمل ہوتا ہے۔ہم فنکشن کی پہلی دلیل کے طور پر ٹپل یا فہرست کے طور پر صفوں کو پاس کرسکتے ہیں۔یہاں کچھ مثالیں ہیں: پیتھونیمپورٹ نیمپی کے طور پر این پی# دو نیمپی اریزا = این پی آر آرے بنائیں ([[1 ، 2 ، 3] ، [4 ، 5 ، 6]]) بی = این پی آر آرے ([[7 ، 8 ، 9)] ، [10 ، 11 ، 12]]]# numpy.concatenate () c = np.concatenate ((a ، b) ، (a ، b) ، محور = 0) پرنٹ (c) پرنٹ (c)# کو عمودی طور پر عمودی طور پر نمی کا استعمال کرتے ہوئے عمودی طور پر اسٹیک کریں۔vstack () d = np.vstack ((a ، b)) پرنٹ (d) یہ پروگرام دو numpy سرے A اور B تیار کرتا ہے اور پھر numpy.concatenate () فنکشن اور numpy.vstack () فنکشن استعمال کرتا ہے تاکہ صفوں کو ہم آہنگ کیا جاسکے۔عمودی طور پر اور نتیجے میں ہونے والی صفوں C اور D پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ عمودی طور پر سجا دیئے گئے ان پٹ اریوں کے ساتھ صفیں ہوں گی۔ نوٹ کریں کہ numpy.concatenate () فنکشن اور numpy.vstack () فنکشن ایک نئی صف لوٹاتا ہے جس میں عمودی طور پر ان پٹ سرنیوں پر مشتمل ہوتا ہے۔numpy.concatenate () فنکشن کسی بھی محور کے ساتھ ساتھ صفوں کو جوڑ سکتا ہے ، جبکہ numpy.vstack () فنکشن صرف عمودی طور پر اریوں کو اسٹیک کرسکتا ہے۔"
    },
    {
        "Question": "افقی طور پر دو numpy صفوں کو جوڑیں۔",
        "Answer": "افقی طور پر دو numpy صفوں کو جوڑنے کے ل we ، ہم numpy.concatenate () فنکشن یا numpy.hstack () فنکشن استعمال کرسکتے ہیں۔دونوں افعال ایک نئی صف لوٹاتے ہیں جس میں افقی طور پر سجا دیئے گئے ان پٹ اریوں پر مشتمل ہوتا ہے۔ہم فنکشن کی پہلی دلیل کے طور پر ٹپل یا فہرست کے طور پر صفوں کو پاس کرسکتے ہیں۔یہاں کچھ مثالیں ہیں: پیتھونیمپورٹ نیمپی کے طور پر این پی# دو نیمپی اریزا = این پی آر آرے بنائیں ([[1 ، 2 ، 3] ، [4 ، 5 ، 6]]) بی = این پی آر آرے ([[7 ، 8 ، 9)] ، [10 ، 11 ، 12]]]# numpy.concatenate () c = np.concatenate ((a ، b) ، (a ، b) ، محور = 1) پرنٹ (c)# کو نمی کا استعمال کرتے ہوئے افقی طور پر صفوں کو اسٹیک کریں۔Hstack () d = np.hstack ((a ، b)) پرنٹ (d) یہ پروگرام دو نپی سرنی A اور B تیار کرتا ہے اور پھر numpy.concatenate () فنکشن اور numpy.hstack () فن کو استعمال کرتا ہے تاکہ صفوں کو ہم آہنگ کیا جاسکے۔افقی طور پر اور نتیجے میں ہونے والی صفوں C اور D پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ افقی طور پر سجا دیئے گئے ان پٹ اریوں کے ساتھ صفیں ہوں گی۔ نوٹ کریں کہ numpy.concatenate () فنکشن اور numpy.hstack () فنکشن ایک نئی صف لوٹاتا ہے جس میں افقی طور پر سجا دیئے گئے ان پٹ سرنیوں پر مشتمل ہوتا ہے۔numpy.concatenate () فنکشن کسی بھی محور کے ساتھ ساتھ صفوں کو جوڑ سکتا ہے ، جبکہ numpy.hstack () فنکشن صرف افقی طور پر صفوں کو اسٹیک کرسکتا ہے۔"
    },
    {
        "Question": "عمودی طور پر ایک سے زیادہ ذیلی اریوں میں ایک نمی سرنی کو تقسیم کریں۔",
        "Answer": "عمودی طور پر ایک سے زیادہ ذیلی اریوں میں ایک نمی سرنی کو تقسیم کرنے کے ل we ، ہم numpy.vsplit () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن عمودی طور پر (قطار کے لحاظ سے) ایک سے زیادہ ذیلی اریوں میں ایک صف کو تقسیم کرتا ہے۔ہم پہلی دلیل اور حصوں کی تعداد کو اس فنکشن کی دوسری دلیل کے طور پر تقسیم کرنے کے لئے سرنی کو پاس کرسکتے ہیں۔یہاں ایک مثال ہے: پائیٹونیمپورٹ نیمپی بطور NP# ایک numpy arraya = np.array بنائیں ([[1 ، 2 ، 3] ، [4 ، 5 ، 6] ، [7 ، 8 ، 9] ، [10 ، 11 ، 12]])# numpy.vsplit () b = np.vsplit (a ، 2) پرنٹ (b) پرنٹ (b) پرنٹ () پرنٹ () پرنٹ () پرنٹ () پرنٹ () پرنٹ () پرنٹ () پرنٹ () پرنٹ () پرنٹ () پرنٹ () کو عمودی طور پر دو ذیلی اریوں میں سرے کو تقسیم کریں۔سرنی کو عمودی طور پر دو ذیلی اراضی میں تقسیم کریں اور ذیلی ایریز بی کی نتیجے میں فہرست پرنٹ کریں۔اس کے نتیجے میں آؤٹ پٹ اسپلٹ ڈاٹ نوٹ سے تیار کردہ ذیلی اریوں کی فہرست ہوگی جس میں numpy.vsplit () فنکشن ایک سرنی کو عمودی طور پر (قطار کے لحاظ سے) ایک سے زیادہ ذیلی اریوں میں تقسیم کرتا ہے۔یہ اسپلٹ (سب ایریز) سے پیدا ہونے والی نپی صفوں کی ایک فہرست لوٹاتا ہے۔numpy.vsplit () فنکشن numpy.split () کے ساتھ محور = 0 (پہلے سے طے شدہ) کے برابر ہے ، سرنی ہمیشہ صف کے طول و عرض سے قطع نظر پہلے محور کے ساتھ الگ ہوجاتی ہے۔"
    },
    {
        "Question": "افقی طور پر ایک سے زیادہ ذیلی اریوں میں ایک نمی سرنی کو تقسیم کریں۔",
        "Answer": "افقی طور پر (کالم وار) ایک سے زیادہ ذیلی اریوں میں ایک نمی سرنی کو تقسیم کرنے کے ل we ، ہم numpy.hsplit () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن افقی طور پر ایک سے زیادہ ذیلی اریوں میں ایک صف کو تقسیم کرتا ہے۔ہم پہلی دلیل اور حصوں کی تعداد کو اس فنکشن کی دوسری دلیل کے طور پر تقسیم کرنے کے لئے سرنی کو پاس کرسکتے ہیں۔یہاں ایک مثال ہے: پائیٹونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([[1 ، 2 ، 3 ، 4] ، [5 ، 6 ، 7 ، 8] ، [9 ، 10 ، 11 ، 12]])# numpy.hsplit () b = np.hsplit (a ، 2) پرنٹ (b) کا استعمال کرتے ہوئے دو ذیلی اریوں میں صف کو افقی طور پر تقسیم کریں۔افقی طور پر دو ذیلی اریوں میں سرے اور ذیلی اریوں کے نتیجے میں فہرست پرنٹ کرتا ہے b.اس کے نتیجے میں آؤٹ پٹ اسپلٹ ڈاٹ نوٹ سے تیار کردہ ذیلی خطوط کی فہرست ہوگی جس میں numpy.hsplit () فنکشن ایک سرنی کو متعدد ذیلی اریوں میں افقی طور پر (کالم وار) میں تقسیم کرتا ہے۔یہ اسپلٹ (سب ایریز) سے پیدا ہونے والی نپی صفوں کی ایک فہرست لوٹاتا ہے۔numpy.hsplit () فنکشن numpy.split () کے برابر ہے۔"
    },
    {
        "Question": "دو numpy صفوں کے مابین عنصر کے حساب سے موازنہ کریں۔",
        "Answer": "دو numpy صفوں کے مابین عنصر کے حساب سے موازنہ کرنے کے ل we ، ہم موازنہ آپریٹرز جیسے == ،> ، <،> = ، اور <= استعمال کرسکتے ہیں۔یہ آپریٹرز بولین نمی سرنی کو واپس کرتے ہیں جس میں دونوں ان پٹ صفوں کے مابین عنصر کے حساب سے موازنہ کا نتیجہ ہوتا ہے۔ہم numpy.equal () ، numpy.greater () ، numpy.less () ، numpy.gryater_equal () ، اور numpy.less_equal () افعال کو دو numpy صفوں کے مابین عنصر کے حساب سے موازنہ کرنے کے لئے بھی استعمال کرسکتے ہیں۔یہاں کچھ مثالیں ہیں: پیتھونیمپورٹ نیمپی کے طور پر این پی# دو نیمپی اریاسا = این پی.ارے بنائیں ([1 ، 2 ، 3 ، 4 ، 5]) بی = این پی.ارے ([3 ، 2 ، 1 ، 4 ، 5])#== آپریٹرک = a == bprint (c) کا استعمال کرتے ہوئے صفوں کا موازنہ کریں# numpy.equal () فنکشنڈ = np.equal (a ، b) پرنٹ (d)# کا موازنہ کریںnumpy.greater () فنکشن = np.greater (a ، b) پرنٹ (e)# numpy.less () فنکشنف = np.less (a ، b) پرنٹ کا استعمال کرتے ہوئے صفوں کا موازنہ کریں(f)# numpy.greater_equal () فنکشنگ = np.greater_equal (a ، b) پرنٹ (g) پرنٹ (g) پرنٹ (g) پرنٹ (g) پرنٹ () numpy.less_equal () function = np.less_equal کا استعمال کرتے ہوئے پرنٹ (g) پرنٹ (g) پرنٹ (g) پرنٹ (g) پرنٹ (g) پرنٹ کریں.ایف ، جی ، اور ایچ۔اس کے نتیجے میں آؤٹ پٹ بولین نیپمی صفیں ہوں گی جس میں دو ان پٹ اریوں کے مابین عنصر کے حساب سے موازنہ کا نتیجہ ہوتا ہے۔ نوٹ کریں کہ موازنہ آپریٹرز اور نمی افعال ایک بولین نمی سرنی کو واپس کرتے ہیں جس میں عنصر کے مطابق موازنہ کا نتیجہ ہوتا ہے۔دو ان پٹ صفیں۔نتیجے میں سرنی کی شکل ان پٹ کی طرح ہے۔"
    },
    {
        "Question": "ان اشارے تلاش کریں جہاں دو نمی صفوں کے عناصر برابر ہیں۔",
        "Answer": "ان اشاریہ کو تلاش کرنے کے لئے جہاں دو نیمی صفوں کے عناصر برابر ہیں ، ہم numpy.where.where () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن صفوں کا ایک ٹپل لوٹاتا ہے جس میں ان اشارے ہوتے ہیں جہاں ان پٹ کی حالت درست ہے۔ہم اس حالت کو فنکشن کی پہلی دلیل کے طور پر پاس کرسکتے ہیں۔یہاں ایک مثال ہے: پائیٹونیمپورٹ نیمپی کے طور پر این پی# دو نیمپی اریاسا = این پی آر آرے بنائیں ([1 ، 2 ، 3 ، 4 ، 5]) بی = این پی.ارے ([3 ، 2 ، 1 ، 4 ، 5])# تلاش کریںاشارے جہاں صفوں کے عناصر numpy.where () اشاریہ = NP.Where (A == B) پرنٹ (A == B) پرنٹ (اشارے) کے برابر ہیں۔اشارے تلاش کرنے کے لئے جہاں صفوں کے عناصر برابر ہیں اور اریوں کے اشاریوں کے نتیجے میں ٹپل پرنٹ کرتے ہیں۔اس کے نتیجے میں آؤٹ پٹ ان اشاروں کا ٹپل ہوگا جس میں ان پٹ پر مشتمل اشارے موجود ہیں جہاں ان پٹ صفوں کے عناصر برابر ہیں۔ نوٹ کریں کہ numpy.where () فنکشن ان اشاروں پر مشتمل ہے جہاں ان پٹ کی حالت درست ہے۔نتیجے میں آنے والی صفوں کی شکل ان پٹ اریوں کی طرح ہے۔اگر ہم ان عناصر کو تلاش کرنا چاہتے ہیں جو دونوں صفوں میں برابر ہیں ، تو ہم دونوں صفوں کا چوراہا تلاش کرنے کے لئے numpy.intersect1d () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن ایک ترتیب شدہ ، انوکھی صف لوٹاتا ہے جس میں ان پٹ صفوں کے مشترکہ عناصر ہوتے ہیں۔ہم فنکشن کے دلائل کے طور پر صفوں کو پاس کرسکتے ہیں۔"
    },
    {
        "Question": "ان اشارے تلاش کریں جہاں ایک نمی سرنی کے عناصر ایک مخصوص قیمت سے زیادہ ہوتے ہیں۔",
        "Answer": "ان اشاریہ کو تلاش کرنے کے لئے جہاں ایک نمی سرنی کے عناصر ایک مخصوص قیمت سے زیادہ ہوتے ہیں ، ہم numpy.where.where () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن صفوں کا ایک ٹپل لوٹاتا ہے جس میں ان اشارے ہوتے ہیں جہاں ان پٹ کی حالت درست ہے۔ہم اس حالت کو فنکشن کی پہلی دلیل کے طور پر پاس کرسکتے ہیں۔یہاں ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر این پی# ایک نیمپری ارایا = np.array بنائیں ([1 ، 2 ، 3 ، 4 ، 5])# وہ اشارے تلاش کریں جہاں سرنی کے عناصر 3 سے زیادہ ہیں۔اشاریہ = np.where (a> 3) پرنٹ (انڈیکس) یہ پروگرام ایک numpy سرنی A تشکیل دیتا ہے اور پھر Numpy.where () فنکشن کو انڈیکس تلاش کرنے کے لئے استعمال کرتا ہے جہاں سرنی کے عناصر 3 سے زیادہ ہوتے ہیں اور اس کے نتیجے میں ٹوپل پرنٹ کرتے ہیں۔صفوں کے اشاریہ.اس کے نتیجے میں آؤٹ پٹ سرنیوں کا ٹوپل ہوگا جس میں ان اشارے پر مشتمل ہے جہاں ان پٹ سرنی کے عناصر 3. سے زیادہ ہیں۔ نوٹ کریں کہ numpy.where () فنکشن ان اشارے پر مشتمل ہے جہاں ان پٹ کی حالت درست ہے۔نتیجے میں آنے والی صفوں کی شکل ان پٹ سرنی کی طرح ہے۔اگر ہم ان عناصر کو تلاش کرنا چاہتے ہیں جو صف میں ایک مخصوص قیمت سے زیادہ ہیں تو ، ہم تقابلی آپریٹرز یا numpy.gryater () فنکشن کو بولین نیپی سرنی بنانے کے لئے استعمال کرسکتے ہیں جس میں عنصر کے حساب سے موازنہ کا نتیجہ ہوتا ہے۔سرنی اور مخصوص قدر"
    },
    {
        "Question": "ان اشارے تلاش کریں جہاں ایک نمی سرنی کے عناصر کسی دی گئی حالت کو پورا کرتے ہیں۔",
        "Answer": "ایسے اشارے تلاش کرنے کے لئے جہاں کسی نمی سرنی کے عناصر کسی دی گئی حالت کو پورا کرتے ہیں ، ہم numpy.where.where () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن صفوں کا ایک ٹپل لوٹاتا ہے جس میں ان اشارے ہوتے ہیں جہاں ان پٹ کی حالت درست ہے۔ہم اس حالت کو فنکشن کی پہلی دلیل کے طور پر پاس کرسکتے ہیں۔یہاں ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر این پی# ایک نیمپری ارایا = np.array بنائیں ([1 ، 2 ، 3 ، 4 ، 5])# وہ اشارے تلاش کریں جہاں سرنی کے عناصر 3 سے زیادہ ہیں۔اشاریہ = np.where (a> 3) پرنٹ (انڈیکس) یہ پروگرام ایک numpy سرنی A تشکیل دیتا ہے اور پھر Numpy.where () فنکشن کو انڈیکس تلاش کرنے کے لئے استعمال کرتا ہے جہاں سرنی کے عناصر 3 سے زیادہ ہوتے ہیں اور اس کے نتیجے میں ٹوپل پرنٹ کرتے ہیں۔صفوں کے اشاریہ.اس کے نتیجے میں آؤٹ پٹ ان سروں کا ٹپل ہوگا جس میں ان پٹ پر مشتمل اشارے موجود ہیں جہاں ان پٹ سرنی کے عناصر دیئے گئے حالت کو پورا کرتے ہیں۔ نوٹ کریں کہ Numpy.Where () فنکشن اشارے پر مشتمل ہے جہاں ان پٹ کی حالت درست ہے۔نتیجے میں آنے والی صفوں کی شکل ان پٹ سرنی کی طرح ہے۔اگر ہم صف میں کسی خاص قدر کا اشاریہ تلاش کرنا چاہتے ہیں تو ، ہم numpy.where () کی حالت A == قیمت کے ساتھ کام کرسکتے ہیں ، جہاں قدر کی قدر ہے جس کی قیمت ہم 1NUMPY2STATOLOGY3GEEKSFORGEEKS4STACKOVERFLOW5THISPointer کا انڈیکس تلاش کرنا چاہتے ہیں۔"
    },
    {
        "Question": "ایک مخصوص ڈیٹا کی قسم کے ساتھ ایک numpy سرے بنائیں۔",
        "Answer": "ایک مخصوص ڈیٹا کی قسم کے ساتھ ایک numpy سرے بنانے کے ل we ، ہم numpy.array () فنکشن استعمال کرسکتے ہیں اور ڈی ٹائپ دلیل کو اس تک منتقل کرسکتے ہیں۔ڈی ٹائپ دلیل ہمیں صف کے عناصر کی متوقع ڈیٹا کی قسم کی وضاحت کرنے کی اجازت دیتی ہے۔ہم سٹرنگ یا نیپی ڈیٹا ٹائپ آبجیکٹ کا استعمال کرتے ہوئے ڈیٹا کی قسم کی وضاحت کرسکتے ہیں۔یہاں کچھ مثالیں ہیں: پیتھونیمپورٹ نیمپی کے طور پر NP# ڈیٹا ٹائپ کے ساتھ ایک سرنی بنائیں INTA = NP.Array ([1 ، 2 ، 3 ، 4] ، dtype = 'INT') پرنٹ (a) پرنٹ (a.dtype)# تخلیق کریںڈیٹا کی قسم کے ساتھ ایک صف فلوٹ بی = np.array ([1 ، 2 ، 3 ، 4] ، dtype = 'فلوٹ') پرنٹ (b) پرنٹ (b.dtype)# ڈیٹا ٹائپ کمپلیکسک = np.array (ایک سرے بنائیں۔[1 ، 2 ، 3 ، 4] ، dtype = 'کمپلیکس') پرنٹ (c) پرنٹ (C.DType)# ڈیٹا ٹائپ کے ساتھ ایک صف بنائیں = np.array ([سچ ، غلط ، سچ ، غلط] ، ڈیٹیپ= 'بول') پرنٹ (d) پرنٹ (d.dtype) اس پروگرام سے numpy.array () فنکشن اور ڈیٹیپ دلیل کا استعمال کرتے ہوئے مختلف اعداد و شمار کی اقسام کے ساتھ numpy arrays A ، B ، C اور D تیار ہوتا ہے۔نتیجے میں آؤٹ پٹ مخصوص ڈیٹا کی اقسام اور ڈیٹا ٹائپ آبجیکٹ کے ساتھ ڈٹائپ وصف کے ذریعہ واپس آنے والی صفیں ہوں گی۔ نوٹ کریں کہ ہم numpy.dtype () فنکشن کو ایک numpy ڈیٹا ٹائپ آبجیکٹ بنانے کے لئے بھی استعمال کرسکتے ہیں اور اسے Dtype دلیل پر منتقل کرتے ہیں۔numpy.dtype () فنکشن ایک دلیل کے طور پر تار یا ٹپل لیتا ہے جو ڈیٹا کی قسم کی وضاحت کرتا ہے۔مثال کے طور پر ، NP.DTYPE ('INT') ایک numpy ڈیٹا ٹائپ آبجیکٹ تیار کرتا ہے جو انٹیجرز کی نمائندگی کرتا ہے۔"
    },
    {
        "Question": "ایک نمی سرنی کو ازگر کی فہرست میں تبدیل کریں۔",
        "Answer": "ایک نمی سرنی کو ازگر کی فہرست میں تبدیل کرنے کے ل we ، ہم numpy صف کے ٹولسٹ () طریقہ استعمال کرسکتے ہیں۔یہ طریقہ سرنی ڈیٹا کی ایک کاپی بطور (گھوںسلا) ازگر کی فہرست کو لوٹاتا ہے۔ڈیٹا آئٹمز آئٹم () فنکشن کے ذریعہ ، قریب ترین مطابقت پذیر بلٹ میں ازگر قسم میں تبدیل ہوجاتے ہیں۔یہاں کچھ مثالیں ہیں: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([1 ، 2 ، 3 ، 4 ، 5])# ٹولسٹ () طریقہ کار () طریقہ کار کا استعمال کرتے ہوئے نمی سرنی کو ازگر کی فہرست میں تبدیل کریں۔() پرنٹ (ب) یہ پروگرام ایک نمی سرنی A تشکیل دیتا ہے اور پھر سرنی کو ازگر کی فہرست میں تبدیل کرنے کے لئے ٹولسٹ () کا طریقہ استعمال کرتا ہے اور اس کے نتیجے میں فہرست B پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ نیپی سرنی سے تیار کی گئی ازگر کی فہرست ہوگی۔ نوٹ کریں کہ ٹولسٹ () طریقہ کار (نیسٹڈ) ازگر کی فہرست کے طور پر سرنی ڈیٹا کی ایک کاپی واپس کرتا ہے۔ڈیٹا آئٹمز آئٹم () فنکشن کے ذریعہ ، قریب ترین مطابقت پذیر بلٹ میں ازگر قسم میں تبدیل ہوجاتے ہیں۔اگر ہمارے پاس کثیر جہتی نپی سرنی ہے تو ، نتیجے میں ازگر کی فہرست ایک گھونسلے کی فہرست ہوگی۔ہم بلٹ ان لسٹ () فنکشن کو بھی ایک نمی سرنی کو ازگر کی فہرست میں تبدیل کرنے کے لئے استعمال کرسکتے ہیں۔تاہم ، یہ طریقہ تمام عناصر کو بار بار تبدیل نہیں کرتا ہے ، لہذا یہ صرف ایک جہتی نپی سرنیوں پر استعمال کیا جاسکتا ہے۔"
    },
    {
        "Question": "ازگر کی فہرست کو ایک نمی سرنی میں تبدیل کریں۔",
        "Answer": "ازگر کی فہرست کو ایک نپی سرنی میں تبدیل کرنے کے ل we ، ہم numpy.array () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن ایک دلیل کے طور پر قابل تقلید لیتا ہے اور ایک نمی سرنی لوٹاتا ہے۔ہم فنکشن کی دلیل کے طور پر ازگر کی فہرست پاس کرسکتے ہیں۔اس کی ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی بطور این پی# ایک ازگر کی فہرست بنائیں = [1 ، 2 ، 3 ، 4 ، 5]# ازگر کی فہرست کو numpy.array () فنکشنب = NP.Array (a) پرنٹ کا استعمال کرتے ہوئے ایک نپی سرنی میں تبدیل کریں(b) یہ پروگرام ایک ازگر کی فہرست A تشکیل دیتا ہے اور پھر اس فہرست کو ایک numpy سرنی میں تبدیل کرنے کے لئے numpy.array () فنکشن کا استعمال کرتا ہے اور اس کے نتیجے میں سرنی B پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ازگر کی فہرست سے تیار کی گئی ایک نمی سرنی ہوگی۔ نوٹ کریں کہ numpy.array () فنکشن ایک دلیل کے طور پر قابل تقلید لیتا ہے اور ایک نمی سرنی لوٹاتا ہے۔اگر ہمارے پاس کثیر جہتی ازگر کی فہرست ہے تو ، اس کے نتیجے میں نیپی سرنی ایک کثیر جہتی صف ہوگی۔ہم ازگر کی فہرست کو نپی سرنی میں تبدیل کرنے کے لئے numpy.asarray () فنکشن کا استعمال بھی کرسکتے ہیں۔یہ فنکشن ایک دلیل کے طور پر قابل تقلید لیتا ہے اور ایک نمی سرنی لوٹاتا ہے۔تاہم ، اگر ہم کوئی نمی سرنی پاس کرتے ہیں تو یہ فنکشن میموری میں ایک نئی کاپی نہیں بناتا ہے۔اصل صف پر کی جانے والی تمام تبدیلیاں numpy سرنی پر جھلکتی ہیں۔"
    },
    {
        "Question": "کسی ٹیکسٹ فائل میں ایک نمی سرنی کو محفوظ کریں۔",
        "Answer": "کسی ٹیکسٹ فائل میں ایک نمی سرنی کو بچانے کے ل we ، ہم numpy.savetxt () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن کسی ٹیکسٹ فائل میں ایک صف کی بچت کرتا ہے۔ہم فائل کا نام پہلی دلیل اور سرنی کے طور پر فنکشن کی دوسری دلیل کے طور پر پاس کرسکتے ہیں۔یہاں ایک مثال ہے: پائیٹونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([1 ، 2 ، 3 ، 4 ، 5])# numpy.savetxt () فنکشننپ.ساویٹکسٹ () استعمال کرتے ہوئے Numpy سرنی کو ٹیکسٹ فائل میں محفوظ کریں۔'my_array.txt' ، a) یہ پروگرام ایک numpy سرنی A تشکیل دیتا ہے اور پھر my_array.txt نامی ٹیکسٹ فائل میں صف کو بچانے کے لئے numpy.savetxt () فنکشن استعمال کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ایک ٹیکسٹ فائل ہوگی جس میں numpy سرنی شامل ہے۔ نوٹ کریں کہ numpy.savetxt () فنکشن ٹیکسٹ فائل میں ایک صف کو بچاتا ہے۔ہم فائل کا نام پہلی دلیل اور سرنی کے طور پر فنکشن کی دوسری دلیل کے طور پر پاس کرسکتے ہیں۔ایف ایم ٹی پیرامیٹر کو ٹیکسٹ فائل میں موجود ڈیٹا کی شکل کی وضاحت کے لئے استعمال کیا جاسکتا ہے۔پہلے سے طے شدہ طور پر ، فارمیٹ '٪ .18E' ہے ، جو 18 اعشاریہ مقامات کے ساتھ ایک سائنسی اشارہ ہے۔ہم ٹیکسٹ فائل میں موجود ڈیٹا کے مابین حد بندی کرنے والے کردار کی وضاحت کے لئے ڈیمیٹر پیرامیٹر کا استعمال بھی کرسکتے ہیں۔پہلے سے طے شدہ حد بندی ایک خلائی کردار ہے"
    },
    {
        "Question": "کسی ٹیکسٹ فائل سے ڈیٹا کو ایک نپی سرنی میں لوڈ کریں۔",
        "Answer": "کسی ٹیکسٹ فائل سے ڈیٹا کو کسی نپی سرنی میں لوڈ کرنے کے ل we ، ہم numpy.loadtxt () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن ٹیکسٹ فائل سے ڈیٹا کو لوڈ کرتا ہے اور ایک نمی سرنی لوٹاتا ہے۔ہم فنکشن کی پہلی دلیل کے طور پر فائل کا نام پاس کرسکتے ہیں۔یہاں ایک مثال یہ ہے: پائیٹونیمپورٹ نیمپی کے طور پر NP# کسی ٹیکسٹ فائل سے ڈیٹا لوڈ کریں numpy.loadtxt () فنکشن ڈیٹا = np.loadtxt ('my_data.txt') پرنٹ (ڈیٹا) پرنٹ (ڈیٹا) اس پروگرام میں numpy.loadtxt (استعمال کیا جاتا ہے۔) My_data.txt نامی ٹیکسٹ فائل سے ڈیٹا لوڈ کرنے کے لئے فنکشن کو ایک نپی سرنی میں اور اس کے نتیجے میں سرنی کے اعداد و شمار کو پرنٹ کیا جاتا ہے۔اس کے نتیجے میں آؤٹ پٹ ٹیکسٹ فائل میں موجود ڈیٹا سے تیار کردہ نمی سرنی ہوگی۔ نوٹ کریں کہ numpy.loadtxt () فنکشن ایک ٹیکسٹ فائل سے ڈیٹا لوڈ کرتا ہے اور ایک numpy سرنی واپس کرتا ہے۔ہم فنکشن کی پہلی دلیل کے طور پر فائل کا نام پاس کرسکتے ہیں۔ڈیمیٹر پیرامیٹر کو ٹیکسٹ فائل میں موجود ڈیٹا کے مابین حد بندی کرنے والے کردار کی وضاحت کے لئے استعمال کیا جاسکتا ہے۔پہلے سے طے شدہ حد بندی ایک خلائی کردار ہے۔ہم فائل کے آغاز میں قطاروں کی ایک مخصوص تعداد کو چھوڑنے کے لئے اسکیپروز پیرامیٹر کا استعمال بھی کرسکتے ہیں۔اگر فائل میں گمشدہ ڈیٹا موجود ہے تو ، ہم Numpy.genfromtxt () فنکشن کا استعمال ڈیٹا کو ایک numpy صف میں لوڈ کرنے کے لئے استعمال کرسکتے ہیں جس کی وضاحت کی گئی ہے۔"
    },
    {
        "Question": "ایک نمی سرنی سے اخترن میٹرکس بنائیں۔",
        "Answer": "ایک نپی سرنی سے اخترن میٹرکس بنانے کے ل we ، ہم numpy.diag () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن ایک اخترن میٹرکس بناتا ہے یا میٹرکس کے اخترن عناصر کو نکالتا ہے۔یہ ایک جہتی صف سے اخترن صف بھی بنا سکتا ہے۔ہم فنکشن کی دلیل کے طور پر نپی سرنی کو پاس کرسکتے ہیں۔اس کی ایک مثال یہ ہے کہ: Pythonimport numpy as np# ایک numpy arraya = np.array بنائیں ([1 ، 2 ، 3 ، 4 ، 5])# numpy.diag () فنکشن بی = این پی کا استعمال کرتے ہوئے numpy سرے سے ایک اخترن میٹرکس بنائیں۔ڈیاگ (اے) پرنٹ (بی) یہ پروگرام ایک نمی سرنی اے تشکیل دیتا ہے اور پھر سرنی سے اخترن میٹرکس بنانے کے لئے numpy.diag () فنکشن کا استعمال کرتا ہے اور اس کے نتیجے میں میٹرکس B پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ناپپی سرنی سے تیار کردہ اخترن میٹرکس ہوگی۔ نوٹ کریں کہ numpy.diag () فنکشن ایک اخترن میٹرکس تشکیل دیتا ہے یا میٹرکس کے اخترن عناصر کو نکالتا ہے۔یہ ایک جہتی صف سے اخترن صف بھی بنا سکتا ہے۔ہم فنکشن کی دلیل کے طور پر نپی سرنی کو پاس کرسکتے ہیں۔اگر ہم کسی مخصوص آفسیٹ کے ساتھ اخترن میٹرکس بنانا چاہتے ہیں تو ، ہم فنکشن کی دوسری دلیل کے طور پر آفسیٹ کو پاس کرسکتے ہیں۔اگر ہم میٹرکس کے اخترن عناصر کو نکالنا چاہتے ہیں تو ، ہم میٹرکس کو فنکشن کی دلیل کے طور پر پاس کرسکتے ہیں۔"
    },
    {
        "Question": "ایک numpy صف کے سراغ کا حساب لگائیں۔",
        "Answer": "ایک numpy صف کے سراغ کا حساب لگانے کے لئے ، ہم numpy.trace () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن صف کے اخترن کے ساتھ ساتھ رقم واپس کرتا ہے۔اگر سرنی 2-D ہے تو ، دیئے گئے آفسیٹ کے ساتھ اس کے اخترن کے ساتھ مل کر رقم واپس کردی جاتی ہے ، یعنی عناصر کا مجموعہ A [I ، I+آفسیٹ] سب کے لئے۔اگر سرنی میں دو سے زیادہ جہتیں ہیں ، تو پھر ایکسس 1 اور ایکسس 2 کے ذریعہ بیان کردہ محور 2-D ذیلی اریوں کا تعین کرنے کے لئے استعمال کیے جاتے ہیں جن کے نشانات واپس کردیئے جاتے ہیں۔نتیجے میں ہونے والی صف کی شکل وہی ہے جو ایکسس 1 اور ایکسس 2 کے ساتھ ان پٹ سرنی کی طرح ہے۔یہاں ایک مثال یہ ہے: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([[1 ، 2 ، 3] ، [4 ، 5 ، 6] ، [7 ، 8 ، 9]])# کے سراغ کا حساب لگائیںnumpy.trace () فنکشنب = np.trace (a) پرنٹ (b) کا استعمال کرتے ہوئے numpy سرنی یہ پروگرام ایک numpy سرنی A تشکیل دیتا ہے اور پھر اس کے نتیجے میں قیمت کا حساب لگانے کے لئے numpy.trace () فنکشن کا استعمال کرتا ہے اور اس کے نتیجے میں قیمت کا حساب لگاتا ہےبی۔اس کے نتیجے میں آؤٹ پٹ numpy سرنی کا سراغ لگے گا۔ نوٹ کریں کہ numpy.trace () فنکشن صف کے اخترن کے ساتھ ساتھ رقم واپس کرتا ہے۔اگر سرنی 2-D ہے تو ، دیئے گئے آفسیٹ کے ساتھ اس کے اخترن کے ساتھ مل کر رقم واپس کردی جاتی ہے ، یعنی عناصر کا مجموعہ A [I ، I+آفسیٹ] سب کے لئے۔اگر سرنی میں دو سے زیادہ جہتیں ہیں ، تو پھر ایکسس 1 اور ایکسس 2 کے ذریعہ بیان کردہ محور 2-D ذیلی اریوں کا تعین کرنے کے لئے استعمال کیے جاتے ہیں جن کے نشانات واپس کردیئے جاتے ہیں۔نتیجے میں ہونے والی صف کی شکل وہی ہے جو ایکسس 1 اور ایکسس 2 کے ساتھ ان پٹ سرنی کی طرح ہے۔"
    },
    {
        "Question": "دو numpy صفوں کے عنصر کے حساب سے ضرب کریں۔",
        "Answer": "دو numpy صفوں کے عنصر کے حساب سے ضرب انجام دینے کے ل we ، ہم numpy.multiply () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن دو صفوں کے متعلقہ عناصر کو بڑھاتا ہے اور اسی شکل کے ساتھ ایک نئی صف کو ان پٹ اریوں کی طرح لوٹاتا ہے۔ہم دونوں صفوں کو فنکشن کے دلائل کے طور پر پاس کرسکتے ہیں۔متبادل کے طور پر ، ہم عنصر کے حساب سے ضرب کو انجام دینے کے لئے * آپریٹر کا استعمال کرسکتے ہیں۔یہاں کچھ مثالیں ہیں: پیتھونیمپورٹ نیمپی کے طور پر این پی# دو نیمپی اریزا = این پی آر آرے بنائیں ([1 ، 2 ، 3 ، 4 ، 5]) b = np.array ([2 ، 4 ، 6 ، 8 ، 10])#numpy.multiply () فنکشن سی = np.multiply (a ، b) پرنٹ (c)# کا استعمال کرتے ہوئے دو صفوں کا عنصر کے حساب سے کام کریں۔) یہ پروگرام دو نمی اری A اور B تیار کرتا ہے اور پھر دو سروں کی عنصر کے لحاظ سے ضرب کو انجام دینے کے لئے numpy.multyply () فنکشن اور * آپریٹر کا استعمال کرتا ہے اور اس کے نتیجے میں ہونے والی صفوں C اور D پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ان پٹ اریوں کے عنصر وار ضرب سے پیدا ہونے والی صفیں ہوں گی۔ نوٹ کریں کہ numpy.multyply () فنکشن دو صفوں کے اسی عناصر کو ضرب دیتا ہے اور اسی شکل کے ساتھ ایک نئی صف کو واپس کرتا ہے جس کی طرح ان پٹ صفوں کی طرح ہے۔ہم دونوں صفوں کو فنکشن کے دلائل کے طور پر پاس کرسکتے ہیں۔متبادل کے طور پر ، ہم عنصر کے حساب سے ضرب کو انجام دینے کے لئے * آپریٹر کا استعمال کرسکتے ہیں۔* آپریٹر numpy.multiply () فنکشن کے لئے ایک شارٹ ہینڈ ہے۔"
    },
    {
        "Question": "دو numpy صفوں کا میٹرکس ضرب انجام دیں۔",
        "Answer": "دو numpy صفوں کے میٹرکس ضرب کو انجام دینے کے ل we ، ہم numpy.matmul () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن دو صفوں کے میٹرکس پروڈکٹ کو لوٹاتا ہے۔ہم دونوں صفوں کو فنکشن کے دلائل کے طور پر پاس کرسکتے ہیں۔متبادل کے طور پر ، ہم میٹرکس ضرب کو انجام دینے کے لئے @ آپریٹر کا استعمال کرسکتے ہیں۔یہاں کچھ مثالیں ہیں: پیتھونیمپورٹ نیمپی کے طور پر این پی# دو نمی اریاسا = این پی آرے بنائیں۔]])# numpy.matmul () فنکشنک = np.matmul (a ، b) پرنٹ (c) پرنٹ (c) پرنٹ (c)# کا استعمال کرتے ہوئے دو صفوں کا میٹرکس ضرب کریں۔) یہ پروگرام دو نپی سرنی A اور B تیار کرتا ہے اور پھر دو صفوں میں میٹرکس ضرب انجام دینے کے لئے numpy.matmul () فنکشن اور @ آپریٹر کا استعمال کرتا ہے اور اس کے نتیجے میں ہونے والی صفوں C اور D پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ان پٹ اریوں کے میٹرکس ضرب سے پیدا ہونے والی صفیں ہوں گی۔ نوٹ کریں کہ numpy.matmul () فنکشن دو صفوں کی میٹرکس پروڈکٹ کو لوٹاتا ہے۔ہم دونوں صفوں کو فنکشن کے دلائل کے طور پر پاس کرسکتے ہیں۔متبادل کے طور پر ، ہم میٹرکس ضرب کو انجام دینے کے لئے @ آپریٹر کا استعمال کرسکتے ہیں۔@ آپریٹر numpy.matmul () فنکشن کے لئے ndarrays.1digitalocean2educative3educative4sparkbyexamples5sharpsightlabs پر ایک شارٹ ہینڈ ہے۔"
    },
    {
        "Question": "ایک نپی سرنی میں اسکیلر ویلیو کے عنصر کے حساب سے کام کریں۔",
        "Answer": "ایک نپی سرنی میں اسکیلر ویلیو کے عنصر کے حساب سے اضافے کے ل we ، ہم numpy.add () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن سرنی کے ہر عنصر میں اسکیلر ویلیو کو شامل کرتا ہے اور اسی شکل کے ساتھ ایک نئی صف کو ان پٹ سرنی کی طرح لوٹاتا ہے۔ہم فنکشن کے دلائل کے طور پر صف اور اسکیلر ویلیو کو پاس کرسکتے ہیں۔متبادل کے طور پر ، ہم عنصر کے حساب سے اضافے کو انجام دینے کے لئے + آپریٹر کا استعمال کرسکتے ہیں۔یہاں کچھ مثالیں ہیں: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([1 ، 2 ، 3 ، 4 ، 5])# numpy.add ((1 ، 2 ، 3 ، 4 ، 5]]) عنصر کے لحاظ سے اسکیلر ویلیو کا اضافہ کریں۔) فنکشن بی = این پی۔ اے ڈی ڈی (اے ، 2) پرنٹ (بی)# + آپریٹر سی = اے + 2 پرنٹ (سی) کا استعمال کرتے ہوئے سرے میں اسکیلر ویلیو کا عنصر کے حساب سے کام کریں۔numpy.add () فنکشن اور + آپریٹر عنصر میں اسکیلر ویلیو کا عنصر کے حساب سے اضافے کے ل and اور اس کے نتیجے میں ہونے والی صفوں B اور C پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ان پٹ سرنی میں اسکیلر ویلیو کے عنصر کے حساب سے پیدا ہونے والی صفیں ہوں گی۔ نوٹ کریں کہ numpy.add () فنکشن سرنی کے ہر عنصر میں اسکیلر ویلیو کو شامل کرتا ہے اور اسی کے ساتھ ایک نئی صف لوٹاتا ہے۔ان پٹ سرنی کے طور پر شکل.ہم فنکشن کے دلائل کے طور پر صف اور اسکیلر ویلیو کو پاس کرسکتے ہیں۔متبادل کے طور پر ، ہم عنصر کے حساب سے اضافے کو انجام دینے کے لئے + آپریٹر کا استعمال کرسکتے ہیں۔+ آپریٹر numpy.add () فنکشن کے لئے ایک شارٹ ہینڈ ہے۔"
    },
    {
        "Question": "کسی نمی سرنی سے اسکیلر ویلیو کے عنصر کے مطابق گھٹاؤ انجام دیں۔",
        "Answer": "کسی نمی سرنی سے اسکیلر ویلیو کے عنصر کے حساب سے گھٹاؤ انجام دینے کے ل we ، ہم numpy.subtract () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن سرنی کے ہر عنصر سے اسکیلر ویلیو کو گھٹا دیتا ہے اور اسی شکل کے ساتھ ایک نئی صف کو ان پٹ سرنی کی طرح لوٹاتا ہے۔ہم فنکشن کے دلائل کے طور پر صف اور اسکیلر ویلیو کو پاس کرسکتے ہیں۔متبادل کے طور پر ، ہم عنصر کے حساب سے گھٹاؤ انجام دینے کے لئے - آپریٹر کا استعمال کرسکتے ہیں۔یہاں کچھ مثالیں ہیں: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([1 ، 2 ، 3 ، 4 ، 5])# numpy.subtract (استعمال کرتے ہوئے سرے سے اسکیلر ویلیو کے عنصر کے مطابق گھٹاؤ انجام دیں () فنکشنب = np.subtract (a ، 2) پرنٹ (b)# آپریٹر سی = a - 2 پرنٹ (c) کا استعمال کرتے ہوئے سرے سے اسکیلر ویلیو کے عنصر کے لحاظ سے گھٹاؤ انجام دیں۔numpy.subtract () فنکشن اور - آپریٹر سرنی سے اسکیلر ویلیو کے عنصر کے مطابق گھٹاؤ انجام دینے کے لئے اور نتیجے میں ہونے والی صفوں B اور C پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ان پٹ سرنی سے اسکیلر ویلیو کے عنصر کے مطابق گھٹاؤ سے پیدا ہونے والی صفیں ہوگی۔ نوٹ کریں کہ numpy.subract () فنکشن سرنی کے ہر عنصر سے اسکیلر ویلیو کو گھٹا دیتا ہے اور اسی کے ساتھ ایک نئی صف لوٹاتا ہےان پٹ سرنی کے طور پر شکل.ہم فنکشن کے دلائل کے طور پر صف اور اسکیلر ویلیو کو پاس کرسکتے ہیں۔متبادل کے طور پر ، ہم عنصر کے حساب سے گھٹاؤ انجام دینے کے لئے - آپریٹر کا استعمال کرسکتے ہیں۔- آپریٹر numpy.subtract () فنکشن کے لئے ایک شارٹ ہینڈ ہے۔"
    },
    {
        "Question": "اسکیلر ویلیو اور ایک نپی سرنی کے عنصر کے لحاظ سے ضرب انجام دیں۔",
        "Answer": "اسکیلر ویلیو اور ایک نپی سرنی کے عنصر کے مطابق ضرب انجام دینے کے ل we ، ہم numpy.multiply () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن سرنی کے متعلقہ عناصر اور اسکیلر ویلیو کو بڑھاتا ہے اور اسی شکل کے ساتھ ایک نئی صف کو ان پٹ سرنی کی طرح لوٹاتا ہے۔ہم فنکشن کے دلائل کے طور پر صف اور اسکیلر ویلیو کو پاس کرسکتے ہیں۔متبادل کے طور پر ، ہم عنصر کے حساب سے ضرب کو انجام دینے کے لئے * آپریٹر کا استعمال کرسکتے ہیں۔یہاں کچھ مثالیں ہیں: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([1 ، 2 ، 3 ، 4 ، 5])# اسکیلر ویلیو کی عنصر کے مطابق ضرب اور numpy.multiply (سرے کا استعمال کرتے ہوئے سرنی کریں۔) فنکشن بی = این پی۔ ملٹیپلی (ا ، 2) پرنٹ (بی)# اسکیلر ویلیو کی عنصر کے مطابق ضرب اور * آپریٹر سی = اے * 2 پرنٹ (سی) کا استعمال کرتے ہوئے سرنی کو انجام دیتا ہے۔numpy.multiply () فنکشن اور * آپریٹر کو اسکیلر ویلیو کی عنصر کے مطابق ضرب اور سرنی کو انجام دینے کے لئے اور نتیجے میں ہونے والی صفوں B اور C پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ اسکیلر ویلیو کے عنصر وار ضرب اور ان پٹ سرنی سے پیدا ہونے والی صفیں ہوں گی۔ نوٹ کریں کہ numpy.multiply () فنکشن سرنی کے اسی عناصر اور اسکیلر ویلیو کو کئی گنا بڑھاتا ہے اور اس کے ساتھ ایک نئی صف واپس کرتا ہےان پٹ سرنی کی طرح ہی شکل۔ہم فنکشن کے دلائل کے طور پر صف اور اسکیلر ویلیو کو پاس کرسکتے ہیں۔متبادل کے طور پر ، ہم عنصر کے حساب سے ضرب کو انجام دینے کے لئے * آپریٹر کا استعمال کرسکتے ہیں۔* آپریٹر numpy.multiply () ndarrays.1sharpsightlabs2sparkbyexamples3stackoverflow4linuxhint5numpy پر ایک شارٹ ہینڈ ہے۔"
    },
    {
        "Question": "اسکیلر ویلیو کے ذریعہ کسی نمی سرنی کی عنصر کے مطابق تقسیم کریں۔",
        "Answer": "کسی اسکیلر ویلیو کے ذریعہ کسی نمی سرنی کی عنصر کے مطابق تقسیم کرنے کے ل we ، ہم numpy.diveide () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن سرنی کے ہر عنصر کو اسکیلر ویلیو کے ذریعہ تقسیم کرتا ہے اور اسی شکل کے ساتھ ایک نئی صف کو ان پٹ سرنی کی طرح لوٹاتا ہے۔ہم فنکشن کے دلائل کے طور پر صف اور اسکیلر ویلیو کو پاس کرسکتے ہیں۔متبادل کے طور پر ، ہم عنصر کے مطابق تقسیم کو انجام دینے کے لئے / آپریٹر کا استعمال کرسکتے ہیں۔یہاں کچھ مثالیں ہیں: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([2 ، 4 ، 6 ، 8 ، 10])# numpy.dived (اسکیلر ویلیو کے ذریعہ سرے کی عنصر کے مطابق تقسیم کریں (numpy.dived () فنکشنب = np.divide (a ، 2) پرنٹ (b)# / آپریٹر سی = a / 2 پرنٹ (c) کا استعمال کرتے ہوئے اسکیلر ویلیو کے ذریعہ صف کی عنصر کے مطابق تقسیم کریںnumpy.diveide () فنکشن اور / آپریٹر کو اسکیلر ویلیو کے ذریعہ صف کی عنصر وار ڈویژن انجام دینے کے لئے اور نتیجے میں ہونے والی صفوں B اور C پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ اسکیلر ویلیو کے ذریعہ ان پٹ سرنی کے عنصر وار ڈویژن سے تیار کردہ صفیں ہوں گی۔ نوٹ کریں کہ numpy.dived () فنکشن اسکیلر ویلیو کے ذریعہ صف کے ہر عنصر کو تقسیم کرتا ہے اور اسی کے ساتھ ایک نئی صف لوٹاتا ہے۔ان پٹ سرنی کے طور پر شکل.ہم فنکشن کے دلائل کے طور پر صف اور اسکیلر ویلیو کو پاس کرسکتے ہیں۔متبادل کے طور پر ، ہم عنصر کے مطابق تقسیم کو انجام دینے کے لئے / آپریٹر کا استعمال کرسکتے ہیں۔/ آپریٹر numpy.dived () فنکشن کے لئے ndarrays.1stackoverflow2sharpsightlabs3educative4numpy5geeksforgeeks کے لئے ایک شارٹ ہینڈ ہے۔"
    },
    {
        "Question": "ایک نمی سرنی کے ایک مخصوص محور کے ساتھ عناصر کی رقم کا حساب لگائیں۔",
        "Answer": "ایک نمی سرنی کے ایک مخصوص محور کے ساتھ عناصر کی رقم کا حساب لگانے کے لئے ، ہم numpy.sum () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن ایک دیئے گئے محور پر سرنی عناصر کا مجموعہ لوٹاتا ہے۔ہم فنکشن کے دلائل کے طور پر صف اور محور کو پاس کرسکتے ہیں۔اگر محور کی وضاحت نہیں کی گئی ہے تو ، فنکشن ان پٹ سرنی کے تمام عناصر کا خلاصہ کرے گا۔یہاں کچھ مثالیں ہیں: پیتھونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([[1 ، 2 ، 3] ، [4 ، 5 ، 6] ، [7 ، 8 ، 9]])# کا حساب کتاب کریںnumpy.sum () فنکشنب = np.sum (a ، axis = 0) پرنٹ (b) پرنٹ (b)# کا استعمال کرتے ہوئے سرنی کی قطار کے ساتھ عناصر# numpy.sum () فنکشنک کا استعمال کرتے ہوئے صف کے کالموں کے ساتھ عناصر کی رقم کا حساب لگائیں= np.sum (a ، محور = 1) پرنٹ (c)# numpy.sum () فنکشن () فنکشنڈ = np.sum (a) پرنٹ (d) پرنٹ (d) کا استعمال کرتے ہوئے صف کے تمام عناصر کے جوڑے کا حساب لگائیں۔A اور پھر Numpy.sum () فنکشن کا استعمال قطار کے ساتھ ساتھ ، کالموں کے ساتھ ساتھ ، اور صف کے تمام عناصر کے ساتھ عناصر کی رقم کا حساب لگانے کے لئے اور اس کے نتیجے میں ہونے والی صفوں B ، C اور D پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ان پٹ سرنی کے مخصوص محور کے ساتھ عناصر کے مجموعہ سے پیدا ہونے والی صفیں ہوں گی۔ نوٹ کریں کہ numpy.sum () فنکشن کسی دیئے ہوئے محور پر سرنی عناصر کی رقم واپس کرتا ہے۔ہم فنکشن کے دلائل کے طور پر صف اور محور کو پاس کرسکتے ہیں۔اگر محور کی وضاحت نہیں کی گئی ہے تو ، فنکشن ان پٹ سرنی کے تمام عناصر کا خلاصہ کرے گا۔محور پیرامیٹر محور یا محور کی وضاحت کرتا ہے جس پر رقم انجام دی جائے گی۔اگر محور = کوئی بھی نہیں ، تو یہ رقم سرنی کے تمام عناصر پر انجام دی جائے گی۔"
    },
    {
        "Question": "عناصر کی مصنوعات کا حساب کتاب ایک مخصوص محور کے ساتھ کریں۔",
        "Answer": "ایک نمی سرنی کے ایک مخصوص محور کے ساتھ عناصر کی مصنوعات کا حساب لگانے کے لئے ، ہم numpy.prod () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن ایک دیئے گئے محور پر سرنی عناصر کی مصنوعات کو لوٹاتا ہے۔ہم فنکشن کے دلائل کے طور پر صف اور محور کو پاس کرسکتے ہیں۔اگر محور کی وضاحت نہیں کی گئی ہے تو ، فنکشن ان پٹ سرنی کے تمام عناصر کی مصنوعات کا حساب لگائے گا۔یہاں کچھ مثالیں ہیں: پائیٹونیمپورٹ نیمپی کے طور پر NP# ایک numpy arraya = np.array بنائیں ([[1 ، 2 ، 3] ، [4 ، 5 ، 6] ، [7 ، 8 ، 9]])# کی مصنوعات کا حساب لگائیںnumpy.prod () فنکشنب = np.prod (a ، axis = 0) پرنٹ (b) پرنٹ (b)# کا استعمال کرتے ہوئے سرنی کی قطار کے ساتھ عناصر# numpy.prod () فنکشنک کا استعمال کرتے ہوئے صف کے کالموں کے ساتھ عناصر کی مصنوعات کا حساب لگائیں۔= np.prod (a ، axis = 1) پرنٹ (c)# numpy.prod () فنکشنڈ = np.prod (a) پرنٹ (d) پرنٹ (d) کا استعمال کرتے ہوئے صف کے تمام عناصر کی مصنوعات کا حساب لگائیں۔A اور پھر Numpy.prod () فنکشن کا استعمال قطار کے ساتھ ساتھ ، کالموں کے ساتھ ساتھ ، اور صف کے تمام عناصر کے ساتھ عناصر کی مصنوعات کا حساب کتاب کرنے کے لئے اور اس کے نتیجے میں صفوں B ، C اور D پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ان پٹ سرنی کے مخصوص محور کے ساتھ عناصر کی مصنوعات سے تخلیق کردہ صفیں ہوں گی۔ نوٹ کریں کہ numpy.prod () فنکشن کسی دیئے ہوئے محور پر صف کے عناصر کی مصنوعات کو لوٹاتا ہے۔ہم فنکشن کے دلائل کے طور پر صف اور محور کو پاس کرسکتے ہیں۔اگر محور کی وضاحت نہیں کی گئی ہے تو ، فنکشن ان پٹ سرنی کے تمام عناصر کی مصنوعات کا حساب لگائے گا۔محور پیرامیٹر محور یا محور کی وضاحت کرتا ہے جس پر مصنوعات کی انجام دہی ہوگی۔اگر محور = کوئی نہیں ، تو مصنوعات کو سرنی کے تمام عناصر پر انجام دیا جائے گا۔"
    },
    {
        "Question": "نمی سرنی میں عناصر کی مجموعی رقم کا حساب لگائیں۔",
        "Answer": "ایک نپی سرنی میں عناصر کی مجموعی رقم کا حساب لگانے کے لئے ، ہم numpy.cumsum () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن ایک مخصوص محور کے ساتھ صف میں عناصر کی مجموعی رقم واپس کرتا ہے۔اگر محور کی وضاحت نہیں کی گئی ہے تو ، فنکشن ان پٹ سرنی کے تمام عناصر کی مجموعی رقم کا حساب لگائے گا۔یہاں کچھ مثالیں ہیں: پیتھونیمپورٹ نیمپی کے طور پر این پی# ایک نیمپری ارایا = np.array بنائیں ([1 ، 2 ، 3 ، 4 ، 5])# numpy.cumsums () فنکشنب = کا استعمال کرتے ہوئے سرے میں عناصر کے مجموعی رقم کا حساب لگائیں۔np.cumsum (a) پرنٹ (b)# numpy.cumsum () فنکشن سی = np.array ([[1 ، 2 ، 3] ، [4 [[1 ، 2 ، 3] ، [4 کا استعمال کرتے ہوئے 2 جہتی صف کی قطار کے ساتھ ساتھ عناصر کی مجموعی رقم کا حساب لگائیں۔..کومسم () فنکشن = np.cumsum (c ، محور = 1) پرنٹ (e) یہ پروگرام ایک numpy سرنی A تشکیل دیتا ہے اور پھر سرنی میں عناصر کے مجموعی رقم کا حساب لگانے کے لئے numpy.cumsum () فنکشن کا استعمال کرتا ہے اور اس کو پرنٹ کرتا ہےنتیجے میں سرنی b.یہ پروگرام ایک 2 جہتی numpy سرنی سی بھی تشکیل دیتا ہے اور سرنی کی قطار اور کالموں کے ساتھ ساتھ عناصر کی مجموعی رقم کا حساب لگانے کے لئے numpy.cumsum () فنکشن کا استعمال کرتا ہے اور اس کے نتیجے میں صفوں کو پرنٹ کرتا ہے۔اس کے نتیجے میں آؤٹ پٹ ان پٹ اریوں میں عناصر کی مجموعی رقم سے پیدا ہونے والی صفیں ہوں گی۔ نوٹ کریں کہ numpy.cumsum () فنکشن ایک مخصوص محور کے ساتھ صف میں عناصر کی مجموعی رقم واپس کرتا ہے۔اگر محور کی وضاحت نہیں کی گئی ہے تو ، فنکشن ان پٹ سرنی کے تمام عناصر کی مجموعی رقم کا حساب لگائے گا۔محور پیرامیٹر محور یا محور کی وضاحت کرتا ہے جس کے ساتھ ساتھ مجموعی رقم کا حساب لگایا جائے گا۔اگر محور = کوئی نہیں تو ، سرنی کے تمام عناصر پر مجموعی رقم کا حساب لگایا جائے گا۔"
    },
    {
        "Question": "چیک اور غیر ملکی کلیدی رکاوٹ میں کیا فرق ہے؟",
        "Answer": "ڈیٹا بیس کے تناظر میں ، ایک چیک رکاوٹ اور غیر ملکی کلیدی رکاوٹ مختلف مقاصد کی خدمت کرتی ہے: چیک رکاوٹ: ایک کالم میں ذخیرہ شدہ اقدار پر ڈومین سے متعلق مخصوص قواعد یا شرائط کو نافذ کرنے کے لئے ایک چیک رکاوٹ کا استعمال کیا جاتا ہے۔یہ آپ کو ایسی حالت کی وضاحت کرنے کی اجازت دیتا ہے جو ایک میز کی ہر صف کے لئے سچ ہونا چاہئے۔اگر کوئی قطار حالت کی خلاف ورزی کرتی ہے تو ، رکاوٹ قطار کے اندراج یا ترمیم کو روکتی ہے۔مثال کے طور پر ، آپ یہ نافذ کرنے کے لئے چیک رکاوٹ کا استعمال کرسکتے ہیں کہ ایک عددی کالم صرف مثبت اقدار کو قبول کرتا ہے یا اس تار کا کالم"
    },
    {
        "Question": "NULL اور پہلے سے طے شدہ رکاوٹ کے درمیان کیا فرق ہے؟",
        "Answer": "ڈیٹا بیس کے تناظر میں ، کالموں میں NULL اقدار کو سنبھالنے کے لئے قواعد کی وضاحت کے لئے کالعدم رکاوٹ اور پہلے سے طے شدہ رکاوٹ کا استعمال کیا جاتا ہے ، لیکن وہ مختلف مقاصد کی تکمیل کرتے ہیں: کالعدم رکاوٹ کا استعمال نہیں کیا جاتا ہے کہ ایک کالم میں ہمیشہ ہونا ضروری ہے۔ایک غیر نول قدر۔یہ اس بات کو یقینی بناتا ہے کہ ایک ٹیبل کی ہر صف میں کالم کی قدر ہوتی ہے اور کالم میں کالعدم اقدار کے داخل کرنے سے روکتا ہے۔اس رکاوٹ کو لاگو کرکے ، آپ کسی قدر کی موجودگی کی ضرورت کے ذریعہ ڈیٹا کی سالمیت کو نافذ کرتے ہیں۔ مثال کے طور پر: SQLCOPY کوڈ کریٹ ٹیبل ملازمین (ملازم INT پرائمری کلید ،"
    },
    {
        "Question": "ایک چھوٹا سا ٹیبل اور بیان سے حذف کرنے میں کیا فرق ہے؟",
        "Answer": "دونوں ٹیبل ٹیبل اور بیانات سے حذف کرنے والے ڈیٹا بیس میں کسی ٹیبل سے ڈیٹا کو ہٹانے کے لئے استعمال ہوتے ہیں ، لیکن وہ اپنی فعالیت اور طرز عمل میں مختلف ہیں: ٹرنکیٹ ٹیبل: ٹرنکیٹ ٹیبل ایک ڈی ڈی ایل (ڈیٹا ڈیفینیشن لینگویج) بیان ہے جو تمام قطار کو جلدی سے ہٹانے کے لئے استعمال کیا جاتا ہے۔ایک ٹیبل۔ ٹیبل ٹیبل آپریشن ہر صف کو حذف کرنے کے لئے انفرادی طور پر لاگ ان نہیں ہوتا ہے۔اس کے بجائے ، یہ ڈیٹا کے صفحات کو ختم کرتا ہے اور اسٹوریج کی جگہ کو جاری کرتا ہے ، جس سے اسے حذف کرنے سے تیز اور زیادہ موثر ہوتا ہے۔ ٹرانکیٹ ٹیبل غیر ٹرانزیکشنل آپریشن ہے اور اسے واپس نہیں کیا جاسکتا ہے۔ایک بار پھانسی دینے کے بعد ، ڈیٹا مستقل طور پر حذف ہوجاتا ہے۔"
    },
    {
        "Question": "تخلیق ٹیبل اور ڈراپ ٹیبل کے بیان میں کیا فرق ہے؟",
        "Answer": "ایک تخلیق ٹیبل اسٹیٹمنٹ اور ایک ڈراپ ٹیبل بیان دونوں ایس کیو ایل بیانات ہیں جو ڈیٹا بیس ٹیبلز کو سنبھالنے کے لئے استعمال ہوتے ہیں ، لیکن وہ مختلف مقاصد کی خدمت کرتے ہیں: ٹیبل بنائیں: ٹیبل بنائیں بیان کو ڈیٹا بیس میں ایک نیا ٹیبل بنانے کے لئے استعمال کیا جاتا ہے۔ یہ ٹیبل کے نام ، کالم کی وضاحت کرتا ہے۔نام ، اعداد و شمار کی اقسام ، رکاوٹیں ، اور کسی بھی دوسرے ٹیبل سے متعلق خاص صفات۔ تخلیق ٹیبل کا بیان ٹیبل کی ساخت اور اسکیما کی وضاحت کرتا ہے ، جس میں اس کے کالم ، ڈیٹا کی اقسام اور رکاوٹیں شامل ہیں۔وضاحت شدہ ڈھانچہ۔ مثال کے طور پر: SQLCOPY کوڈ کریٹ"
    },
    {
        "Question": "تخلیق ڈیٹا بیس اور ڈراپ ڈیٹا بیس کے بیان میں کیا فرق ہے؟",
        "Answer": "ڈیٹا بیس کا ایک بیان اور ایک ڈراپ ڈیٹا بیس بیان ڈیٹا بیس کو سنبھالنے کے لئے استعمال ہونے والے ایس کیو ایل کے بیانات ہیں ، لیکن وہ مختلف مقاصد کی خدمت کرتے ہیں: ڈیٹا بیس بنائیں: ڈیٹا بیس مینجمنٹ سسٹم (ڈی بی ایم ایس) میں ایک نیا ڈیٹا بیس بنانے کے لئے استعمال کیا جاتا ہے۔"
    },
    {
        "Question": "بیک اپ ڈیٹا بیس اور بحالی ڈیٹا بیس کے بیان میں کیا فرق ہے؟",
        "Answer": "بیک اپ ڈیٹا بیس کا بیان اور بحالی ڈیٹا بیس کا بیان ایس کیو ایل کے بیانات ہیں جو بالترتیب ڈیٹا بیس بیک اپ اور بحالی کے انتظام کے لئے استعمال ہوتے ہیں۔وہ مختلف مقاصد کی خدمت کرتے ہیں: بیک اپ ڈیٹا بیس: بیک اپ ڈیٹا بیس کا بیان موجودہ ڈیٹا بیس کا بیک اپ بنانے کے لئے استعمال کیا جاتا ہے۔ یہ آپ کو بیک اپ کے وقت ڈیٹا بیس کی ریاست کو محفوظ رکھتے ہوئے ، ڈیٹا بیس کے ڈیٹا اور ٹرانزیکشن لاگ فائلوں کی ایک کاپی بنانے کی اجازت دیتا ہے۔بیک اپ ڈیٹا بیس کا بیان بیک اپ فائل تیار کرتا ہے جو ہوسکتا ہے"
    },
    {
        "Question": "گرانٹ اور منسوخ کرنے والے بیان میں کیا فرق ہے؟",
        "Answer": "ڈیٹا بیس سیکیورٹی اور اجازتوں کے تناظر میں ، ایک گرانٹ بیان اور منسوخ بیان ایس کیو ایل کے بیانات ہیں جو صارف کے مراعات کو سنبھالنے کے لئے استعمال ہوتے ہیں ، لیکن وہ مختلف مقاصد کی تکمیل کرتے ہیں: گرانٹ بیان: گرانٹ کا بیان صارف یا صارف گروپ کو مخصوص مراعات دینے کے لئے استعمال کیا جاتا ہے۔ایک ڈیٹا بیس میں۔ یہ ڈیٹا بیس ایڈمنسٹریٹر یا کی اجازت دیتا ہے"
    }
]