[
    {
        "Question": "پانڈاس",
        "Answer": "پانڈاس ایک مشہور اوپن سورس ازگر لائبریری ہے جو ڈیٹا میں ہیرا پھیری اور تجزیہ کے لئے استعمال ہوتی ہے۔یہ ساختی اعداد و شمار ، جیسے ٹیبلر ڈیٹا ، ٹائم سیریز ، اور بہت کچھ کے ساتھ موثر انداز میں کام کرنے کے لئے ڈیٹا ڈھانچے اور افعال فراہم کرتا ہے۔پانڈاس ایک اور ، نمی کے اوپر بنایا گیا ہے"
    },
    {
        "Question": "پانڈاس کیا ہے اور اسے ڈیٹا تجزیہ میں کیوں استعمال کیا جاتا ہے؟",
        "Answer": "پانڈاس ایک طاقتور اوپن سورس ازگر لائبریری ہے جو ڈیٹا تجزیہ اور ہیرا پھیری میں بڑے پیمانے پر استعمال ہوتی ہے۔یہ استعمال میں آسانی سے ڈیٹا ڈھانچے اور ڈیٹا تجزیہ کے ٹولز مہیا کرتا ہے ، جس سے یہ ساختہ اعداد و شمار کے ساتھ کام کرنے کے لئے ایک مقبول انتخاب ہوتا ہے۔ یہاں کچھ وجوہات ہیں کہ پانڈوں کو ڈیٹا تجزیہ میں وسیع پیمانے پر استعمال کیا جاتا ہے: ڈیٹا ڈھانچے: پانڈاس دو اہم ڈیٹا ڈھانچے ، سیریز اور متعارف کراتے ہیں۔ڈیٹا فریم۔ایک سلسلہ ایک جہتی لیبل لگا ہوا صف ہے جو کسی بھی ڈیٹا کی قسم کا انعقاد کرسکتا ہے ، جبکہ ڈیٹا فریم دو جہتی لیبل لگا ہوا ڈیٹا ڈھانچہ ہے جس میں ممکنہ طور پر مختلف اقسام کے کالم ہیں۔یہ ڈھانچے ڈیٹا کو ذخیرہ کرنے ، جوڑ توڑ اور تجزیہ کرنے کا ایک آسان اور موثر طریقہ فراہم کرتے ہیں۔ ڈیٹا ہیرا پھیری: پانڈ"
    },
    {
        "Question": "آپ ازگر میں پانڈاس لائبریری کیسے درآمد کرتے ہیں؟",
        "Answer": "ازگر میں پانڈاس لائبریری درآمد کرنے کے ل you ، آپ درآمد کی مطلوبہ الفاظ کو استعمال کرسکتے ہیں جس کے بعد لائبریری کا نام \"پانڈاس\" ہے۔یہ نحو ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاشوور ، یہ ایک عام رواج ہے کہ پانڈوں کو عرف کے ساتھ درآمد کیا جائے تاکہ آپ کے کوڈ میں لائبریری کا حوالہ دینا آسان ہوجائے۔پانڈوں کے لئے استعمال ہونے والا سب سے عام عرف \"PD\" ہے۔یہاں آپ عرف کے ساتھ پانڈوں کو درآمد کرسکتے ہیں: پائیتھون کوپی کوڈیمپورٹ پانڈاس اس درآمدی بیان کے ساتھ ، آپ \"PD\" عرف کا استعمال کرتے ہوئے پانڈاس افعال اور کلاسوں تک رسائی حاصل کرسکتے ہیں۔مثال کے طور پر ، ڈیٹا فریم بنانے کے لئے ،"
    },
    {
        "Question": "آپ ڈیٹا فریم کی پہلی N قطاروں تک کیسے رسائی حاصل کرتے ہیں؟",
        "Answer": "پانڈوں میں ڈیٹا فریم کی پہلی N قطاروں تک رسائی حاصل کرنے کے ل you ، آپ ہیڈ () کا طریقہ استعمال کرسکتے ہیں۔ہیڈ () کا طریقہ ایک نیا ڈیٹا فریم واپس کرتا ہے جس میں اصل ڈیٹا فریم کے آغاز سے قطاروں کی مخصوص تعداد پر مشتمل ہے۔پہلے سے طے شدہ طور پر ، اگر کوئی پیرامیٹر فراہم نہیں کیا جاتا ہے تو یہ پہلی 5 قطاریں لوٹاتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT پانڈاس PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان' ، 'لنڈا' ، 'ڈیوڈ'] ، 'عمر': [28 ، 35 ،42 ، 50 ، 45] ، 'شہر': ['نیویارک' ، 'شکاگو' ، 'لاس اینجلس' ، 'سان فرانسسکو' ، 'سیئٹل' ، 'سیئٹل']} df = pd.dataframe (ڈیٹا)# پہلے 3 Rowsfirst_three_rows تک رسائی حاصل کریں= df.head (3)#"
    },
    {
        "Question": "آپ ڈیٹا فریم سے مخصوص کالم کیسے منتخب کرتے ہیں؟",
        "Answer": "پانڈوں میں ڈیٹا فریم سے مخصوص کالموں کو منتخب کرنے کے ل you ، آپ کالم کے ناموں یا LOC یا ILOC رسار کے ساتھ انڈیکسنگ استعمال کرسکتے ہیں۔یہاں کچھ نقطہ نظر ہیں: کالم کے ناموں کے ساتھ اشاریہ سازی: آپ مربع بریکٹ [] استعمال کرسکتے ہیں اور انڈیکس کے طور پر کالم کے ناموں کی فہرست فراہم کرسکتے ہیں۔یہ صرف ایک نیا ڈیٹا فریم واپس کرے گا"
    },
    {
        "Question": "آپ کسی حالت کی بنیاد پر ڈیٹا فریم میں قطاروں کو کس طرح فلٹر کرتے ہیں؟",
        "Answer": "پانڈوں کی حالت پر مبنی ڈیٹا فریم میں قطاروں کو فلٹر کرنے کے ل you ، آپ بولین انڈیکسنگ کا استعمال کرسکتے ہیں۔بولین انڈیکسنگ آپ کو بولین ماسک بنانے کی اجازت دیتی ہے جو ایک مخصوص حالت کی بنیاد پر قطاریں منتخب کرتی ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT پانڈاس PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان' ، 'لنڈا'] ، 'عمر': [28 ، 35 ، 42 ، 50]، 'سٹی': ['نیو یارک"
    },
    {
        "Question": "آپ ڈیٹا فریم سے کالم کیسے چھوڑتے ہیں؟",
        "Answer": "پانڈوں میں ڈیٹا فریم سے کالم چھوڑنے کے ل you ، آپ ڈراپ () کا طریقہ استعمال کرسکتے ہیں۔ڈراپ () کا طریقہ آپ کو ان کے ناموں یا پوزیشنوں کی وضاحت کرکے ایک یا زیادہ کالموں کو ہٹانے کی اجازت دیتا ہے۔یہاں کچھ نقطہ نظر ہیں:"
    },
    {
        "Question": "آپ ڈیٹا فریم میں گمشدہ اقدار کو کس طرح سنبھالتے ہیں؟",
        "Answer": "ڈیٹا فریم میں گمشدہ اقدار کو سنبھالنا ڈیٹا تجزیہ اور پری پروسیسنگ کا ایک اہم قدم ہے۔پانڈاس گمشدہ اقدار کو مؤثر طریقے سے سنبھالنے کے لئے متعدد طریقے مہیا کرتا ہے۔یہاں کچھ عام تکنیکیں ہیں: گمشدہ اقدار کی جانچ پڑتال: آپ ڈیٹا فریم میں گمشدہ اقدار کی نشاندہی کرنے کے لئے isnull () طریقہ استعمال کرسکتے ہیں۔یہ اصل کی طرح ایک ہی شکل کا ڈیٹا فریم لوٹاتا ہے ، جہاں ہر قدر درست ہے اگر اصل ڈیٹا فریم میں اسی قدر غائب ہے ، اور دوسری صورت میں غلط ہے۔یہاں ایک مثال ہے:"
    },
    {
        "Question": "آپ ڈیٹا فریم میں عددی کالموں کے لئے وضاحتی اعدادوشمار کی گنتی کیسے کرتے ہیں؟",
        "Answer": "پانڈوں میں ڈیٹا فریم میں عددی کالموں کے لئے وضاحتی اعدادوشمار کی گنتی کرنے کے ل you ، آپ بیان () طریقہ استعمال کرسکتے ہیں۔بیان () طریقہ ہر عددی کالم کے لئے مختلف سمری اعدادوشمار تیار کرتا ہے ، جس میں گنتی ، مطلب ، معیاری انحراف ، کم سے کم ، کوارٹائل اور زیادہ سے زیادہ شامل ہیں۔یہاں ایک مثال یہ ہے: پی ڈی کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس PD# عددی کالم کے ساتھ ایک ڈیٹا فریم بنائیں = {'نام': ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'تنخواہ': [50000 ، 70000 ، 60000]} df = pd.dataframe (ڈیٹا"
    },
    {
        "Question": "آپ پانڈوں میں گروپ بائی آپریشن کیسے انجام دیتے ہیں؟",
        "Answer": "پانڈوں میں ، گروپ بائی () فنکشن ڈیٹا فریم پر گروپ بندی کی کارروائیوں کو انجام دینے کے لئے استعمال ہوتا ہے۔گروپ بائی () فنکشن آپ کو ایک یا زیادہ کالموں کی بنیاد پر گروپوں میں ڈیٹا فریم تقسیم کرنے کی اجازت دیتا ہے ، اور پھر ہر گروپ میں مجموعی یا تبدیلی کے افعال کا اطلاق کرتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان' ، 'ایملی' ، 'جان'] ، 'شہر': ['نیو یارک'.اور کمپیوٹ کا مطلب تنخواہ گروپ ہے"
    },
    {
        "Question": "آپ ڈیٹا فریم کے ہر عنصر پر کسی فنکشن کا اطلاق کیسے کرتے ہیں؟",
        "Answer": "پانڈوں میں ڈیٹا فریم کے ہر عنصر پر کسی فنکشن کو لاگو کرنے کے ل you ، آپ اطلاق () طریقہ استعمال کرسکتے ہیں۔اطلاق () طریقہ آپ کو کسی ڈیٹا فریم کی قطار یا کالموں کے ساتھ کسی فنکشن کا اطلاق کرنے کی اجازت دیتا ہے ، یا یہاں تک کہ ہر فرد عنصر پر بھی۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT Pandas As PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'تنخواہ': [[[28 ، 35 ، 42]50000 ، 60000 ، 55000]} df = pd.dataframe (ڈیٹا)# ڈیف ڈبل_ ویلیو (x) کو لاگو کرنے کے لئے کسی فنکشن کی وضاحت کریں: 2 * x# واپس کریں"
    },
    {
        "Question": "آپ ایک یا زیادہ کالموں کے ذریعہ ڈیٹا فریم کو کس طرح ترتیب دیتے ہیں؟",
        "Answer": "پانڈوں میں ایک یا زیادہ کالموں کے ذریعہ ڈیٹا فریم کو ترتیب دینے کے ل you ، آپ ترتیب_اولیوز () کا طریقہ استعمال کرسکتے ہیں۔ترتیب_اولیوز () کا طریقہ آپ کو ایک یا زیادہ کالموں کو ترتیب دینے اور ترتیب دینے کے آرڈر (چڑھنے یا اترنے) کی وضاحت کرنے کی اجازت دیتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان' ، 'لنڈا'] ، 'عمر': [28 ، 35 ، 42 ، 50]."
    },
    {
        "Question": "آپ پانڈوں میں دو ڈیٹا فریموں کو کس طرح ضم/شامل کرتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ انضمام () فنکشن کا استعمال کرتے ہوئے دو ڈیٹا فریموں کو ضم یا شامل کرسکتے ہیں۔انضمام () فنکشن ایک عام کالم یا انڈیکس کی بنیاد پر دو یا زیادہ ڈیٹا فریموں سے قطاروں کو جوڑتا ہے۔یہ کئی قسم کے شامل ہونے کی فراہمی کرتا ہے ، جیسے اندرونی شمولیت ، بائیں شمولیت ، دائیں شمولیت ، اور بیرونی شمولیت۔یہاں ایک مثال یہ ہے: PD## PD# کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس پہلا ڈیٹا فریمیٹا 1 = {'ID' بنائیں: [1 ، 2 ، 3 ، 4"
    },
    {
        "Question": "آپ ڈیٹا فریم میں کالموں کو کس طرح اسٹیک/اسٹیک کرتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ اسٹیک () اور غیر اسٹیک () طریقوں کا استعمال کرتے ہوئے ڈیٹا فریم میں کالموں کو اسٹیک یا اسٹیک کرسکتے ہیں۔ان طریقوں کا استعمال اعداد و شمار کو نئی شکل دینے کے لئے کیا جاتا ہے ،"
    },
    {
        "Question": "آپ ڈیٹا فریم کو کس طرح ایک نمی سرنی میں تبدیل کرتے ہیں؟",
        "Answer": "ڈیٹا فریم کو ایک نمی سرنی میں تبدیل کرنے کے ل you ، آپ ڈیٹا فریم کی اقدار کی وصف کو استعمال کرسکتے ہیں۔اقدار کی وصف ڈیٹا فریم کے ڈیٹا کی ایک نمی سرنی نمائندگی لوٹاتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'تنخواہ': [[[28 ، 35 ، 42]50000 ، 60000 ، 55000]} df = pd.dataframe (ڈیٹا)# ڈیٹا فریم کو ایک numpy arrayarray = df.values میں تبدیل کریں numpy arrayprint (سرنی) آؤٹ پٹ کو ڈسپلے کریں: csscopy کوڈ [['جان' 28 50000] ['ایمل''35 60000] [' ریان '42 55000]] ``"
    },
    {
        "Question": "آپ ڈیٹا فریم میں کالموں کے مابین ریاضی کے کام کیسے انجام دیتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ ریاضی آپریٹرز جیسے +، -، *، /، اور ٪ کا استعمال کرکے کالموں کے مابین ریاضی کی کارروائیوں کو انجام دے سکتے ہیں۔یہ آپریٹرز ڈیٹا فریم کے کالموں پر عنصر کے لحاظ سے کام کرتے ہیں ، کالموں کے متعلقہ عناصر کے مابین آپریشن انجام دیتے ہیں۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'A' بنائیں: [1 ، 2 ، 3"
    },
    {
        "Question": "آپ موجودہ کالموں کی بنیاد پر ڈیٹا فریم میں نیا کالم کیسے بناتے ہیں؟",
        "Answer": "موجودہ کالموں پر مبنی ڈیٹا فریم میں نیا کالم بنانے کے ل you ، آپ کسی قدر کو تفویض کرسکتے ہیں یا ڈیٹا فریم کے کالم پر کسی فنکشن کا اطلاق کرسکتے ہیں۔اس کو پورا کرنے کے لئے کچھ طریقے یہ ہیں: براہ راست ایک قدر تفویض کریں: پائیتھون کوپی کوڈڈف ['نیو کالم'] = موجودہ کالموں کے مابین ویلیو پرفارم ریاضی کی کارروائیوں: پائیتھون کوپی کوڈڈف ['نیو کلون'] = ڈی ایف ['کالم 1'] + ڈی ایف ['کالم 2']موجودہ کالموں پر ایک فنکشن کا اطلاق کریں: پائیٹون کوپی کوڈیڈف My_function (قطار): # موجودہ کالموں پر مبنی نئی قدر کی گنتی کرنے کے لئے منطق رزلٹ ڈی ایف ['نیو کلون \"] = df.apply (my_function ، محور = 1) یہاں ایک مثال ہے جو ان نقطہ نظر کو ظاہر کرتی ہے۔پی ڈی# کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس"
    },
    {
        "Question": "آپ وسیع سے لمبی شکل اور اس کے برعکس ڈیٹا فریم کو کس طرح نئی شکل دیتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ ایک ڈیٹا فریم کو وسیع سے لمبی شکل تک اور اس کے برعکس پگھل () اور محور () افعال کا استعمال کرتے ہوئے دوبارہ شکل دے سکتے ہیں۔یہ فنکشن ڈیٹا فریم کو \"انپیوٹس\" \"، متعدد کالموں کو ایک ہی کالم میں تبدیل کرنا اور متغیر ناموں اور اقدار کو ذخیرہ کرنے کے لئے نئے کالم تیار کرنا۔یہاں ایک مثال یہ ہے: PD## PD# کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس ایک وسیع فارمیٹ ڈیٹافریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'ریاضی': [90 ، 85 ، 92] ، 'سائنس': [88 ، 93 ، 91] ،' انگریزی ': [86 ، 89 ، 90]} df_wide = pd.dataframe (ڈیٹا)# وسیع سے لمبی شکل تک ڈیٹا فریم کو نئی شکل دیں"
    },
    {
        "Question": "آپ پانڈوں میں ڈیٹ ٹائم ڈیٹا کو کس طرح سنبھالتے ہیں؟",
        "Answer": "پانڈاس ڈیٹا ٹائم ڈیٹا کو موثر انداز میں سنبھالنے کے لئے مختلف فنکشنلیاں مہیا کرتا ہے۔پانڈوں میں ڈیٹ ٹائم ڈیٹا کے ساتھ کام کرنے کے لئے کچھ عام کاروائیاں اور تکنیک یہ ہیں: ڈور کو ڈیٹ ٹائم میں تبدیل کرنا: اگر آپ کا ڈیٹ ٹائم ڈیٹا اسٹرنگ فارمیٹ میں ہے تو ، آپ اسے ڈیٹ ٹائم فارمیٹ میں تبدیل کرنے کے لئے ٹو_ڈیٹ ٹائم () فنکشن کا استعمال کرسکتے ہیں۔فارمیٹ پیرامیٹر کی وضاحت کرکے ، آپ ان پٹ سٹرنگ کی شکل کی وضاحت کرسکتے ہیں۔اجزاء: آپ ڈیٹ ٹائم کالم کے مختلف اجزاء نکال سکتے ہیں ، جیسے سال ، مہینہ ، دن ، گھنٹہ ، منٹ ، اور دوسرا ، ڈی ٹی ایکسیسر ڈاٹ پیتھون کوپی کوڈڈف ['سال'] = ڈی ایف ['تاریخ']۔ dt.yeardf['مہینہ'] = df ['تاریخ']. dt.monthdf ['day'] = df ['تاریخ']"
    },
    {
        "Question": "آپ کس طرح متغیر متغیرات کو پانڈوں میں عددی اقدار میں تبدیل کرتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ متعدد تکنیکوں کا استعمال کرتے ہوئے دوٹوک متغیر کو عددی اقدار میں تبدیل کرسکتے ہیں۔یہاں تین عام طریقے ہیں: لیبل انکوڈنگ: لیبل انکوڈنگ ایک متغیر متغیر میں ہر انوکھے زمرے کو ایک انوکھا عددی لیبل تفویض کرتا ہے۔اسکلرن کی لیبلینکوڈر کلاس۔ پریپروسیسنگ ماڈیول کو لیبل انکوڈنگ کے لئے استعمال کیا جاسکتا ہے۔ایک گرم انکوڈنگ ایک متغیر متغیر میں ہر انوکھے زمرے کے لئے بائنری کالم بناتا ہے۔پانڈاس `get فراہم کرتا ہے"
    },
    {
        "Question": "آپ پانڈوں میں CSV فائل میں ڈیٹا فریم کو کیسے محفوظ کریں گے؟",
        "Answer": "پانڈوں میں CSV فائل میں ڈیٹا فریم کو بچانے کے ل you ، آپ TO_CSV () طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں:"
    },
    {
        "Question": "آپ CSV فائل سے ڈیٹا فریم میں ڈیٹا فریم میں ڈیٹا کیسے پڑھتے ہیں؟",
        "Answer": "پانڈوں میں ڈیٹا فریم میں سی ایس وی فائل سے ڈیٹا پڑھنے کے ل you ، آپ ریڈ_ سی ایس وی () فنکشن استعمال کرسکتے ہیں۔اس کی ایک مثال یہ ہے: PDITHONCOPY CODEMPORT Pandas جیسے PD# CSV فائل سے ڈیٹا کو DATAFRAMEDF = PD.READ_CSV ('data.csv') میں پڑھیں اس مثال میں ، READ_CSV () فنکشن کہا جاتا ہے ، اور پہلا پیرامیٹر فائل کا راستہ ہے۔یا CSV فائل کا فائل نام جو آپ پڑھنا چاہتے ہیں۔اس معاملے میں"
    },
    {
        "Question": "آپ ڈیٹا فریم میں آؤٹ لیئرز کو کس طرح سنبھالتے ہیں؟",
        "Answer": "ڈیٹا فریم میں آؤٹ لیئرز کو سنبھالنا مختلف تکنیکوں کا استعمال کرتے ہوئے کیا جاسکتا ہے۔یہاں کچھ عام نقطہ نظر ہیں: آؤٹ لیئرز کی نشاندہی کرنا: پہلے ، اپنے ڈیٹا فریم میں آؤٹ لیئرز کی شناخت کرنا ضروری ہے۔آپ اعداد و شمار کے طریقوں ، تصور ، یا ڈومین کے علم کو استعمال کرسکتے ہیں"
    },
    {
        "Question": "آپ پانڈوں میں ایک محور کی میز کیسے بناتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ Pivot_table () فنکشن کا استعمال کرتے ہوئے ایک پائیوٹ ٹیبل تشکیل دے سکتے ہیں۔ایک محور ٹیبل آپ کو ایک یا زیادہ کالموں کی بنیاد پر اعداد و شمار کا خلاصہ اور مجموعی ڈیٹا کی اجازت دیتا ہے ، جس سے اعداد و شمار کی کراس ٹیبلولیشن مل جاتی ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD## ایک ڈیٹا فریمیٹا = {'زمرہ' بنائیں: ['a' ، 'b' ، 'a' ، 'b' ، 'a' ، 'b'] ، 'آئٹم': [[['x' ، 'x' ، 'y' ، 'Y' ، 'z' ، 'z'] ، 'قدر': [10 ، 15 ، 20 ، 25 ، 30 ، 35]} df = pd.dataframe (ڈیٹا)#"
    },
    {
        "Question": "آپ ڈیٹا فریم میں کالموں کے مابین ارتباط کا حساب کیسے لگاتے ہیں؟",
        "Answer": "ڈیٹا فریم میں کالموں کے مابین ارتباط کا حساب لگانے کے ل you ، آپ پانڈوں میں کور () کا طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# ایک ڈیٹا فریمیٹا = {'کالم 1' بنائیں: [1 ، 2 ، 3 ، 4 ، 5] ، 'کالم 2': [2 ، 4 ، 6 ، 8 ، 10] ، 'کالم 3': [3 ، 6 ، 9 ، 12 ، 15]} df = pd.dataframe (ڈیٹا)# ارتباط میٹرکسکوریلیشن_میٹرکس = df.corr () کا حساب لگائیں اس مثال میں ، `کور"
    },
    {
        "Question": "آپ ڈیٹا فریم میں کالم کے مجموعی رقم کا حساب کیسے لگاتے ہیں؟",
        "Answer": "کسی ڈیٹا فریم میں کالم کے مجموعی مجموعہ کا حساب لگانے کے ل you ، آپ پانڈوں میں کمم () طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT پانڈاس PD# ایک ڈیٹا فریمیٹا = {'کالم 1' بنائیں: [1 ، 2 ، 3 ، 4 ، 5]} df = pd.dataframe (اعداد و شمار)# کالم ڈی ایف کے جمع شدہ رقم کا حساب لگائیں ['cumulativesum'] = df [' کالم 1 ']. cumsum () اس مثال میں ، cumsum () کے طریقہ کار کو ڈیٹا فریم DF کے' کالم 1 'کالم پر کہا جاتا ہے۔cumsum () کا طریقہ مخصوص کالم میں اقدار کی مجموعی رقم کا حساب لگاتا ہے۔ اس کے نتیجے میں مجموعی رقم ڈیٹا فریم DF میں 'cumulativesum' نامی ایک نئے کالم کو تفویض کی گئی ہے۔ہر ایک"
    },
    {
        "Question": "آپ ڈیٹا فریم میں کالم میں رولنگ ونڈو فنکشن کا اطلاق کیسے کرتے ہیں؟",
        "Answer": "ڈیٹا فریم میں کالم میں رولنگ ونڈو فنکشن لگانے کے ل you ، آپ پانڈوں میں رولنگ () کا طریقہ استعمال کرسکتے ہیں۔رولنگ () کا طریقہ ایک مخصوص سائز کی رولنگ ونڈو تشکیل دیتا ہے اور آپ کو ونڈو پر مختلف افعال لگانے کی اجازت دیتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT پانڈاس PD# ایک ڈیٹا فریمیٹا = {'کالم 1' بنائیں: [1 ، 2 ، 3 ، 4 ، 5]} df = pd.dataframe (ڈیٹا)# رولنگ ونڈو فنکشن ونڈو_سائز = 3df ['رولنگ مین'] = df [' کالم 1 ']."
    },
    {
        "Question": "آپ ڈیٹا فریم میں عددی کالموں کو معمول پر/معیاری بناتے ہیں؟",
        "Answer": "ڈیٹا فریم میں عددی کالموں کو معمول پر لانے یا معیاری بنانے کے ل you ، آپ اسکلرن.پروسیسنگ ماڈیول میں پری پروسیسنگ افعال استعمال کرسکتے ہیں۔خاص طور پر ، آپ عام ہونے کے لئے من میکس اسکیلر یا معیاری کاری کے لئے اسٹینڈرڈس اسکیلر کا استعمال کرسکتے ہیں۔یہاں ایک ڈیٹا فریم میں عددی کالموں پر معمول کے مطابق اور معیاری کاری کرنے کی ایک مثال ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور PDFROM SKLEREN.Preprocessing درآمد MINMAXCALER ، اسٹینڈرڈس اسکیلر# ایک ڈیٹا فریمیٹا = {'کالم 1' بنائیں: [1 ، 2 ، 3 ، 4 ، 5].df.colums)# عددی کالم اسکیلر = اسٹینڈرڈس اسکیلر () df_standardized = pd.dataframe (scaler.fit_transform (df) ، کالم = df.columns) `` `` معیاری بنائیں۔"
    },
    {
        "Question": "آپ پانڈوں میں ملٹی لیول انڈیکسنگ کو کس طرح سنبھالتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ ملٹی لیول انڈیکسنگ کو سنبھال سکتے ہیں ، جسے ملٹی انڈیکس کلاس کا استعمال کرتے ہوئے ، ہائیرارکیکل انڈیکسنگ بھی کہا جاتا ہے۔ملٹی لیول انڈیکسنگ آپ کو قطار اور کالم لیبل کی ایک سے زیادہ سطحوں کی اجازت دیتا ہے ، جو منظم کرنے کا ایک طریقہ فراہم کرتا ہے"
    },
    {
        "Question": "آپ کس طرح ڈور کے کالم کو پانڈوں میں ڈیٹ ٹائم آبجیکٹ میں تبدیل کرتے ہیں؟",
        "Answer": "پانڈوں میں ڈایٹ ٹائم آبجیکٹ میں ڈور کے کالم کو تبدیل کرنے کے ل you ، آپ ٹو_ڈیٹ ٹائم () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن کسی تاریخ یا وقت کی سٹرنگ نمائندگی کو تجزیہ کرتا ہے اور اسے ڈیٹ ٹائم آبجیکٹ میں تبدیل کرتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس بطور PD# اسٹرنگسڈیٹا کے کالم کے ساتھ ڈیٹا فریم بنائیں ="
    },
    {
        "Question": "\"آپ پانڈوں میں سٹرنگ ہیرا پھیری کو کس طرح سنبھالتے ہیں (جیسے ، سبسٹرنگز نکالنے)؟\"",
        "Answer": "پانڈاس سٹرنگ ہیرا پھیری کے متعدد طریقے مہیا کرتا ہے جو تار پر مشتمل کالموں پر سٹرنگ آپریشن کو سنبھالنے کے لئے استعمال ہوسکتے ہیں۔یہ طریقے .str لوازمات کے ذریعے دستیاب ہیں ، جو آپ کو مختلف تار کے کام انجام دینے کے ل string سٹرنگ طریقوں کے سوٹ تک رسائی حاصل کرنے کی سہولت دیتا ہے۔پانڈوں میں سٹرنگ ہیرا پھیری کو کس طرح سنبھالنے کی ایک مثال یہ ہے: PD# کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس اسٹرنگس ڈیٹا = {'سٹرنگ' کے کالم کے ساتھ ایک ڈیٹا فریم بنائیں: ['ہیلو ، ورلڈ!' ، 'ازگر بہت اچھا ہے' ، 'پانڈاس بہت اچھا ہے'']} df = pd.dataframe (ڈیٹا)# کالم ڈی ایف [' سبسٹرنگ '] = df [' string ']. str.extract (' (\\ w+) ') df [' placease '] = df [')'سٹرنگ'].str.contains ('عظیم')# کالم ڈی ایف میں ایک سٹرنگ کو تبدیل کریں"
    },
    {
        "Question": "آپ پانڈوں میں ٹیکسٹ سرچ اور مماثلت کیسے انجام دیتے ہیں؟",
        "Answer": "پانڈوں میں ٹیکسٹ سرچ اور مماثلت انجام دینے کے ل you ، آپ .str لوازمات کے ذریعہ فراہم کردہ مختلف تار کے طریقوں اور باقاعدہ تاثرات استعمال کرسکتے ہیں۔یہاں کچھ عام تکنیکیں ہیں: عین مطابق مماثلت: آپ == آپریٹر یا .eq () طریقہ کا استعمال کرتے ہوئے عین مطابق میچوں کی جانچ کرسکتے ہیں۔مثال کے طور پر: پائیٹون کوپی کوڈیمپورٹ پانڈاس AS"
    },
    {
        "Question": "آپ پانڈوں میں اعلی کارڈنلٹی کے ساتھ زمرہ دار ڈیٹا کو کس طرح سنبھالتے ہیں؟",
        "Answer": "پانڈوں میں اعلی کارڈنلٹی کے ساتھ زمرہ دار ڈیٹا کو سنبھالنا مشکل ہوسکتا ہے کیونکہ اس سے میموری کی نا اہلی اور سست کارکردگی کا باعث بن سکتا ہے۔اعلی کارڈنلٹی سے مراد ایک بڑی تعداد میں منفرد قسموں یا ایک متغیر متغیر میں سطح ہے۔پانڈوں میں اعلی کارڈنلٹی کے ساتھ زمرہ دار اعداد و شمار کو سنبھالنے کے لئے کچھ تکنیک یہ ہیں: زمرے کی تعداد کو کم کریں: اگر اعلی کارڈنلٹی بڑی تعداد میں نایاب یا کبھی کبھار زمرے کی وجہ سے ہے تو ، آپ انہیں ایک علیحدہ زمرے میں گروپ کرنے یا اسی طرح کے ساتھ جوڑنے پر غور کرسکتے ہیں۔اقسام.اس سے اہم معلومات کو حاصل کرتے ہوئے کارڈنلٹی کو کم کرنے میں مدد مل سکتی ہے۔"
    },
    {
        "Question": "آپ دو ڈیٹا فریموں کے مابین عنصر کے حساب سے موازنہ کیسے کرتے ہیں؟",
        "Answer": "پانڈوں میں دو ڈیٹا فریموں کے مابین عنصر کے لحاظ سے موازنہ کرنے کے ل you ، آپ موازنہ آپریٹرز (== ، استعمال کرسکتے ہیں"
    },
    {
        "Question": "آپ ڈیٹا فریم میں متوازن کلاسوں کو کس طرح سنبھالتے ہیں؟",
        "Answer": "ڈیٹا فریم میں عدم توازن کی کلاسوں کو سنبھالنا مشین لرننگ میں ایک اہم کام ہے جب ہدف متغیر میں نمایاں طور پر غیر مساوی طبقاتی تقسیم ہوتی ہے۔متوازن کلاسز متعصب ماڈلز کا باعث بن سکتی ہیں جو اکثریتی طبقے کے حق میں ہیں اور اقلیتی طبقے پر ناقص کارکردگی کا حامل ہے۔متوازن کلاسوں کو سنبھالنے کے لئے یہاں کچھ تکنیکیں ہیں: ڈیٹا کو دوبارہ ترتیب دینے: ڈیٹا کو دوبارہ ترتیب دینے کی تکنیک میں یا تو اقلیتی طبقے کی حد سے تجاوز کرنا یا متوازن طبقاتی تقسیم کے حصول کے لئے اکثریتی طبقے کو کم کرنا شامل ہے۔اوورمپلنگ کے طریقے اقلیتی طبقے کے لئے مصنوعی نمونے تیار کرتے ہیں ، جیسے سموٹ (مصنوعی اقلیت سے زیادہ نمونے لینے کی تکنیک) ، اڈاسین (انکولی مصنوعی نمونے لینے) ، یا بے ترتیب اوور سمپلنگ۔انڈرسمپلنگ کے طریقوں نے اکثریتی طبقے میں نمونوں کی تعداد کو کم کیا ، جیسے بے ترتیب انڈرسمپلنگ یا کلسٹر پر مبنی انڈرسمپلنگ۔ان تکنیکوں کا مقصد طبقے کی تقسیم کو متوازن کرنا اور دونوں طبقات کو زیادہ مساوی نمائندگی فراہم کرنا ہے۔"
    },
    {
        "Question": "آپ ڈیٹا فریم میں کالم کی چلتی اوسط کا حساب کیسے لگاتے ہیں؟",
        "Answer": "کسی ڈیٹا فریم میں کالم کی چلتی اوسط کا حساب لگانے کے ل you ، آپ پانڈوں کے ذریعہ فراہم کردہ رولنگ () فنکشن استعمال کرسکتے ہیں۔رولنگ () فنکشن آپ کو کالم پر رولنگ ونڈو بنانے اور مختلف جمع کرنے کے افعال کا اطلاق کرنے کی اجازت دیتا ہے ، جس میں چلتی اوسط کا حساب کتاب بھی شامل ہے۔یہ ہے کہ آپ چلتی اوسط کا حساب کیسے لگاسکتے ہیں: پی ڈی کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس PD# عددی اقدار کے کالم کے ساتھ ایک ڈیٹا فریم بنائیں = {'ویلیو': [10 ، 15 ، 20 ، 25 ، 30]} df = pd.dataframe (ڈیٹا)# رولنگ () فنکشن ونڈو_سائز = 3moving_average = df ['ویلیو'] کا استعمال کرتے ہوئے چلتی اوسط کا حساب لگائیں۔ رولنگ (ونڈو = ونڈو_سائز) .مین () اس مثال میں ، ہم ایک کالم کے ساتھ ایک ڈیٹا فریم ڈی ایف بناتے ہیں جس میں 'ویلیو' ہوتا ہے جس میں 'ویلیو' ہوتا ہے۔اقدار۔حرکت پذیر کا حساب لگانے کے لئے"
    },
    {
        "Question": "آپ پانڈوں میں ٹائم سیریز کے ڈیٹا کو کس طرح سنبھالتے ہیں؟",
        "Answer": "ٹائم سیریز کے ڈیٹا کو سنبھالنے کے لئے پانڈاس بہترین فعالیت فراہم کرتا ہے۔"
    },
    {
        "Question": "آپ بڑے ڈیٹاسیٹس کے لئے پانڈوں میں میموری کی اصلاح کو کس طرح سنبھالتے ہیں؟",
        "Answer": "جب پانڈوں میں بڑے ڈیٹاسیٹس کے ساتھ کام کرتے ہو تو ، نظام کے وسائل کے موثر استعمال کو یقینی بنانے کے لئے میموری کی اصلاح بہت ضروری ہے۔پانڈوں میں میموری کی اصلاح کو سنبھالنے کے لئے کچھ تکنیک یہ ہیں: ڈیٹا کی اقسام کی اصلاح: اپنے کالموں کے لئے مناسب ڈیٹا کی اقسام کا انتخاب میموری کے استعمال کو نمایاں طور پر کم کرسکتا ہے۔پانڈاس مختلف سائز کے ساتھ ڈیٹا کی مختلف اقسام فراہم کرتا ہے۔مثال کے طور پر ، انٹیجر اقدار کے لئے INT64 کے بجائے INT8 کا استعمال کرنا یا فلوٹ 64 کے بجائے فلوٹ 32 کا استعمال فلوٹنگ پوائنٹ نمبر کے لئے فلوٹ 64 میموری کی کھپت کو کم کرسکتا ہے۔آپ کالموں کو واضح طور پر مناسب اعداد و شمار کی اقسام میں تبدیل کرنے کے لئے ASTYPE () طریقہ استعمال کرسکتے ہیں۔مثال کے طور پر: پائیٹون کوپی کوڈ# کالم کو چھوٹے انٹیجر ڈیٹا ٹائپڈ میں تبدیل کریں ['کالم']"
    },
    {
        "Question": "\"آپ پانڈوں (جیسے ، JSON ، XML) میں ڈیٹا انکوڈنگ اور ضابطہ کشائی کو کس طرح سنبھالتے ہیں؟\"",
        "Answer": "پانڈاس ڈیٹا انکوڈنگ اور ضابطہ کشائی کو سنبھالنے کے لئے متعدد طریقے مہیا کرتا ہے ، جس میں JSON اور XML فارمیٹس شامل ہیں۔یہاں آپ ان فارمیٹس کے ساتھ پانڈوں میں کس طرح کام کرسکتے ہیں: JSON: JSON فارمیٹ میں ڈیٹا کو انکوڈ کرنے یا ڈیکوڈ کرنے کے لئے ، پانڈاس مندرجہ ذیل طریقے فراہم کرتے ہیں: TO_JSON (): یہ طریقہ ایک پانڈاس آبجیکٹ (جیسے ، ڈیٹا فریم ، سیریز) کو JSON تار میں تبدیل کرتا ہے۔پائیتھون کوپی کوڈ# ڈیٹا فریم کو jsonjson_data = df.to_json () read_json () میں تبدیل کریں: یہ طریقہ JSON فائل یا JSON سٹرنگ کو پڑھتا ہے اور ایک ڈیٹا فیم.پیتھون کوپی کوڈ# JSON فائل کو ڈیٹا فیمڈف = pd.read_json ('ڈیٹا. joson' میں پڑھیں۔) آپ انکوڈنگ یا ضابطہ کشائی کے عمل کو اپنی مرضی کے مطابق بنانے کے ل these ان طریقوں میں اضافی پیرامیٹرز کی وضاحت کرسکتے ہیں ، جیسے اورینٹ ، لائنز ، کمپریشن ، اور بہت کچھ۔ان پیرامیٹرز کے بارے میں مزید تفصیلات کے لئے پانڈاس دستاویزات کا حوالہ دیں۔"
    },
    {
        "Question": "آپ پانڈوں میں طریقہ کار زنجیر کا استعمال کرتے ہوئے کوڈ کی ایک ہی لائن میں ایک سے زیادہ کارروائیوں کو کس طرح سنبھالتے ہیں؟",
        "Answer": "طریقہ زنجیر پانڈوں میں ایک طاقتور تکنیک ہے جو آپ کو کوڈ کی ایک لائن میں ڈیٹا فریم یا سیریز پر متعدد آپریشن کرنے کی اجازت دیتی ہے۔اس سے کوڈ پڑھنے کی اہلیت اور اجتماعی پن میں اضافہ ہوتا ہے۔یہاں ایک مثال ہے جو یہ ظاہر کرتی ہے کہ پانڈوں میں طریقہ کار کی زنجیروں کو کس طرح استعمال کرنا ہے: PD## مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'A': [1 ، 2 ، 3] ، 'B': [4 ، 5 ، 6]، 'C': [7 ، 8 ، 9]})# طریقہ کار زنجیروں کی مثال"
    },
    {
        "Question": "آپ پانڈوں میں کراس ٹیبلولیشن کیسے انجام دیتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ کراس ٹیبلولیشن انجام دے سکتے ہیں ، جسے کراسسٹاب () فنکشن کا استعمال کرتے ہوئے ، ہنگامی جدول کے نام سے بھی جانا جاتا ہے۔کراس ٹیبولیشن آپ کو ڈیٹا فریم میں دو یا زیادہ زمرہ متغیر کے مابین تعلقات کا تجزیہ کرنے کی اجازت دیتا ہے۔یہاں پانڈوں میں کراسسٹاب () فنکشن کو کس طرح استعمال کرنے کی ایک مثال ہے: پی ڈی کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس کو PD# مثال کے طور پر ڈیٹافریمڈف = PD.Dataframe ({'صنف': ['مرد' ، 'مرد' ، 'مرد' ، 'عورت' ،'خواتین'] ، 'عمر': [25 ، 30 ، 35 ، 25 ، 30] ، 'قومیت': ['USA' ، 'USA' ، 'کینیڈا' ، 'کینیڈا' ، 'USA']})# پرفارمکراس-ٹیبولیشن کراس_ٹیب = پی ڈی کروسسٹاب (ڈی ایف ['صنف'] ، ڈی ایف ['قومیت'])# کراس ٹیبولیشن پرنٹ (کراس_ٹاب) پرنٹ کریں ``"
    },
    {
        "Question": "آپ پانڈوں میں ڈیٹا کی جمع اور دوبارہ ترتیب دینے کو کس طرح سنبھالتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ مختلف افعال اور طریقوں کا استعمال کرتے ہوئے ڈیٹا کی جمع اور دوبارہ ترتیب دینے کو سنبھال سکتے ہیں۔آئیے دو اہم تکنیکوں کو دریافت کریں: گروپ بائی () کے ساتھ ڈیٹا جمع کرنے اور دوبارہ نمونہ () کے ساتھ ڈیٹا کو دوبارہ ترتیب دینا۔گروپ کردہ ڈیٹا۔یہاں ایک مثال یہ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'زمرہ': ['A' ، 'A' ، 'B' ، 'B' ، 'A'] ، 'قدر': [10، 20 ، 30 ، 40 ، 50]})# گروپ کے اعداد و شمار 'زمرہ' کے ذریعہ اور 'ویلیو' گروپڈ_ڈیٹا = df.groupby ('کے مجموعہ کا حساب لگائیں ('"
    },
    {
        "Question": "آپ پانڈوں میں ڈیٹا کی تبدیلی اور فیچر انجینئرنگ کو کس طرح سنبھالتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ مختلف طریقوں اور افعال کا استعمال کرتے ہوئے ڈیٹا کی تبدیلی اور فیچر انجینئرنگ کو سنبھال سکتے ہیں۔یہاں کچھ عام تکنیک ہیں: 1۔ایک یا زیادہ کالموں یا پورے ڈیٹا فریم پر کسٹم فنکشن کا اطلاق کرنے کے لئے DATAYOU پر افعال کا اطلاق (استعمال () فنکشن کا استعمال کرسکتے ہیں۔اس سے آپ کو اپنے ڈیٹا پر پیچیدہ تبدیلیاں انجام دینے کی سہولت ملتی ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس بطور PD#کالم 'a'df [' a_squared '] = df [' a '] میں اقدار۔"
    },
    {
        "Question": "آپ پانڈوں میں ڈیٹا کو معمول پر لانے اور اسکیلنگ کو کس طرح سنبھالتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ مختلف طریقوں اور افعال کا استعمال کرتے ہوئے ڈیٹا کو معمول پر لانے اور اسکیلنگ کو سنبھال سکتے ہیں۔یہاں دو عام تکنیک ہیں: 1۔من میکس اسکیلنگ (نارملائزیشن) من میکس اسکیلنگ ، جسے معمول کے نام سے بھی جانا جاتا ہے ، اعداد و شمار کو ایک خاص حد میں ، عام طور پر 0 اور 1 کے درمیان بازیافت کرتا ہے ، آپ کم سے کم میکس اسکیلنگ انجام دینے کے لئے سکیٹ لرن لائبریری سے من میکس اسکیلر کلاس استعمال کرسکتے ہیں۔یہاں ایک مثال یہ ہے: PDFROMESSSSCALER# PDFROMOSSING.Preprocessing درآمد MINMAXSCALER# مثال کے ساتھ اعداد و شمار کے کالم ایس ڈی ایف = PD.Dataframe ({'A': [10 ، 20 ، 30] ، 'بی': [5 ، 15 ، 25]})# minmaxscalerscaler = minmaxscaler ()# فٹ اور ڈیٹا فریمڈف_سکلڈ کو تبدیل کریں"
    },
    {
        "Question": "آپ پانڈوں میں ڈیٹا بائننگ اور صوابدید کو کس طرح سنبھالتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ مختلف طریقوں اور افعال کا استعمال کرتے ہوئے ڈیٹا بائننگ اور صوابدیدی کو سنبھال سکتے ہیں۔یہاں دو عام تکنیک ہیں: 1۔کٹ اور QCUT فنکشنز کٹ () اور QCUT () پانڈوں میں افعال کو مستقل متغیرات کو مجرد وقفوں یا زمرے میں باندھنے یا عکاسی کرنے کے لئے استعمال کیا جاسکتا ہے۔یہ اعداد و شمار کو مساوی چوڑائی کے ٹوکریوں میں تقسیم کرتا ہے۔ کیو کٹ () فنکشن: یہ فنکشن ڈیٹا کو کوانٹائل میں تقسیم کرتا ہے ، جس سے ہر بن میں تقریبا برابر تعداد میں ڈیٹا پوائنٹس کو یقینی بنایا جاتا ہے۔بن کناروں کا تعین اعداد و شمار کی تقسیم کی بنیاد پر کیا جاتا ہے۔ یہاں کی ایک مثال ہے جو ان افعال کے استعمال کو ظاہر کرتی ہے: کاپی کوڈ"
    },
    {
        "Question": "آپ پانڈوں میں ٹائم زون کے تبادلوں کو کس طرح سنبھالتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ TZ_CONVERT () اور `کا استعمال کرتے ہوئے ٹائم زون کے تبادلوں کو سنبھال سکتے ہیں"
    },
    {
        "Question": "\"ڈیٹا فریم میں کالم کے وسط ، میڈین اور موڈ کا حساب لگانے کے لئے کوڈ لکھیں۔\"",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ڈیٹا فریم میں کالم کے وسط ، میڈین ، اور موڈ کا حساب لگانے کے لئے یہاں ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'ویلیو': [10 ، 20 ، 30 ، 30 ، 30 ، 40 40.). ویلیوز [0] پرنٹ (\"مطلب:\" ، مطلب) پرنٹ (\"میڈین:\" ، میڈین) پرنٹ (\"موڈ:\" ، موڈ) اس مثال میں ، ہمارے پاس 'ویلیو' نامی کالم والا ڈیٹا فریم ہے۔ہم کا مطلب () طریقہ استعمال کرتے ہیں"
    },
    {
        "Question": "متعدد شرائط پر مبنی ڈیٹا فریم میں قطاروں کو فلٹر کرنے کے لئے کوڈ لکھیں۔",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے متعدد شرائط پر مبنی ڈیٹا فریم میں قطاروں کو فلٹر کرنے کے لئے یہاں ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس ڈیٹا فریمڈف = pd.dataframe ({'نام': ['ایلس' ، 'چارلی' ، 'ڈیو'] ،' عمر ': [25 ، 30 ، 35 ، 40] ،' شہر ': [' نیویارک '،' لندن '،' پیرس '،' ٹوکیو ']})# متعدد شرائط فلٹرڈ_ڈیف = ڈی ایف پر مبنی فلٹر قطاریں۔شہر '۔ہم دو شرائط کی بنیاد پر قطار کو فلٹر کرنا چاہتے ہیں: 30 سے زیادہ عمر اور شہر 'لندن' کے برابر۔ہم قوسین کے اندر کی شرائط کی وضاحت کے لئے [] انڈیکسنگ آپریٹر کا استعمال کرتے ہیں ، جسے \"اور\" حالت کے لئے اینڈ آپریٹر کے ذریعہ الگ کیا جاتا ہے۔ آؤٹ پٹ ہوگا: ``"
    },
    {
        "Question": "ڈیٹا فریم میں کسی دوسرے کالم کے ذریعہ گروپ کردہ کالم میں اقدار کے جوڑے کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ڈیٹا فریم میں کسی دوسرے کالم میں گروپ کردہ کالم میں اقدار کے جوڑے کا حساب لگانے کے لئے یہاں ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'شہر': ['نیو یارک' ، 'لندن'، 'پیرس' ، 'لندن' ، 'پیرس'] ، 'آبادی': [8500000 ، 8900000 ، 2200000 ، 8300000 ، 2400000]})# 'آبادی' کالم میں 'سٹی' ایس یو ایم_بی_سیٹی = ڈی ایف کے ذریعہ گروپوں میں اقدار کی رقم کا حساب لگائیں۔. گروپ بائی ('شہر') ['آبادی']۔ رقم () پرنٹ (SUM_BY_CITY) اس مثال میں ، ہمارے پاس کالم 'شہر' اور 'آبادی' کے ساتھ ایک ڈیٹا فریم ہے۔ہم 'سٹی' کالم کے ذریعہ گروپ کردہ آبادی کی اقدار کی رقم کا حساب لگانا چاہتے ہیں۔ہم 'سٹی' کالم کے ذریعہ ڈیٹا فریم کو گروپ کرنے کے لئے گروپ بائی () کے طریقہ کار کا استعمال کرتے ہیں اور پھر اقدار کی رقم کا حساب لگانے کے لئے رقم () طریقہ استعمال کریں۔"
    },
    {
        "Question": "ڈیٹا فریم کو لغت میں تبدیل کرنے کے لئے کوڈ لکھیں۔",
        "Answer": "یقینا!یہاں ایک مثال ہے"
    },
    {
        "Question": "ڈیٹا فریم کو JSON سٹرنگ میں تبدیل کرنے کے لئے کوڈ لکھیں۔",
        "Answer": "یقینا!یہاں ڈیٹا فریم کو JSON سٹرنگ میں تبدیل کرنے کے لئے ایک مثال کا کوڈ ہے جس کا استعمال کرتے ہوئے پانڈوں کا استعمال کرتے ہوئے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹی فریمف = PD.Dataframe ({'نام': ['ایلس' ، 'چارلی'] ، 'عمر' '.اس مثال میں ، ہمارے پاس کالم 'نام' ، 'عمر' ، اور 'شہر' کے ساتھ ایک ڈیٹا فریم ہے۔ہم ڈیٹا فریم کے TO_JSON () کا طریقہ استعمال کرتے ہیں تاکہ اسے JSON تار میں تبدیل کیا جاسکے۔اورینٹ = 'ریکارڈز' دلیل کے نتیجے میں JSON سٹرنگ کی شکل کی وضاحت کی گئی ہے ، جہاں ڈیٹا فریم کی ہر قطار JSON ریکارڈ بن جاتی ہے۔ آؤٹ پٹ ہوگا: JSONCOPY کوڈ [{\"نام\": \"ایلس\" ، \"عمر\": 25 ،\"سٹی\": \"نیو یارک\"} ، {\"نام\": \"باب\" ، \"عمر\": 30 ، \"شہر\": \""
    },
    {
        "Question": "ڈیٹا فریم میں کالم کی مجموعی مصنوعات کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ڈیٹا فریم میں کالم کی مجموعی مصنوعات کا حساب لگانے کے لئے یہاں ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس ڈیٹا فریمڈف = pd.dataframe ({'ویلیو': [2 ، 3 ، 4 ، 5]})# مجموعی حساب کتاب کریں'ویلیو' کالمکومولیٹو_ پروڈکٹ = ڈی ایف ['ویلیو'] کی مصنوعات۔ کمپروڈ () پرنٹ (مجموعی_ پروڈکٹ) اس مثال میں ، ہمارے پاس 'ویلیو' نامی کالم والا ڈیٹا فریم ہے۔ہم کمپرڈ () طریقہ استعمال کرتے ہیں"
    },
    {
        "Question": "ڈیٹا فریم کے کالم میں لگاتار قطاروں کے درمیان فرق کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "یقینا!ڈیٹا فریم کے کالم میں لگاتار قطاروں کے درمیان فرق کا حساب لگانے کے لئے ایک مثال کوڈ یہ ہے"
    },
    {
        "Question": "ڈیٹا فریم کی ہر قطار میں کسی فنکشن کو لاگو کرنے کے لئے کوڈ لکھیں اور نتائج کی بنیاد پر ایک نیا کالم بنائیں۔",
        "Answer": "یقینا!ڈیٹا فریم کی ہر قطار میں کسی فنکشن کو لاگو کرنے اور پانڈوں کا استعمال کرتے ہوئے نتیجہ کی بنیاد پر ایک نیا کالم بنانے کے لئے ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'نام': ['ایلس' ، 'باب '،' چارلی '] ،' عمر ': [25 ، 30 ، 35]})# ہر راؤ ڈیف کے حساب کتاب_کیٹری (عمر (عمر) پر درخواست دینے کے لئے ایک فنکشن کی وضاحت کریں"
    },
    {
        "Question": "کسی دوسرے کالم کو وزن کے طور پر استعمال کرتے ہوئے کسی ڈیٹا فریم میں کالم کی وزن اوسط کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "یقینا!ڈیٹا فریم میں کالم کی وزن کے اوسط کا حساب لگانے کے لئے یہاں ایک مثال کوڈ ہے جس کا استعمال کسی دوسرے کالم کا استعمال کرتے ہوئے پانڈوں کا استعمال کرتے ہوئے ہوتا ہے: پیڈون کوپی کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹا فریمڈف = pd.dataframe ({'اقدار': [10 ، 20 ، 30 ، 40]، 'وزن': [0.2 ، 0.3 ، 0.4 ، 0.1]})# 'وزن' کالم کے وزن کے اوسط 'کالم' کالم وائٹ_اوریج = (DF ['اقدار'] * DF ['وزن'])۔ رقم () ())۔ رقم ()/ df ['وزن']۔ رقم () پرنٹ (وزن والے_اوریج) اس مثال میں ، ہمارے پاس کالم 'اقدار' اور 'وزن' کے ساتھ ایک ڈیٹا فریم ہے۔ہم 'وزن' کالم کا استعمال کرتے ہوئے 'اقدار' کالم کی وزن اوسط کا حساب لگاتے ہیں۔ہم 'ویلیوز' کالم میں ہر قدر کو 'ویٹ' کالم میں اسی قدر کے ساتھ ضرب دیتے ہیں ، مصنوعات کا خلاصہ کرتے ہیں ،"
    },
    {
        "Question": "متعلقہ کالم کے وسط کے ساتھ ڈیٹا فریم میں گمشدہ اقدار کو تبدیل کرنے کے لئے کوڈ لکھیں۔",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے متعلقہ کالم کے وسط کے ساتھ کسی ڈیٹا فریم میں گمشدہ اقدار کو تبدیل کرنے کے لئے ایک مثال کوڈ ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور PDimport numpy کے طور پر NP# مثال کے طور پر گمشدہ قدروں کے ساتھ ڈیٹا فریم ({'A': [1 ، 2 ، 2 ، [1 ، 2 ، 2 ، [1 ، 2 ،np.nan ، 4 ، 5] ، 'B': [6 ، NP.Nan ، 8 ، NP.Nan ، 10]})# گمشدہ اقدار کو کالم کے ذریعہ تبدیل کریں۔DF_FLED) اس مثال میں ، ہمارے پاس کالم 'A' اور 'B' کے ساتھ ایک ڈیٹا فریم ہے ، جہاں کچھ اقدار NP.nan کی نمائندگی کرتے ہیں۔ہم گمشدہ اقدار کو متعلقہ کالم کے وسط سے تبدیل کرنے کے لئے ڈیٹا فریم کے فلنا () طریقہ کا استعمال کرتے ہیں"
    },
    {
        "Question": "\"ڈیٹا فریم میں ڈیٹ ٹائم اقدار کے کالم سے سال ، مہینہ اور دن نکالنے کے لئے کوڈ لکھیں۔\"",
        "Answer": "یقینا!یہاں ایک مثال کوڈ ہے جو سال ، مہینہ اور دن کو ڈیٹ ٹائم اقدار کے کالم سے نکالنے کے لئے ہے"
    },
    {
        "Question": "ڈیٹا فریم میں متعدد کالموں کے مابین ارتباط میٹرکس کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ایک ڈیٹا فریم میں متعدد کالموں کے مابین ارتباط میٹرکس کا حساب لگانے کے لئے ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'A': [1 ، 2 ، 3 ، 4 ، 5] ، 'بی۔': [6 ، 7 ، 8 ، 9 ، 10] ،' C ': [11 ، 12 ، 13 ، 14 ، 15]})# اس مثال کے طور پر ، ہم ارتباط میٹرکسکوریلیشن_میٹرکس = df.corr () پرنٹ (ارتباط_میٹرکس) کا حساب لگائیں۔کالم 'A' ، 'B' ، اور 'C' کے ساتھ ڈیٹا فریم رکھیں۔ہم ان کالموں کے مابین ارتباط میٹرکس کا حساب لگانے کے لئے ڈیٹا فریم کے CORR () طریقہ کار کا استعمال کرتے ہیں۔کور () کا طریقہ ان کی اقدار کی بنیاد پر کالموں کے مابین جوڑے کے ارتباط کی گنتی کرتا ہے۔ آؤٹ پٹ ہوگا: سی ایس ایس کوپی کوڈ اے بی سی اے"
    },
    {
        "Question": "کسی دوسرے کالم کی حالت کی بنیاد پر ڈیٹا فریم میں نیا کالم بنانے کے لئے کوڈ لکھیں۔",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے کسی دوسرے کالم کی حالت پر مبنی ڈیٹا فریم میں ایک نیا کالم بنانے کے لئے ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس ڈیٹا فریمڈف = PD.Dataframe ({'اقدار': [10 ، 20 ، 30 ، 40 ، 50]})# 'اقدار' کالم ڈی ایف ['زمرہ'] کی حالت پر مبنی ایک نیا کالم 'زمرہ' بنائیں۔) اس مثال میں ، ہمارے پاس 'اقدار' کے نام سے کالم والا ڈیٹا فریم ہے۔ہم 'کی حالت پر مبنی ایک نیا کالم' زمرہ 'تشکیل دیتے ہیں'"
    },
    {
        "Question": "دو ڈیٹا فریموں کو عمودی طور پر جوڑنے کے لئے کوڈ لکھیں۔",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے عمودی طور پر دو ڈیٹا فریموں کو ہم آہنگ کرنے کے لئے ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframesdf1 = pd.dataframe ({'A': [1 ، 2 ، 3] ، 'B': [4 ، 5 ، 6]}) df2 = pd.dataframe ({'a': [7 ، 8 ، 9] ، 'بی': [10 ، 11 ، 12]})# ڈیٹا فیموں کو عمودی طور پر ڈیف_کونکاٹینیٹڈ = پی ڈی ڈاٹ کوکیٹ ([ڈی ایف 1 ، ڈی ایف 2]) پرنٹ کریں(df_concatenated) اس مثال میں ، ہمارے پاس ایک ہی کالم کے نام 'A' اور 'B' کے ساتھ دو ڈیٹا فیمس DF1 اور DF2 ہیں۔عمودی طور پر ان کو جوڑنے کے ل we ، ہم PD.CONCAT () فنکشن کا استعمال کرتے ہیں اور ڈیٹا فریموں کو بطور فہرست پاس کرتے ہیں۔پہلے سے طے شدہ طور پر ، pd.concat () ایک کارکردگی کا مظاہرہ کرتا ہے"
    },
    {
        "Question": "ڈیٹا فریم میں ڈور کے کالم کو چھوٹے کے کالم میں تبدیل کرنے کے لئے کوڈ لکھیں۔",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ڈیٹا فریم میں ڈور کے کالم کو چھوٹے کے کالم میں تبدیل کرنے کے لئے ایک مثال کوڈ: PDHONCOPY کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹا فریمف"
    },
    {
        "Question": "ڈیٹا فریم میں دو کالموں کے مابین یوکلیڈین فاصلے کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "ڈیٹا فریم میں دو کالموں کے مابین یکلیڈین فاصلے کا حساب لگانے کے ل you ، آپ نیپی لائبریری استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور پی ڈیمپورٹ نیمپی بطور این پی#، 10]})# 'x' اور 'y' کالم سیوکلیڈین_ڈیسٹنس = np.linalg.norm (df ['x'] - df ['y']) پرنٹ (euclidean_distance) کے درمیان یوکلیڈین فاصلے کا حساب لگائیں ، اس مثال میں ، ہمارے پاس ایک ہے۔کالم 'X' اور 'y' کے ساتھ ڈیٹا فریم۔ہم 'X' اور 'کے درمیان یوکلیڈین فاصلے کا حساب لگانے کے لئے NP.LINLG.Norm () NUMPY سے فنکشن کا استعمال کرتے ہیں۔"
    },
    {
        "Question": "سٹرنگ کالم کی لمبائی کی بنیاد پر ڈیٹا فریم میں قطاروں کو فلٹر کرنے کے لئے کوڈ لکھیں۔",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے سٹرنگ کالم کی لمبائی پر مبنی ڈیٹا فریم میں قطاروں کو فلٹر کرنے کے لئے ایک مثال کا کوڈ یہاں ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'متن': ['ہیلو' ، 'ورلڈ' ، 'اوپنائی'،' ازگر ']})#' ٹیکسٹ 'کالم فلٹرڈ_ ڈی ایف = ڈی ایف [ڈی ایف [ڈی ایف [' ٹیکسٹ '] کی لمبائی پر مبنی فلٹر قطاریں۔ str.len ()> 5] پرنٹ (فلٹرڈ_ ڈی ایف) اس مثال کے طور پر ، ہمارے پاس ایک ڈیٹا فریم ہے جس کے ساتھ ہمارے پاس ایک ڈیٹا فریم ہے۔'متن' نامی ایک کالم جس میں ڈور شامل ہیں۔ہم ہر تار کی لمبائی کا حساب لگانے کے لئے 'ٹیکسٹ' کالم کے .str.len () طریقہ استعمال کرتے ہیں۔اس کے بعد ، ہم قطاروں کو فلٹر کرنے کے لئے ایک شرط لگاتے ہیں جہاں 'ٹیکسٹ' کالم کی لمبائی 5 سے زیادہ ہوتی ہے۔ آؤٹ پٹ ہو گا: مارک ڈاون کاپی کوڈ ٹیکسٹ 2 اوپن آئہیر ، ڈیٹا فریم کی قطاریں فلٹر کی جاتی ہیں جس کی لمبائی کی لمبائی کی بنیاد پر ''۔"
    },
    {
        "Question": "ڈیٹا فریم میں کالم کی مجموعی زیادہ سے زیادہ کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "کسی ڈیٹا فریم میں کالم کی زیادہ سے زیادہ کا حساب لگانے کے ل you ، آپ پانڈوں میں .کومیکس () طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'اقدار': [10 ، 5 ، 5 ، 8 ، 12 ، 6]})# 'اقدار' کالم ڈی ایف ['cumulative_max'] کے مجموعی زیادہ سے زیادہ کا حساب لگائیں۔= df ['values']. cummax () پرنٹ (DF) اس مثال میں ، ہمارے پاس 'اقدار' کے نام سے کالم والا ڈیٹا فریم ہے۔ہم ہر صف میں مجموعی طور پر زیادہ سے زیادہ کا حساب لگانے کے لئے 'اقدار' کالم پر .کومیکس () طریقہ استعمال کرتے ہیں۔ آؤٹ پٹ ہو گا: ریاضی کا کوڈ ویلیوز مجموعی_میکس"
    },
    {
        "Question": "ڈیٹا فریم کو ایکسل فائل میں تبدیل کرنے کے لئے کوڈ لکھیں۔",
        "Answer": "ڈیٹا فریم کو ایکسل فائل میں تبدیل کرنے کے ل you ، آپ پانڈوں میں TO_EXCEL () کا طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'نام': ['ایلس' ، 'باب' ، 'چارلی'] ، 'عمر': [25 ، 30 ، 35]})# ڈیٹا فریم کو ایکسل فائلڈف ڈاٹ ٹی او ایکسسل ('آؤٹ پٹ. ایکس ایل ایس ایکس' ، انڈیکس = غلط) پرنٹ (\"ڈیٹا فریم ایکسل فائل میں محفوظ کیا گیا ہے۔\") میں تبدیل کریں ، اس مثال میں ، ہمارے پاس ڈی ایف نامی ڈیٹا فریم ہے۔ہم ڈیٹا فریم پر TO_EXCEL () کا طریقہ استعمال کرتے ہیں تاکہ اسے ایکسل فائل کے طور پر محفوظ کیا جاسکے۔TO_EXCEL () کی پہلی دلیل فائل کا راستہ اور نام ہے جہاں آپ ایکسل فائل کو محفوظ کرنا چاہتے ہیں۔اس معاملے میں ، ہم اسے \"آؤٹ پٹ. ایکس ایل ایس ایکس\" کے طور پر محفوظ کرتے ہیں۔انڈیکس = جھوٹے پیرامیٹر کا استعمال انڈیکس کالم کو ایکسل فائل میں محفوظ ہونے سے خارج کرنے کے لئے کیا جاتا ہے۔ آؤٹ پٹ یہ ہوگا: سی ایس ایس کوپی کوڈیٹا اے ایف آر اے ایم ایکسل فائل کو محفوظ کیا جاتا ہے۔ کوڈ کو چلانے کے بعد ، \"آؤٹ پٹ. ایکس ایل ایس ایکس\" کے نام سے ایک فائل تشکیل دی جائے گی۔موجودہ ڈائرکٹری ، جس میں ڈیٹا فریم ڈیٹا پر مشتمل ہے"
    },
    {
        "Question": "عام کالم کی بنیاد پر دو ڈیٹا فریموں کو ضم کرنے/ان میں شامل ہونے کے لئے کوڈ لکھیں۔",
        "Answer": "ایک پر مبنی دو ڈیٹا فریموں کو ضم/شامل کرنا/شامل کرنا"
    },
    {
        "Question": "کسی حالت کی بنیاد پر ڈیٹا فریم سے قطاروں کو چھوڑنے کے لئے کوڈ لکھیں۔",
        "Answer": "کسی حالت کی بنیاد پر ڈیٹا فریم سے قطاریں چھوڑنے کے ل you ، آپ پانڈوں میں بولین انڈیکسنگ استعمال کرسکتے ہیں۔یہاں ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'نام': ['ایلس' ، 'باب' ، 'چارلی'] ، 'عمر': [25 ، 30 ، 35]})# کنڈیشن ڈی ایف = ڈی ایف [ڈی ایف ['عمر']> 25] پرنٹ (ڈی ایف) پر مبنی قطاریں ڈراپ (ڈی ایف) پرنٹ (ڈی ایف) ، ہمارے پاس ڈی ایف نامی ڈیٹا فریم ہے۔ہم کسی حالت کی بنیاد پر ڈیٹا فریم سے قطاریں چھوڑنے کے لئے بولین انڈیکسنگ کا استعمال کرتے ہیں۔حالت DF ['Age']> 25 قطاریں منتخب کرتی ہے جہاں 'عمر' کالم 25 سے زیادہ ہے۔ آؤٹ پٹ ہوگا: مارک ڈاون کاپی کوڈ نام AGE1 باب 302 چارلی 35 ہائر ، ایسی قطاریں جو حالت کو پورا نہیں کرتی ہیں (DF ['عمر' ']> 25) ڈیٹا فریم سے خارج کردیئے گئے ہیں ، اور اس کے نتیجے میں ڈیٹا فریم کو ڈی ایف میں واپس کردیا گیا ہے۔ بولین انڈیکسنگ کا استعمال کرتے ہوئے ، آپ مختلف معیارات کی بنیاد پر قطاروں کو چھوڑنے کے لئے مختلف شرائط کا اطلاق کرسکتے ہیں۔"
    },
    {
        "Question": "ڈیٹا فریم میں کالم سے انوکھی اقدار نکالنے کے لئے کوڈ لکھیں۔",
        "Answer": "ڈیٹا فریم میں کالم سے انوکھی اقدار نکالنے کے ل you ، آپ پانڈوں میں انوکھا () طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'نام': ['ایلس' ، 'باب' ، 'چارلی' ، 'باب' ، 'ڈیو']# انوکھی اقداراس مثال میں 'نام' کالم یونیک_والیوز = ڈی ایف ['نام'] سے منفرد () پرنٹ (منفرد_اولیوس) سے ، ہمارے پاس 'نام' کے نام سے ایک کالم کے ساتھ ڈی ایف نامی ڈیٹا فریم ہے۔ہم منفرد اقدار کو نکالنے کے لئے 'نام' کالم پر انوکھا () طریقہ استعمال کرتے ہیں۔ آؤٹ پٹ ہوگا: روسٹ کوپی کوڈ ['ایلس' 'باب' 'چارلی"
    },
    {
        "Question": "متعدد کالموں سے اقدار کو یکجا کرکے ڈیٹا فریم میں نیا کالم بنانے کے لئے کوڈ لکھیں۔",
        "Answer": "ایک سے زیادہ کالموں سے اقدار کو یکجا کرکے ڈیٹا فریم میں ایک نیا کالم بنانے کے ل you ، آپ سٹرنگ کنکیٹیشن یا کسی اور مطلوبہ تبدیلی کا استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PD## مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'پہلا نام': ['ایلس' ، 'باب' ، 'چارلی'] ، 'آخری نام': ['سمتھ' ، 'جانسن'،' براؤن ']})#' پہلا نام 'اور' آخری نام 'ڈی ایف [' مکمل نام '] = DF [' پہلا نام '] +' ' + DF [' آخری نام '] کے امتزاج کرکے ایک نیا کالم بنائیں۔اس مثال میں پرنٹ (ڈی ایف) ، ہمارے پاس کالموں کے 'پہلا نام' اور 'آخری نام' کے ساتھ DF نامی ڈیٹا فریم ہے۔ہم 'پہلا نام' اور 'آخری نام' کالموں سے '+' آپریٹر اور اس کے درمیان جگہ کا استعمال کرتے ہوئے اقدار کو ہم آہنگ کرکے 'مکمل نام' کے نام سے ایک نیا کالم بناتے ہیں۔ آؤٹ پٹ ہوگا: ریاضی کا کوڈ پہلا نام آخری نام مکمل نام 0 ایلساسمتھ ایلس اسمتھ 1 باب جانسن باب جانسن 2 چارلی براؤن چارلی براؤنیہیر ، نیا کالم 'مکمل نام' کی اقدار کو یکجا کرکے تخلیق کیا گیا ہے '"
    },
    {
        "Question": "ڈیٹا فریم میں دو ڈیٹ ٹائم کالموں کے مابین فرق کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "ڈیٹا فریم میں دو ڈیٹ ٹائم کالموں کے مابین فرق کا حساب لگانے کے ل you ، آپ ایک کالم کو دوسرے سے گھٹا سکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe (start 'اسٹارٹ ٹائم': ['2022-01-01 10:00:00' ، '2022-01-01 12:30:00'] ، 'اختتامی وقت': ['2022-01-01 11:30:00' ، '2022-01-01 14:15:00']})# کالموں کو ڈیٹ ٹیمڈف میں تبدیل کریں ['اسٹارٹ ٹائم'] = PD۔to_datetime (df ['start وقت']) df ['end وقت'] = pd.to_datetime"
    },
    {
        "Question": "کم میکس اسکیلنگ کا استعمال کرتے ہوئے ڈیٹا فریم میں عددی کالم کو معمول پر لانے کے لئے کوڈ لکھیں۔",
        "Answer": "کم سے کم میکس اسکیلنگ کا استعمال کرتے ہوئے ڈیٹا فریم میں عددی کالم کو معمول پر لانے کے ل you ، آپ اسکلرن.پروسیسنگ ماڈیول سے من میکس اسکیلر کلاس استعمال کرسکتے ہیں۔یہاں ایک مثال کوڈ ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور PDFROM SKLEREN.Preprocessing درآمد Minmaxscaler# مثال Dataframedf = pd.dataframe ({'اقدار': [10 ، 20 ، 30 ، 40 ، 50]})# MinMaxScaler آبجیکٹسکلر = MinMaxcaler = MinMaxscaler آبجیکٹسکلر = MinMaxsscaler بنائیںکم سے کم میکس اسکیلنگ ڈی ایف ['عام اقدار'] = اسکیلر.فٹ_ٹرانسفارم (ڈی ایف [['اقدار']]) پرنٹ (ڈی ایف) کا استعمال کرتے ہوئے 'اقدار' کالم کو عام کریں (ڈی ایف) پرنٹ (ڈی ایف) اس مثال میں ، ہمارے پاس ایک ڈیٹا فریم ہے جس کا نام ڈی ایف ہے جس کا نام ایک عددی کالم ہے 'اقدار '۔ہم ایک من میکس اسکیلر آبجیکٹ تیار کرتے ہیں اور پھر اسے کم سے کم میکس اسکیلنگ کا اطلاق کرکے 'اقدار' کالم کو معمول پر لانے کے لئے استعمال کرتے ہیں۔ اسکیلر کا FIT_TRANSFORM () طریقہ استعمال کیا جاتا ہے تاکہ 'اقدار' کالم کی کم سے کم اور زیادہ سے زیادہ اقدار کی گنتی کی جاسکے اور اقدار کی پیمائش کی جاسکے۔حد تک [0 ، 1]۔عام اقدار کو ڈیٹا فریم میں 'عام اقدار' کے نام سے ایک نئے کالم میں تفویض کیا جاتا ہے۔"
    },
    {
        "Question": "ڈیٹا فریم میں کالم کی کفایت شعاری اوسط اوسط کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "ایک خرابی آگئی.یا تو آپ نے جس انجن کی درخواست کی ہے وہ موجود نہیں ہے یا آپ کی درخواست پر کارروائی کرنے میں کوئی اور مسئلہ تھا۔اگر یہ مسئلہ برقرار رہتا ہے تو براہ کرم ہم سے ہیلپ ڈاٹ کام پر ہمارے ہیلپ سنٹر کے ذریعے رابطہ کریں۔"
    },
    {
        "Question": "ڈیٹا فریم میں کالم سے اعلی ترین اقدار کے ساتھ اوپر کی قطاریں نکالنے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈاس ایک مشہور اوپن سورس ازگر لائبریری ہے جو ڈیٹا میں ہیرا پھیری اور تجزیہ کے لئے استعمال ہوتی ہے۔یہ ساختی اعداد و شمار ، جیسے ٹیبلر ڈیٹا ، ٹائم سیریز ، اور بہت کچھ کے ساتھ موثر انداز میں کام کرنے کے لئے ڈیٹا ڈھانچے اور افعال فراہم کرتا ہے۔پانڈاس نمی کے سب سے اوپر تعمیر کیا گیا ہے ، جو عددی کمپیوٹنگ کے لئے ایک اور طاقتور ازگر لائبریری ہے۔ یہاں پانڈوں کی کچھ اہم خصوصیات ہیں: ڈیٹا ڈھانچے: پانڈاس سیریز اور ڈیٹا فریم نامی دو بنیادی ڈیٹا ڈھانچے متعارف کراتا ہے۔ایک سلسلہ ایک جہتی لیبل لگا ہوا سرنی ہے جو کسی بھی ڈیٹا کی قسم کو تھامنے کے قابل ہے ، اور ڈیٹا فریم دو جہتی لیبل لگا ہوا ڈیٹا ڈھانچہ ہے جس میں ممکنہ طور پر مختلف اقسام کے کالم ہیں۔یہ ڈھانچے اعداد و شمار کو ذخیرہ کرنے ، جوڑ توڑ اور تجزیہ کرنے میں آسان بناتے ہیں۔ ڈیٹا ہیرا پھیری: پانڈاس ڈیٹا کو جوڑ توڑ کرنے کے لئے وسیع پیمانے پر افعال اور طریقوں کو فراہم کرتا ہے۔آپ ان افعال کا استعمال کرتے ہوئے اپنے ڈیٹا پر مختلف آپریشنز کو فلٹر ، ترتیب ، مجموعی ، نئی شکل دے سکتے ہیں اور انجام دے سکتے ہیں۔یہ ایک سے زیادہ ڈیٹا فریموں پر ضم ، شامل ہونے ، اور محور سازی کی بھی اجازت دیتا ہے۔ ڈیٹا کی صفائی: پانڈاس گمشدہ ڈیٹا کو سنبھالنے اور ڈیٹا کی صفائی کے کاموں کو انجام دینے کے ل tools ٹولز پیش کرتا ہے۔آپ گمشدہ اقدار کا پتہ لگاسکتے ہیں اور ان کو دور کرسکتے ہیں ، ان کو مناسب اقدار سے تبدیل کرسکتے ہیں ، یا مختلف طریقوں کا استعمال کرتے ہوئے گمشدہ ڈیٹا کو انٹرپولیٹ کرسکتے ہیں۔ ڈیٹا ان پٹ/آؤٹ پٹ: پانڈاس مختلف فائل فارمیٹس ، جیسے سی ایس وی ، ایکسل ، ایس کیو ایل ڈیٹا بیس ، اور سے ڈیٹا پڑھنے اور لکھنے کی حمایت کرتا ہے۔مزید.یہ مختلف ذرائع سے ڈیٹا درآمد کرنے ، اس پر کارروائی کرنے اور نتائج برآمد کرنے کے افعال مہیا کرتا ہے۔ ٹائم سیریز کا تجزیہ: پانڈوں میں ٹائم سیریز کے اعداد و شمار کے ساتھ کام کرنے کی وسیع صلاحیتیں ہیں۔یہ تاریخ/وقت کی اشاریہ سازی ، دوبارہ ترتیب دینے ، تعدد تبادلوں ، وقت کی تبدیلی اور بہت کچھ کے لئے فعالیت فراہم کرتا ہے۔یہ خصوصیات خاص طور پر وقت پر منحصر اعداد و شمار کا تجزیہ کرنے میں مفید ہیں۔ دیگر لائبریریوں کے ساتھ انضمام: پانڈاس دیگر مشہور ازگر لائبریریوں ، جیسے نومی ، میٹپلوٹلیب اور ایس سی آئی پی آئی کے ساتھ اچھی طرح سے مربوط ہوتا ہے۔یہ بغیر کسی رکاوٹ کے انضمام اور باہمی تعاون کی اجازت دیتا ہے ، جس سے آپ کو اپنے ڈیٹا تجزیہ میں مختلف لائبریریوں کی طاقت کا فائدہ اٹھانے کے قابل بناتا ہے۔یہ ڈیٹا ہیرا پھیری اور تجزیہ کے لئے ایک طاقتور اور موثر فریم ورک مہیا کرتا ہے ، جس سے یہ بہت سے ڈیٹا پیشہ ور افراد اور محققین کے لئے انتخاب کا انتخاب ہوتا ہے۔"
    },
    {
        "Question": "ڈیٹا فریم میں ایک سے زیادہ بائنری کالموں میں زمرہ دار اقدار کے کالم کو تبدیل کرنے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈاس ایک طاقتور اوپن سورس ازگر لائبریری ہے جو ڈیٹا تجزیہ اور ہیرا پھیری میں بڑے پیمانے پر استعمال ہوتی ہے۔یہ استعمال میں آسانی سے ڈیٹا ڈھانچے اور ڈیٹا تجزیہ کے ٹولز مہیا کرتا ہے ، جس سے یہ ساختہ اعداد و شمار کے ساتھ کام کرنے کے لئے ایک مقبول انتخاب ہوتا ہے۔ یہاں کچھ وجوہات ہیں کہ پانڈوں کو ڈیٹا تجزیہ میں وسیع پیمانے پر استعمال کیا جاتا ہے: ڈیٹا ڈھانچے: پانڈاس دو اہم ڈیٹا ڈھانچے ، سیریز اور متعارف کراتے ہیں۔ڈیٹا فریم۔ایک سلسلہ ایک جہتی لیبل لگا ہوا صف ہے جو کسی بھی ڈیٹا کی قسم کا انعقاد کرسکتا ہے ، جبکہ ڈیٹا فریم دو جہتی لیبل لگا ہوا ڈیٹا ڈھانچہ ہے جس میں ممکنہ طور پر مختلف اقسام کے کالم ہیں۔یہ ڈھانچے ڈیٹا کو ذخیرہ کرنے ، جوڑ توڑ اور تجزیہ کرنے کا ایک آسان اور موثر طریقہ مہیا کرتے ہیں۔ ڈیٹا ہیرا پھیری: پانڈاس ڈیٹا ہیرا پھیری کے لئے وسیع پیمانے پر افعال اور طریقوں کی پیش کش کرتا ہے۔آپ سادہ اور بدیہی نحو کا استعمال کرتے ہوئے فلٹر ، ترتیب ، گروپ ، مجموعی ، محور ، اور اعداد و شمار کو تبدیل کرسکتے ہیں۔یہ کاروائیاں آپ کو تجزیہ کے ل data ڈیٹا صاف کرنے ، تبدیل کرنے اور تیار کرنے کی اجازت دیتی ہیں۔ ڈیٹا ہینڈلنگ کو یاد کرتے ہوئے: حقیقی دنیا کے اعداد و شمار میں اکثر گمشدہ اقدار شامل ہوتی ہیں۔پانڈاس گمشدہ ڈیٹا کو سنبھالنے کے ل tools ٹولز مہیا کرتا ہے ، جس سے آپ مختلف حکمت عملیوں کی بنیاد پر گمشدہ اقدار کا پتہ لگانے ، ہٹانے یا بھرنے کی اجازت دیتے ہیں۔اس لچک سے یہ یقینی بنانے میں مدد ملتی ہے کہ گمشدہ ڈیٹا تجزیہ کے عمل میں مداخلت نہیں کرتا ہے۔ ڈیٹا انضمام: پانڈاس بغیر کسی رکاوٹ کے بغیر ازدواجی طور پر دیگر لائبریریوں کے ساتھ مربوط ہوتا ہے ، جیسے ازگر ڈیٹا ماحولیاتی نظام ، جیسے نمی ، میٹپلوٹلیب اور اسکیپی۔یہ انضمام آپ کو متعدد لائبریریوں کی طاقت کو یکجا کرنے کی اجازت دیتا ہے تاکہ اعداد و شمار کے تجزیہ کے پیچیدہ کاموں کو موثر انداز میں انجام دیا جاسکے۔مثال کے طور پر ، آپ آسانی سے نمی کا استعمال کرتے ہوئے ریاضی کی کارروائیوں کا اطلاق کرسکتے ہیں ، میٹپلوٹلیب کا استعمال کرتے ہوئے ڈیٹا کو تصور کرسکتے ہیں ، اور پانڈوں کے ساتھ ساتھ ایس سی آئی پی وائی کا استعمال کرتے ہوئے اعداد و شمار کا تجزیہ کرسکتے ہیں۔ ٹائم سیریز تجزیہ: پانڈاس کو ٹائم سیریز کے اعداد و شمار کے تجزیے کے لئے وسیع پیمانے پر مدد حاصل ہے۔یہ وقت پر منحصر اعداد و شمار کو سنبھالنے کے لئے خصوصی اعداد و شمار کے ڈھانچے اور افعال مہیا کرتا ہے ، جس میں تاریخ/وقت کی اشاریہ سازی ، دوبارہ ترتیب دینے ، وقت کی شفٹنگ ، اور تعدد کی تبدیلی شامل ہے۔یہ خصوصیات دنیاوی اجزاء کے ساتھ اعداد و شمار کا تجزیہ کرنے کے لئے خاص طور پر قابل قدر ہیں۔ ڈیٹا I/O: پانڈاس مختلف فائل فارمیٹس سے/پڑھنے اور لکھنے کی سہولت فراہم کرتا ہے ، بشمول CSV ، ایکسل ، ایس کیو ایل ڈیٹا بیس ، اور بہت کچھ۔یہ مختلف ذرائع سے ڈیٹا درآمد کرنے ، اس پر کارروائی کرنے اور نتائج برآمد کرنے کے لئے آسان افعال فراہم کرتا ہے۔اس لچک سے مختلف فائل فارمیٹس کے اعداد و شمار کے ساتھ کام کرنا آسان ہوجاتا ہے اور بیرونی اعداد و شمار کے ذرائع کے ساتھ مربوط ہوتا ہے۔ اوور ، پانڈاس موثر اعداد و شمار کے ڈھانچے ، طاقتور ہیرا پھیری کی صلاحیتوں ، اور دیگر لائبریریوں کے ساتھ ہموار انضمام کی فراہمی کے ذریعہ ڈیٹا تجزیہ کے ورک فلو کو آسان اور تیز کرتا ہے۔اس کے صارف دوست انٹرفیس اور وسیع فعالیت نے اسے ازگر میں ڈیٹا تجزیہ کے کاموں کے لئے جانے والی لائبریری بنا دیا ہے۔"
    },
    {
        "Question": "ڈیٹا فریم کو فارورڈ بھر کر گمشدہ اقدار کو سنبھالنے کے لئے کوڈ لکھیں۔",
        "Answer": "ازگر میں پانڈاس لائبریری درآمد کرنے کے ل you ، آپ درآمد کی مطلوبہ الفاظ کو استعمال کرسکتے ہیں جس کے بعد لائبریری کا نام \"پانڈاس\" ہے۔یہ نحو ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاشوور ، یہ ایک عام رواج ہے کہ پانڈوں کو عرف کے ساتھ درآمد کیا جائے تاکہ آپ کے کوڈ میں لائبریری کا حوالہ دینا آسان ہوجائے۔پانڈوں کے لئے استعمال ہونے والا سب سے عام عرف \"PD\" ہے۔یہاں آپ عرف کے ساتھ پانڈوں کو درآمد کرسکتے ہیں: پائیتھون کوپی کوڈیمپورٹ پانڈاس اس درآمدی بیان کے ساتھ ، آپ \"PD\" عرف کا استعمال کرتے ہوئے پانڈاس افعال اور کلاسوں تک رسائی حاصل کرسکتے ہیں۔مثال کے طور پر ، ڈیٹا فریم بنانے کے ل you ، آپ PD.Dataframe () استعمال کرسکتے ہیں ، اور CSV فائل کو پڑھنے کے ل you ، آپ PD.read_csv () استعمال کرسکتے ہیں۔ یہ نوٹ کرنا ضروری ہے کہ آپ کو آپ کے سامنے آپ کے ازگر ماحول میں پانڈاس انسٹال کرنے کی ضرورت ہے۔اسے درآمد کرسکتا ہے۔آپ اپنے ٹرمینل یا کمانڈ پرامپٹ میں مندرجہ ذیل کمانڈ چلا کر PIP پیکیج مینیجر کا استعمال کرتے ہوئے پانڈوں کو انسٹال کرسکتے ہیں: کاپی کوڈپپ انسٹال پانڈاس پانڈا انسٹال ہے ، آپ اسے اپنے ازگر اسکرپٹ یا انٹرایکٹو سیشن میں درآمد کرسکتے ہیں اور ڈیٹا تجزیہ کے کاموں کے لئے اس کی فعالیت کو استعمال کرنا شروع کرسکتے ہیں۔"
    },
    {
        "Question": "ریجیکس میچ کے نتیجے پر مبنی ڈیٹا فریم میں نیا کالم بنانے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈوں میں ، آپ pd.dataframe () فنکشن کا استعمال کرتے ہوئے لغت سے ڈیٹا فریم تشکیل دے سکتے ہیں۔لغت کی چابیاں کالم کے ناموں کے طور پر استعمال ہوں گی ، اور اقدار کو متعلقہ کالموں کے اعداد و شمار کے طور پر استعمال کیا جائے گا۔یہاں ایک مثال یہ ہے: Pdthoncopy کوڈیمپورٹ پانڈاس بطور PD# ایک ڈکشنری ڈیٹا بنائیں = {'نام': ['جان' ، 'ایملی' ، 'ریان' ، 'لنڈا'] ، 'عمر': [28 ، 35 ، 42 ، 50].کوڈ کا نام عمر سٹی 0 جان 28 نیو یارک 1 ایملی 35 شکاگو 2 ریان 42 لاس اینجلس 3 لنڈا 50 سان فرانسسکوئن اس مثال کے طور پر ، لغت کے اعداد و شمار میں تین چابیاں ('نام' ، 'عمر' ، 'شہر') اور ان کی متعلقہ اقدار شامل ہیں۔اس کے بعد pd.dataframe () فنکشن کو لغت سے ڈیٹا فریم DF بنانے کے لئے استعمال کیا جاتا ہے۔ ڈکشنری میں ایک کلید ڈیٹا فریم میں ایک کالم بن جاتی ہے ، اور اس سے وابستہ اقدار ان کالموں میں ڈیٹا بن جاتی ہیں۔ڈیٹا فریم میں کالموں کا آرڈر لغت میں چابیاں کے ترتیب سے مماثل ہوگا۔ہر کالم کی اقدار کو ان کی اشاریہ پوزیشن کی بنیاد پر منسلک کیا جائے گا۔ آپ اپنے ڈیٹا پر ڈیٹا تجزیہ کے کاموں کو انجام دینے کے لئے مختلف پانڈاس افعال اور طریقوں کا استعمال کرتے ہوئے ڈیٹا فریم تک رسائی حاصل کرسکتے ہیں اور ان میں ہیرا پھیری کرسکتے ہیں۔"
    },
    {
        "Question": "ڈیٹا فریم میں کالم میں کسی قدر کے واقعات کی مجموعی گنتی کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈوں میں ڈیٹا فریم کی شکل کی جانچ پڑتال کے ل you ، آپ شکل وصف کو استعمال کرسکتے ہیں۔شکل وصف ایک ٹپل لوٹاتا ہے جو ڈیٹا فریم کے طول و عرض کی نمائندگی کرتا ہے۔ٹپل کا پہلا عنصر قطاروں کی تعداد کی نمائندگی کرتا ہے ، اور دوسرا عنصر کالموں کی تعداد کی نمائندگی کرتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان' ، 'لنڈا'] ، 'عمر': [28 ، 35 ، 42 ، 50].(4 ، 3) اس مثال میں ، شکل وصف کو ڈیٹا فریم ڈی ایف پر کہا جاتا ہے۔آؤٹ پٹ (4 ، 3) اس بات کی نشاندہی کرتا ہے کہ ڈیٹا فریم میں 4 قطاریں اور 3 کالم ہیں۔ ڈیٹا فریم کی شکل کی جانچ پڑتال کے ذریعہ ، آپ جلدی سے اس کے سائز اور طول و عرض کا تعین کرسکتے ہیں ، جو آپ کے ڈیٹا کی ساخت اور دائرہ کار کو سمجھنے کے لئے مفید ہے۔"
    },
    {
        "Question": "ڈور کے کالم کو ڈیٹا فریم میں ایک واضح ڈیٹا کی قسم میں تبدیل کرنے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈوں میں ڈیٹا فریم کی پہلی N قطاروں تک رسائی حاصل کرنے کے ل you ، آپ ہیڈ () کا طریقہ استعمال کرسکتے ہیں۔ہیڈ () کا طریقہ ایک نیا ڈیٹا فریم واپس کرتا ہے جس میں اصل ڈیٹا فریم کے آغاز سے قطاروں کی مخصوص تعداد پر مشتمل ہے۔پہلے سے طے شدہ طور پر ، اگر کوئی پیرامیٹر فراہم نہیں کیا جاتا ہے تو یہ پہلی 5 قطاریں لوٹاتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT پانڈاس PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان' ، 'لنڈا' ، 'ڈیوڈ'] ، 'عمر': [28 ، 35 ،42 ، 50 ، 45] ، 'شہر': ['نیویارک' ، 'شکاگو' ، 'لاس اینجلس' ، 'سان فرانسسکو' ، 'سیئٹل' ، 'سیئٹل']} df = pd.dataframe (ڈیٹا)# پہلے 3 Rowsfirst_three_rows تک رسائی حاصل کریں= df.head (3)# رزلٹ پرنٹ (First_there_rows) آؤٹ پٹ ڈسپلے کریں: SQLCOPY کوڈ نام کی عمر سٹی 0 جان 28 نیو یارک 1 ایملی 35 شکاگو 2 ریان 42 لاس اینجنسن اس مثال کے طور پر ، ہیڈ (3) کا طریقہ ڈیٹا فریم ڈی ایف پر بلایا گیا ہے تاکہ اسے بازیافت کیا جاسکے۔پہلی 3 قطاریں۔نتیجہ فرسٹ_تھری_روز ڈیٹا فریم میں محفوظ ہے۔فرسٹ_تھری_رو پرنٹنگ مطلوبہ آؤٹ پٹ کو دکھاتا ہے۔ آپ کسی بھی مثبت عدد این کی وضاحت کرسکتے ہیں تاکہ ڈیٹا فریم کی پہلی این قطاروں تک رسائی حاصل کرنے کے لئے سر () کے طریقہ کار کی دلیل کے طور پر۔اس سے آپ کو اعداد و شمار کے سبسیٹ کو جلدی سے جانچنے اور اس کی ساخت اور اقدار کا احساس حاصل کرنے کی سہولت ملتی ہے۔"
    },
    {
        "Question": "ڈیٹا فریم میں دو کالموں کے مابین کوسائن مماثلت کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈوں میں ڈیٹا فریم سے مخصوص کالموں کو منتخب کرنے کے ل you ، آپ کالم کے ناموں یا LOC یا ILOC رسار کے ساتھ انڈیکسنگ استعمال کرسکتے ہیں۔یہاں کچھ نقطہ نظر ہیں: کالم کے ناموں کے ساتھ اشاریہ سازی: آپ مربع بریکٹ [] استعمال کرسکتے ہیں اور انڈیکس کے طور پر کالم کے ناموں کی فہرست فراہم کرسکتے ہیں۔یہ صرف منتخب کالموں کے ساتھ ایک نیا ڈیٹا فریم واپس کرے گا۔یہاں ایک مثال یہ ہے: Pdthoncopy کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'شہر': [[[شہر ': [[28 ، 35 ، 42]'نیو یارک' ، 'شکاگو' ، 'لاس اینجلس']} df = pd.dataframe (ڈیٹا)# مخصوص کالم سلیکٹڈ_کولمز = ڈی ایف [['نام' ، 'شہر']]# کو منتخب کریں (منتخب_کولمز) آؤٹ پٹ ڈسپلے کریں: SQLCOPY: SQLCOPYکوڈ کا نام سٹی 0 جان نیو یارک 1 ایملی شکاگو 2 ریان لاس اینجلیسیسنگ ایل او سی ایکسیسر: لوک ایکسیسر لیبل پر مبنی انڈیکسنگ کی اجازت دیتا ہے ، جہاں آپ دونوں قطار اور کالم لیبل کی وضاحت کرسکتے ہیں۔مخصوص کالموں کو منتخب کرنے کے ل you ، آپ بڑی آنت کے ساتھ LOC استعمال کرسکتے ہیں: تمام قطاریں منتخب کرنے اور کالم کے ناموں کو بطور فہرست بیان کرنے کے لئے۔یہاں ایک مثال یہ ہے: Pdthoncopy کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'شہر': [[[شہر ': [[28 ، 35 ، 42]'نیو یارک' ، 'شکاگو' ، 'لاس اینجلس']} df = pd.dataframe (ڈیٹا)# locedected_colums = df.loc [: ، ['نام' ، 'شہر'] کا استعمال کرتے ہوئے مخصوص کالم منتخب کریں۔.مخصوص کالموں کو منتخب کرنے کے ل you ، آپ ILOC کو ایک بڑی آنت کے ساتھ استعمال کرسکتے ہیں: تمام قطاریں منتخب کرنے اور کالم پوزیشنوں کو عدد کی فہرست کے طور پر بیان کرنے کے لئے۔یہاں ایک مثال یہ ہے: Pdthoncopy کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'شہر': [[[شہر ': [[28 ، 35 ، 42]'نیو یارک' ، 'شکاگو' ، 'لاس اینجلس']} df = pd.dataframe (ڈیٹا)# ilocselectect_colums = df.iloc کا استعمال کرتے ہوئے مخصوص کالم منتخب کریں [: ، [0 ، 2]]# نتائج پرنٹ (منتخب_کالم) آؤٹ پٹ ڈسپلے کریں: SQLCOPY کوڈ کا نام سٹی 0 جان نیو یارک 1 ایملی شکاگو 2 ریان لاس اینجلیسن تینوں نقطہ نظر ، آپ ڈیٹا فریم سے مخصوص کالموں کو منتخب کرنے کے لئے کالم ناموں یا کالم پوزیشنوں کی فہرست فراہم کرسکتے ہیں۔"
    },
    {
        "Question": "ڈیٹا فریم میں پسماندہ اقدار کو ہینڈل کرنے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈوں کی حالت پر مبنی ڈیٹا فریم میں قطاروں کو فلٹر کرنے کے ل you ، آپ بولین انڈیکسنگ کا استعمال کرسکتے ہیں۔بولین انڈیکسنگ آپ کو بولین ماسک بنانے کی اجازت دیتی ہے جو ایک مخصوص حالت کی بنیاد پر قطاریں منتخب کرتی ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان' ، 'لنڈا'] ، 'عمر': [28 ، 35 ، 42 ، 50].> 30]# فلٹرڈ ڈیٹا فیم پرنٹ (فلٹرڈ_ ڈی ایف) آؤٹ پٹ ڈسپلے کریں: کاپی کوڈ نام کی عمر سٹی 1 ایملی 35 شکاگو 2 ریان 42 لاس اینجلس 3 لنڈا 50 سان فرانسسکوئن اس مثال کے طور پر ، حالت ڈی ایف ['عمر']> 30 ایک بولین ماسک بناتا ہے جو سچائی کا اندازہ کرتا ہے۔قطاروں کے لئے جہاں 'عمر' کالم کی قیمت 30 سے زیادہ ہے اور دوسری صورت میں غلط ہے۔مربع بریکٹ کے اندر اس بولین ماسک کا استعمال کرتے ہوئے [] ڈیٹا فریم کو فلٹر کرتا ہے ، صرف وہ قطاریں واپس کرتے ہیں جو حالت کو پورا کرتی ہیں۔ آپ مختلف معیاروں کی بنیاد پر قطار کو فلٹر کرنے کے لئے حالت کو اپنی مرضی کے مطابق بنا سکتے ہیں۔مثال کے طور پر ، آپ ڈیٹا فریم میں دوسرے کالموں کی بنیاد پر متعدد شرائط یا فلٹر قطار کو یکجا کرنے کے لئے منطقی آپریٹرز (اور کے لئے اور ، |شرائط ، آپ کو آسانی سے پیچیدہ ڈیٹا فلٹرنگ کے کام انجام دینے کی اجازت دیتے ہیں۔"
    },
    {
        "Question": "کسی دوسرے کالم کے عہدے پر مبنی ڈیٹا فریم میں نیا کالم بنانے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈوں میں ڈیٹا فریم میں کالموں کا نام تبدیل کرنے کے ل you ، آپ نام () کا طریقہ استعمال کرسکتے ہیں۔نام تبدیل کرنے کا طریقہ آپ کو ایک لغت فراہم کرنے کی اجازت دیتا ہے جہاں کلیدیں موجودہ کالم کے نام ہیں اور اقدار نئے کالم کے نام ہیں۔یہاں ایک مثال یہ ہے: Pdthoncopy کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'شہر': [[[شہر ': [[28 ، 35 ، 42]'نیو یارک' ، 'شکاگو' ، 'لاس اینجلس']} df = pd.dataframe (ڈیٹا)# نام کالمزنیو_کولوم_نیمز = {'نام': 'مکمل نام' ، 'عمر': 'عمر' ، 'شہر': 'مقام '} df = df.rename (کالم = new_column_names)# نامزد کالم پرنٹ (ڈی ایف) آؤٹ پٹ کے ساتھ ڈیٹا فریم ڈسپلے کریں: SQLCOPY کوڈ مکمل نام عمر کی عمر 0کالم پیرامیٹر کے ساتھ نئے_ کالم_ ناموں کی لغت کے ساتھ ڈیٹا فریم ڈی ایف پر بلایا جاتا ہے۔لغت موجودہ کالم کے ناموں کی میپنگ کو مطلوبہ نئے کالم کے ناموں کی وضاحت کرتی ہے۔ نام () کے طریقہ کار کا نتیجہ ڈیٹا فریم (DF = df.rename (کالم = new_column_names)) پر تفویض کرتے ہوئے ، اصل ڈیٹا فریم کے ساتھ ترمیم کی گئی ہے۔نئے کالم کے نام۔ آپ اپنے مطلوبہ کالم نام کی تبدیلیوں سے ملنے کے لئے نئے_ کالم_ نام کی لغت میں ترمیم کرسکتے ہیں۔نوٹ کریں کہ آپ کو صرف ان کالموں کو شامل کرنے کی ضرورت ہے جن کا نام آپ لغت میں نامزد کرنا چاہتے ہیں ، کسی بھی کالموں کو چھوڑ کر جسے آپ تبدیل کرنا چاہتے ہیں۔ نام تبدیل کرنے کے طریقہ کار کا استعمال کرتے ہوئے ، آپ کالموں کو آسانی سے کسی ڈیٹا فریم میں نام تبدیل کرسکتے ہیں تاکہ ان کو مزید وضاحتی یا سیدھ میں لائیں۔اپنے تجزیہ کی ضروریات کے ساتھ۔"
    },
    {
        "Question": "ڈیٹا فریم میں کالم کی مجموعی فیصد کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈوں میں ڈیٹا فریم سے کالم چھوڑنے کے ل you ، آپ ڈراپ () کا طریقہ استعمال کرسکتے ہیں۔ڈراپ () کا طریقہ آپ کو ان کے ناموں یا پوزیشنوں کی وضاحت کرکے ایک یا زیادہ کالموں کو ہٹانے کی اجازت دیتا ہے۔یہاں کچھ نقطہ نظر ہیں: نام کے لحاظ سے کالم ڈراپ کریں: آپ متعلقہ کالموں کو ہٹانے کے لئے ڈراپ () کے طریقہ کار میں ایک ہی کالم کا نام یا کالم کے ناموں کی فہرست فراہم کرسکتے ہیں۔یہاں ایک مثال یہ ہے: Pdthoncopy کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'شہر': [[[شہر ': [[28 ، 35 ، 42]'نیو یارک' ، 'شکاگو' ، 'لاس اینجلس']} df = pd.dataframe (ڈیٹا)# ایک ہی کالم ڈی ایف = df.drop ('عمر' ، محور = 1)# ڈراپ ایک سے زیادہ کالم ایس ڈی ایف = df.drop (ڈراپ کریں (۔کالم کے نام 'عمر' ، 'نام' ، اور 'سٹی' کے ساتھ ڈیٹا فریم ڈی ایف پر۔محور = 1 پیرامیٹر یہ واضح کرتا ہے کہ کالم گرائے جائیں۔نتیجے میں ڈیٹا فریم میں کوئی کالم نہیں ہوتا ہے۔یہاں ایک مثال یہ ہے: Pdthoncopy کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'شہر': [[[شہر ': [[28 ، 35 ، 42]'نیو یارک' ، 'شکاگو' ، 'لاس اینجلس']} df = pd.dataframe (ڈیٹا)# کالم بذریعہ پوزیشن ڈی ایف = df.drop (df.columons [[1 ، 2]] ، محور = 1)# ڈسپلےنتیجے میں ڈیٹا فریم پرنٹ (ڈی ایف) آؤٹ پٹ: کاپی کوڈ کا نام 0 جان 1 ایملی 2 ریانین اس مثال کے طور پر ، ڈراپ () کا طریقہ ڈیٹا فریم ڈی ایف پر کال کالم پیرامیٹر کے ساتھ کیا جاتا ہے جس میں DF.COLLUMS [[1 ، 2]] پر سیٹ کیا جاتا ہے۔یہ کالم 1 اور 2 (کالم 'عمر' اور 'شہر') پر کالموں کو گراتا ہے۔نتیجے میں ڈیٹا فریم صرف 'نام' کالم برقرار رکھتا ہے۔ مناسب پیرامیٹرز کے ساتھ ڈراپ () کے طریقہ کار کا استعمال کرتے ہوئے ، آپ کالموں کو ڈیٹا فریم سے ہٹا سکتے ہیں اور ان کالموں کے بغیر ایک نیا ڈیٹا فریم حاصل کرسکتے ہیں۔یاد رکھیں کہ نتیجہ کو ڈیٹا فریم یا کسی نئے متغیر کو ترمیم شدہ ڈیٹا فریم پر قبضہ کرنے کے لئے واپس تفویض کریں۔"
    },
    {
        "Question": "ڈیٹا فریم میں دو کالموں کے مابین فرق کا حساب لگانے کے لئے کوڈ لکھیں اور نتیجہ کی بنیاد پر ایک نیا کالم بنائیں۔",
        "Answer": "ڈیٹا فریم میں گمشدہ اقدار کو سنبھالنا ڈیٹا تجزیہ اور پری پروسیسنگ کا ایک اہم قدم ہے۔پانڈاس گمشدہ اقدار کو مؤثر طریقے سے سنبھالنے کے لئے متعدد طریقے مہیا کرتا ہے۔یہاں کچھ عام تکنیکیں ہیں: گمشدہ اقدار کی جانچ پڑتال: آپ ڈیٹا فریم میں گمشدہ اقدار کی نشاندہی کرنے کے لئے isnull () طریقہ استعمال کرسکتے ہیں۔یہ اصل کی طرح ایک ہی شکل کا ڈیٹا فریم لوٹاتا ہے ، جہاں ہر قدر درست ہے اگر اصل ڈیٹا فریم میں متعلقہ قیمت غائب ہے ، اور دوسری صورت میں غلط ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# گمشدہ قدروں کے ساتھ ایک ڈیٹا فریم بنائیں = {'نام': ['جان' ، 'ایملی' ، کوئی بھی نہیں ، 'لنڈا'] ، 'عمر': [28 ، کوئی نہیں ، 42 ، 50] ، 'سٹی': ['نیویارک' ، 'شکاگو' ، 'لاس اینجلس' ، کوئی بھی نہیں]} df = pd.dataframe (ڈیٹا)# گمشدہ valuessissing_values = df.isnull ()# گمشدہ ویلیو پرنٹ کے ساتھ ڈیٹا فریم ڈسپلے کریں.نتیجے میں ڈیٹا فریم ، لاپتہ_والیوس ، ہر سیل میں گمشدہ اقدار (سچ) یا نان مسنگ اقدار (غلط) کی موجودگی کی نشاندہی کرتا ہے۔ گمشدہ اقدار کو گھومنا: آپ قطاروں یا کالموں کو ہٹانے کے لئے ڈراپنا () کا طریقہ استعمال کرسکتے ہیں جس میں گمشدہ اقدار ہیں۔پہلے سے طے شدہ طور پر ، ڈراپنا () کم از کم ایک گمشدہ قیمت پر مشتمل کسی بھی قطار کو گراتا ہے۔اس کے بجائے کالم چھوڑنے کے لئے آپ محور پیرامیٹر کی بھی وضاحت کرسکتے ہیں۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# گمشدہ قدروں کے ساتھ ایک ڈیٹا فریم بنائیں = {'نام': ['جان' ، 'ایملی' ، کوئی بھی نہیں ، 'لنڈا'] ، 'عمر': [28 ، کوئی نہیں ، 42 ، 50] ، 'سٹی': ['نیو یارک' ، 'شکاگو' ، 'لاس اینجلس' ، کوئی بھی نہیں]} df = pd.dataframe (ڈیٹا)# گمشدہ قدروں کے ساتھ قطرہ قطرہ= df.dropna (محور = 1)# نتیجے میں ڈیٹا فیمس پرنٹ (df_dropped_rows) پرنٹ (df_dropped_colums) آؤٹ پٹ کو ڈسپلے کریں: SQLCOPY کوڈ کا نام عمر سٹی 0 جان 28.0 نیو یارکلیس کوپی کوڈپٹائی ڈیٹا فیمکولومز: [0 ، 1 ، 2 ، 3 ، 3 ، 3 ، 1 ، 2 ، 3 ، 3مثال کے طور پر ، ڈراپنا () دو بار استعمال کیا جاتا ہے: ایک بار محور پیرامیٹر (پہلے سے طے شدہ سلوک قطاروں میں کمی کرتا ہے) کی وضاحت کیے بغیر ، اور ایک بار کالموں کو چھوڑنے کے لئے محور = 1 کے ساتھ۔نتیجے میں ڈیٹا فیمز ، DF_DROPPED_ROWS اور DF_DROPPED_COLUMNS ، کوئی گمشدہ اقدار پر مشتمل نہیں ہیں۔ گمشدہ اقدار کو پورا کرنا: آپ گمشدہ اقدار کو مخصوص اقدار کے ساتھ تبدیل کرنے کے لئے فلنا () کا طریقہ استعمال کرسکتے ہیں۔مثال کے طور پر ، آپ گمشدہ اقدار کو مستقل قیمت ، کالم کے وسط یا وسط ، یا آگے/پسماندہ بھرنے سے بھر سکتے ہیں۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# گمشدہ قدروں کے ساتھ ایک ڈیٹا فریم بنائیں = {'نام': ['جان' ، 'ایملی' ، کوئی بھی نہیں ، 'لنڈا'] ، 'عمر': [28 ، کوئی نہیں ، 42 ، 50] ، 'شہر': ['نیویارک' ، 'شکاگو' ، 'لاس اینجلس"
    },
    {
        "Question": "کالم میں گمشدہ اقدار کی تعداد کی بنیاد پر ڈیٹا فریم میں قطاروں کو فلٹر کرنے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈوں میں ڈیٹا فریم میں عددی کالموں کے لئے وضاحتی اعدادوشمار کی گنتی کرنے کے ل you ، آپ بیان () طریقہ استعمال کرسکتے ہیں۔بیان () طریقہ ہر عددی کالم کے لئے مختلف سمری اعدادوشمار تیار کرتا ہے ، جس میں گنتی ، مطلب ، معیاری انحراف ، کم سے کم ، کوارٹائل اور زیادہ سے زیادہ شامل ہیں۔یہاں ایک مثال یہ ہے: پی ڈی کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس PD# عددی کالم کے ساتھ ایک ڈیٹا فریم بنائیں = {'نام': ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'تنخواہ': [50000 ، 70000 ، 60000]} df = pd.dataframe (ڈیٹا)# کمپیوٹ وضاحتی اعدادوشمار کے اعدادوشمار = df.describe ()# وضاحتی اعدادوشمار پرنٹ (اعدادوشمار) آؤٹ پٹ: شیل کاپی کوڈ عمر سیلاری اکاؤنٹ 3.000000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000meanکم سے کم 28.000000 50000.00000025 ٪ 31.500000 55000.00000050 ٪ 35.000000 60000.00000075 ٪ 38.500000 65000.000000max 42.000000000000000000 اس مثال کے طور پر ، بیان () کا طریقہ ڈیٹا فریم ڈی ایف پر بلایا گیا ہے۔نتیجے میں ڈیٹا فریم ، اعداد و شمار ، ہر عددی کالم کے لئے وضاحتی اعدادوشمار پر مشتمل ہیں۔اعدادوشمار میں گنتی (غیر مسنگ اقدار کی تعداد) ، مطلب ، معیاری انحراف ، کم سے کم قیمت ، کوارٹائل (25 ویں ، 50 ویں ، اور 75 ویں فیصد) ، اور زیادہ سے زیادہ قیمت شامل ہیں۔ بیان () طریقہ کا استعمال کرتے ہوئے ، آپ جلدی سے ایک جائزہ حاصل کرسکتے ہیں۔آپ کے ڈیٹا فریم میں عددی کالموں کی مرکزی رجحان ، بازی اور تقسیم کا۔"
    },
    {
        "Question": "ڈیٹا فریم میں ڈیٹ ٹائم اقدار کے کالم کو ہفتے کے دن میں تبدیل کرنے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈوں میں ، گروپ بائی () فنکشن ڈیٹا فریم پر گروپ بندی کی کارروائیوں کو انجام دینے کے لئے استعمال ہوتا ہے۔گروپ بائی () فنکشن آپ کو ایک یا زیادہ کالموں کی بنیاد پر گروپوں میں ڈیٹا فریم تقسیم کرنے کی اجازت دیتا ہے ، اور پھر ہر گروپ میں مجموعی یا تبدیلی کے افعال کا اطلاق کرتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان' ، 'ایملی' ، 'جان'] ، 'شہر': ['نیو یارک'.اور کمپیوٹ کا مطلب تنخواہ گروپ = df.groupby ('name')۔ مطلب ()# گروپڈ ڈیٹا فریم پرنٹ (گروپڈ) آؤٹ پٹ کو ڈسپلے کریں: مارک ڈاون کاپی کوڈ سیلری نام ایملی 65000 جان 57500ryan 55000in اس مثال کے طور پر ، گروپ بائی () فنکشن کو ڈیٹا فیم ڈی ایف پر بلایا گیا ہے۔کالم کا نام 'نام'۔یہ 'نام' کالم میں انوکھی اقدار کے ذریعہ ڈیٹا فریم کو گروپ کرتا ہے۔اس کے نتیجے میں شے ، گروپڈ ، ایک نیا ڈیٹا فریم ہے جہاں قطار کو الگ الگ ناموں کے ذریعہ گروپ کیا جاتا ہے ، اور ہر گروپ کی اوسط تنخواہ کی گنتی کی جاتی ہے۔ آپ گروپ بائی () فنکشن میں کالم کے ناموں کی فہرست فراہم کرکے متعدد کالموں کے ذریعہ بھی گروپ کرسکتے ہیں۔مثال کے طور پر: پائیتھون کوپی کوڈگروپڈ = df.groupby (['نام' ، 'شہر'])نام اور شہر۔ ایک بار آپ نے ڈیٹا فریم کو گروپ کیا ہے ، آپ گروپوں پر مختلف اجتماعی افعال کا اطلاق کرسکتے ہیں ، جیسے مطلب () ، رقم () ، گنتی () ، منٹ () ، زیادہ سے زیادہ () ، وغیرہ۔یا ہر گروپ پر دوسرے حسابات انجام دیں۔ گروپنگ پانڈوں میں ایک طاقتور آپریشن ہے جو آپ کو مختلف زمروں یا کالموں کے امتزاج پر مبنی ڈیٹا کا تجزیہ اور خلاصہ کرنے کی سہولت دیتا ہے۔"
    },
    {
        "Question": "کسی دوسرے کالم میں وزن کے بطور ڈیٹا فریم میں متعدد کالموں میں اقدار کے وزن والے رقم کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈوں میں ڈیٹا فریم کے ہر عنصر پر کسی فنکشن کو لاگو کرنے کے ل you ، آپ اطلاق () طریقہ استعمال کرسکتے ہیں۔اطلاق () طریقہ آپ کو کسی ڈیٹا فریم کی قطار یا کالموں کے ساتھ کسی فنکشن کا اطلاق کرنے کی اجازت دیتا ہے ، یا یہاں تک کہ ہر فرد عنصر پر بھی۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'تنخواہ': [[[28 ، 35 ، 42]50000 ، 60000 ، 55000]} df = pd.dataframe (ڈیٹا)# ڈیف ڈبل_ ویلیو (x) کو لاگو کرنے کے لئے کسی فنکشن کی وضاحت کریں: 2 * x واپس لوٹائیں۔.پہلے سے طے شدہ طور پر ، درخواست دیں () ہر کالم پر فنکشن کا اطلاق کرتے ہیں ، ہر کالم کو سیریز کے طور پر علاج کرتے ہیں۔فنکشن ڈبل_ویلیو ہر عنصر کی قدر کو دوگنا کرنے کے لئے بیان کیا گیا ہے۔نتیجے میں ڈیٹا فریم ، DF_APPLIED ، میں اصل ڈیٹا فریم کے عناصر پر مشتمل ہوتا ہے جس کا اطلاق ہوتا ہے۔ اگر آپ قطاروں کے ساتھ کسی فنکشن کا اطلاق کرنا چاہتے ہیں تو ، آپ محور = 1 کو لاگو () طریقہ میں ترتیب دے سکتے ہیں ().کہ آپ جو فنکشن لگاتے ہیں وہ ایک بلٹ ان فنکشن ، لیمبڈا فنکشن ، یا صارف کی وضاحت شدہ فنکشن ہوسکتا ہے۔اطلاق () طریقہ ڈیٹا فریم عناصر پر افعال کو لاگو کرنے میں لچک فراہم کرتا ہے ، جس سے آپ اپنے ڈیٹا پر اپنی مرضی کے مطابق آپریشن اور تبدیلیوں کو انجام دینے کی اجازت دیتے ہیں۔"
    },
    {
        "Question": "کسی حالت کی بنیاد پر ڈیٹا فریم کے کالم میں اقدار کو تبدیل کرنے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈوں میں ایک یا زیادہ کالموں کے ذریعہ ڈیٹا فریم کو ترتیب دینے کے ل you ، آپ ترتیب_اولیوز () کا طریقہ استعمال کرسکتے ہیں۔ترتیب_اولیوز () کا طریقہ آپ کو ایک یا زیادہ کالموں کو ترتیب دینے اور ترتیب دینے کے آرڈر (چڑھنے یا اترنے) کی وضاحت کرنے کی اجازت دیتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان' ، 'لنڈا'] ، 'عمر': [28 ، 35 ، 42 ، 50]..پہلے سے طے شدہ طور پر ، ترتیب_والیوز () مخصوص کالم کی بنیاد پر چڑھائی کے آرڈر میں ڈیٹا فریم کو ترتیب دیتا ہے۔نتیجے میں ڈیٹا فریم ، چھانٹیا_ڈیف ، 'تنخواہ' کالم کے ذریعہ چڑھائی ترتیب میں ترتیب دیا گیا ہے۔ ڈیٹا فریم کو نزولی ترتیب میں ترتیب دینے کے ل you ، آپ چڑھتے ہوئے = غلط کو ترتیب_اولیوز () کے طریقہ کار میں منتقل کرسکتے ہیں: پائیٹون کوپی کوڈسورٹڈ_ڈیف = ڈی ایف.سورٹ_والیس ('تنخواہ' ، 'تنخواہ'چڑھائی = غلط) آپ ترتیب_ ویلیوز () کے طریقہ کار کو کالم کے ناموں کی فہرست فراہم کرکے متعدد کالموں کے ذریعہ بھی ترتیب دے سکتے ہیں: پائیتھون کوپی کوڈسورٹڈ_ڈیف = ڈی ایف.سورٹ_والیوز (['نام' ، 'عمر']) اس سے پہلے ڈیٹا فریم کو ترتیب دیتا ہے '۔نام 'کالم اور پھر' عمر 'کالم کے ذریعہ ، دونوں چڑھائی کے حکم میں۔ ترتیب_اولیوز () کے طریقہ کار کا استعمال کرتے ہوئے ، آپ ایک یا زیادہ کالموں کی بنیاد پر کسی مخصوص ترتیب میں کسی ڈیٹا فریم کی قطار کا بندوبست کرسکتے ہیں۔ترتیب شدہ ڈیٹا فریم کو کسی نئے متغیر میں محفوظ کیا جاسکتا ہے یا اصل ڈیٹا فریم کو واپس تفویض کیا جاسکتا ہے۔"
    },
    {
        "Question": "ایک ڈیٹا فریم میں متعدد کالموں کے ذریعہ گروپ کردہ کالم میں اقدار کی رقم کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈوں میں ، آپ انضمام () فنکشن کا استعمال کرتے ہوئے دو ڈیٹا فریموں کو ضم یا شامل کرسکتے ہیں۔انضمام () فنکشن ایک عام کالم یا انڈیکس کی بنیاد پر دو یا زیادہ ڈیٹا فریموں سے قطاروں کو جوڑتا ہے۔یہ کئی قسم کے شامل ہونے کی فراہمی کرتا ہے ، جیسے اندرونی شمولیت ، بائیں شمولیت ، دائیں شمولیت ، اور بیرونی شمولیت۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT پانڈاس PD# پہلے ڈیٹا فریمیٹا 1 = {'ID' بنائیں: [1 ، 2 ، 3 ، 4] ، 'نام': ['جان' ، 'ایملی' ، 'ریان' ، 'لنڈا'] ، 'عمر': [28 ، 35 ، 42 ، 50]} df1 = pd.dataframe (ڈیٹا 1)# دوسرا ڈیٹا فریمیٹا 2 = {'id' بنائیں: [2 ، 3 ، 5] ، 'تنخواہ': [60000 ،55000 ، 65000] ، 'شہر': ['شکاگو' ، 'نیو یارک' ، 'لاس اینجلس']} DF2 = pd.dataframe (ڈیٹا 2)# 'ID' کالم میجرڈ_ڈیف = PD.Merge (DF1 پر مبنی ڈیٹا فیمز کو ضم کریں.فنکشن کو ڈیٹا فریمز DF1 اور DF2 پر بلایا جاتا ہے ، جس میں 'ID' کالم کو ضم کرنے کے لئے عام کالم کے طور پر بیان کیا جاتا ہے۔کس طرح = 'اندرونی' پیرامیٹر ایک اندرونی شمولیت کی وضاحت کرتا ہے ، جس کے نتیجے میں صرف عام قطاریں مربوط ڈیٹا فریم میں شامل ہوتی ہیں۔نتیجے میں ڈیٹا فریم ، ضم شدہ_ڈی ایف ، 'ID' کالم پر مبنی دونوں ڈیٹا فریموں کے ضم شدہ ڈیٹا پر مشتمل ہے۔ آپ پیرامیٹر کو تبدیل کرکے دوسری قسم کے شامل بھی کرسکتے ہیں۔مثال کے طور پر ، کس طرح = 'بائیں' بائیں بازو کو انجام دیتا ہے ، کس طرح = 'دائیں' دائیں شمولیت کو انجام دیتا ہے ، اور کس طرح = 'بیرونی' بیرونی شمولیت کو انجام دیتا ہے۔پیرامیٹر پرمثال کے طور پر: پائیتھون کوپی کوڈیمرجڈ_ ڈی ایف = پی ڈی.مریج (ڈی ایف 1 ، ڈی ایف 2 ، آن = ['آئی ڈی' ، 'سٹی'] ، کیسے = 'اندرونی') یہ 'ID' اور 'سٹی' کالم دونوں پر اندرونی شمولیت کا مظاہرہ کرتا ہے۔/ڈیٹا فریموں میں شامل ہونا آپ کو مشترکہ اقدار کی بنیاد پر مختلف ذرائع سے ڈیٹا اکٹھا کرنے کی اجازت دیتا ہے ، جس سے آپ کو مزید تجزیہ یا پروسیسنگ کے لئے ایک مستحکم ڈیٹاسیٹ بنانے کے قابل بناتا ہے۔"
    },
    {
        "Question": "ڈیٹا فریم کو ایس کیو ایلائٹ ڈیٹا بیس ٹیبل میں تبدیل کرنے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈوں میں ، آپ محور () یا پیوٹ_ٹیبل () فنکشن کا استعمال کرتے ہوئے ڈیٹا فریم کو محور کرسکتے ہیں۔جب آپ کسی ایک کالم میں اقدار کی بنیاد پر ڈیٹا فریم کو نئی شکل دینا چاہتے ہیں تو محور () فنکشن کا استعمال کیا جاتا ہے ، جبکہ جب آپ محور کے دوران اعداد و شمار کو جمع کرنا چاہتے ہیں تو پیوٹ_ٹیبل () فنکشن استعمال کیا جاتا ہے۔یہاں محور () کے استعمال کی ایک مثال ہے: PD## کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس ایک ڈیٹا فریمیٹا = {'تاریخ' بنائیں: ['2021-01-01' ، '2021-01-02' ، '2021-01' ، '2021-01' ، '2021-01-02 '] ،' شہر ': [' نیویارک '،' نیو یارک '،' لاس اینجلس '،' لاس اینجلس '] ،' درجہ حرارت ': [32 ، 30 ، 75 ، 77] ،' نمی': [80 ، 85 ، 45 ، 50]} df = pd.dataframe (ڈیٹا)#' سٹی 'کالم پییووٹڈ_ڈیف = df.pivot (انڈیکس =' تاریخ '، کالم =' شہر '، اقدار = پر مبنی ڈیٹا فریم پر محور'درجہ حرارت')# ڈسپلے ڈسپلےڈ ڈیٹا فیم پرنٹ (Pivoted_DF) آؤٹ پٹ: SQLCOPY Codecity لاس اینجلس نیو یارک ڈیٹ 2021-01-01 75 322021-01-02 77 30in اس مثال کے طور پر ، Pivot () فنکشن کو ڈیٹا فیم DF پر بلایا جاتا ہے 'کے ساتھ' 'تاریخ 'کالم انڈیکس کے طور پر مخصوص ،' سٹی 'کالم کالم کے طور پر مخصوص کیا گیا ہے ، اور' درجہ حرارت 'کالم اقدار کے طور پر مخصوص ہے۔نتیجے میں ڈیٹا فریم ، Pivoted_DF ، کو 'سٹی' کالم میں منفرد اقدار کی بنیاد پر تبدیل کیا جاتا ہے ، جس میں 'تاریخ' کالم کے ساتھ انڈیکس اور محور اقدار اسی درجہ حرارت کی حیثیت رکھتے ہیں۔ اگر آپ ایک سے زیادہ کالموں کی بنیاد پر محور کرنا چاہتے ہیں یا جمع کرنا چاہتے ہیں یا جمع کرنا چاہتے ہیں۔محور کے دوران ، آپ Pivot_table () فنکشن استعمال کرسکتے ہیں۔یہاں ایک مثال ہے: پائیٹون کوپی کوڈپیووٹ_ٹیبل = df.pivot_table (انڈیکس = 'تاریخ' ، کالم = 'شہر' ، اقدار = 'درجہ حرارت' ، Aggfunc = 'مطلب') یہ مثال ہر شہر اور تاریخ کے امتزاج کے اوسط درجہ حرارت کا حساب لگاتی ہے۔ڈیٹا فریم آپ کو اعداد و شمار کی ساخت کو تبدیل کرنے کی اجازت دیتا ہے ، جس سے تجزیہ کرنا یا مختلف شکل میں پیش کرنا آسان ہوجاتا ہے۔"
    },
    {
        "Question": "ڈیٹا فریم میں کالم کے مجموعی لاگ ریٹرن کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈوں میں ، آپ اسٹیک () اور غیر اسٹیک () طریقوں کا استعمال کرتے ہوئے ڈیٹا فریم میں کالموں کو اسٹیک یا اسٹیک کرسکتے ہیں۔ان طریقوں کا استعمال اعداد و شمار کو نئی شکل دینے کے لئے کیا جاتا ہے ، وسیع شکل (ایک سے زیادہ کالموں کے ساتھ) اور لمبی شکل (ایک ہی کالم کے ساتھ) کے درمیان تبدیل ہوتا ہے۔اسٹیک () اور اسٹیک () کے استعمال کی ایک مثال یہ ہے: PD## کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس ایک ڈیٹا فریمیٹا = {'نام': ['جان' ، 'ایملی' ، 'ریان'] ، 'ریاضی': [90 ، 85، 92] ، 'سائنس': [88 ، 93 ، 91] ، 'انگریزی': [86 ، 89 ، 90]} df = pd.dataframe (ڈیٹا)# کالموں کو ایک کثیر سطح کے انڈیکس اسٹیکڈ_ڈیف = ڈی ایف بنانے کے لئے کالموں کو اسٹیک کریں۔Set_index ('نام')۔ اسٹیک ()# اسٹیکڈ ڈیٹا فیم پرنٹ (اسٹیکڈ_ ڈی ایف) آؤٹ پٹ کو ڈسپلے کریں: گوکوپی کوڈ نام جان ریاضی 90 سائنس 88 انگریزی 88 انگریزی 85 سائنس 85 سائنس 93 انگریزی 89ryan ریاضی 92 سائنس 91 انگریزی 91 انگریزی 90dtype: INT64IN اس مثال ، اسٹیک () اسٹیک ()'نام' کالم کو انڈیکس کے طور پر ترتیب دینے کے بعد ڈیٹا فریم DF پر طریقہ کار طلب کیا جاتا ہے۔یہ باقی کالموں کو عمودی طور پر ڈھیر کرتا ہے ، اور دوسرے درجے کے طور پر اصل کالم ناموں کے ساتھ ملٹی لیول انڈیکس تیار کرتا ہے۔نتیجے میں ڈیٹا فریم ، اسٹیکڈ_ ڈی ایف میں ، اسٹیکڈ ویلیوز کے ساتھ ایک ہی کالم ہے۔ ڈیٹا کو غیر اسٹیک کرنے اور اسے اصل شکل میں دوبارہ تشکیل دینے کے ل you ، آپ اسٹیک () طریقہ استعمال کرسکتے ہیں: پائیٹون کوپی کوڈن اسٹیکڈ_ڈیف = اسٹیکڈ_ڈیف.ان اسٹیک ()# غیر اسٹیک ڈیٹا فیم پرنٹ ڈسپلے کریں.اس سے اعداد و شمار کو غیر اسٹیک کرتا ہے ، اور اسے ایک سے زیادہ کالموں کے ساتھ اصل وسیع فارمیٹ میں تبدیل کرتا ہے۔ اسٹیک () اور اسٹیک () کا استعمال کرتے ہوئے ، آپ وسیع اور لمبی شکلوں کے مابین ڈیٹا فریم کو نئی شکل دے سکتے ہیں ، جو تجزیہ یا اعداد و شمار کی کچھ اقسام کے لئے کارآمد ثابت ہوسکتا ہے۔تبدیلیاں"
    },
    {
        "Question": "ڈیٹا فریم میں باہمی مداخلت کرکے گمشدہ اقدار کو سنبھالنے کے لئے کوڈ لکھیں۔",
        "Answer": "ڈیٹا فریم کو ایک نمی سرنی میں تبدیل کرنے کے ل you ، آپ ڈیٹا فریم کی اقدار کی وصف کو استعمال کرسکتے ہیں۔اقدار کی وصف ڈیٹا فریم کے ڈیٹا کی ایک نمی سرنی نمائندگی لوٹاتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'تنخواہ': [[[28 ، 35 ، 42]50000 ، 60000 ، 55000]} df = pd.dataframe (ڈیٹا)# ڈیٹا فریم کو ایک numpy arrayarray = df.values میں تبدیل کریں numpy arrayprint (سرنی) آؤٹ پٹ کو ڈسپلے کریں: csscopy کوڈ [['جان' 28 50000] ['ایمل''35 60000] [' ریان '42 55000]] اس مثال میں ، اقدار کی وصف کو ڈیٹا فریم ڈی ایف کو ایک نپی سرنی میں تبدیل کرنے کے لئے استعمال کیا جاتا ہے۔نتیجے میں سرنی متغیر میں ڈیٹا فریم کے اعداد و شمار کو دو جہتی نیپی سرنی فارمیٹ میں شامل کیا گیا ہے۔ نوٹ کریں کہ نمی سرنی میں ایک ڈیٹا کی قسم ہوگی جو ڈیٹا فریم میں تمام مختلف قسم کی اقدار کو ایڈجسٹ کرتی ہے۔اس معاملے میں ، نمی سرنی میں ڈیٹا کی قسم کی چیز ہوتی ہے کیونکہ اس میں تار اور عددی اقدار کا مرکب ہوتا ہے۔اگر ڈیٹا فریم میں موجود تمام کالموں میں ایک ہی ڈیٹا کی قسم ہوتی ہے تو ، نتیجے میں نیپی سرنی میں اس ڈیٹا کی قسم ہوگی۔ ڈیٹا فریم کو نپی سرنی میں تبدیل کرنا مفید ثابت ہوسکتا ہے اگر آپ کو عددی گنتی انجام دینے کی ضرورت ہو یا ڈیٹا پر numpy- مخصوص افعال استعمال کرنے کی ضرورت ہو۔"
    },
    {
        "Question": "دو ڈیٹا ٹائم کالموں کے مابین فرق کی بنیاد پر ڈیٹا فریم میں نیا کالم بنانے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈوں میں ، آپ ریاضی آپریٹرز جیسے +، -، *، /، اور ٪ کا استعمال کرکے کالموں کے مابین ریاضی کی کارروائیوں کو انجام دے سکتے ہیں۔یہ آپریٹرز ڈیٹا فریم کے کالموں پر عنصر کے لحاظ سے کام کرتے ہیں ، کالموں کے متعلقہ عناصر کے مابین آپریشن انجام دیتے ہیں۔یہاں ایک مثال یہ ہے: PD## AS PD# ایک ڈیٹا فریمیٹا = {'A': [1 ، 2 ، 3 ، 4] ، 'B': [5 ، 6 ، 7 ، 8] ، 'C': [9 ، [9 ، بنائیں10 ، 11 ، 12]} df = pd.dataframe (ڈیٹا) # کالم ایس ڈی ایف ['Sum'] = df ['a'] + df ['b'] # اضافی ڈی ایف ['فرق'] = df [کے درمیان ریاضی کی کارروائیوں کو انجام دیں۔'c'] - df ['a'] # گھٹاؤ ondf ['product'] = df ['b'] * df ['c'] # ضرب ['ڈویژن'] = df ['c'] / df ['B '] # ڈویژن ڈی ایف [' ماڈیولس '] = DF [' C '] ٪ DF [' B '] # ماڈیولس # کمپیوٹڈ کالم پرنٹ (DF) آؤٹ پٹ کے ساتھ ڈیٹا فریم ڈسپلے کریں: ریاضی کا کوڈ A B C SUM فرق پروڈکٹ ڈویژن Modulus0 1 5 96 8 45 1.8 41 2 6 10 8 8 60 1.6666667 42 3 7 11 10 8 77 1.571429 43 4 8 12 12 8 96 1.5 4in اس مثال کے طور پر ، ڈیٹا فریم ڈی ایف کے کالموں کے مابین ریاضی کی کارروائی کی جاتی ہے۔اس کے نتیجے میں اقدار ڈیٹا فریم میں نئے کالموں کو تفویض کی گئی ہیں: 'رقم' ، 'فرق' ، 'پروڈکٹ' ، 'ڈویژن' ، اور 'ماڈیولس'۔ریاضی کے آپریٹرز +، -، *، /، اور ٪ کو بالترتیب اضافے ، گھٹاؤ ، ضرب ، تقسیم ، اور ماڈیولس آپریشنز کے لئے استعمال کیا جاتا ہے۔) ، NP.EXP () ، یا NP.SQRT ()۔ریاضی کے کاموں کو نمی افعال کے ساتھ جوڑ کر ، آپ ڈیٹا فریم کالموں پر وسیع پیمانے پر حساب کتاب انجام دے سکتے ہیں۔ ڈیٹا فریم میں کالموں کے مابین ریاضی کی کارروائیوں کو بہتر بناتا ہے تو آپ موجودہ اعداد و شمار کی بنیاد پر نئی بصیرت اور کمپیوٹ سے حاصل کردہ مقدار کو حاصل کرنے کی اجازت دیتا ہے۔"
    },
    {
        "Question": "ڈیٹا فریم میں کالم میں منفرد اقدار کی فریکوئینسی گنتی کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "موجودہ کالموں پر مبنی ڈیٹا فریم میں نیا کالم بنانے کے ل you ، آپ کسی قدر کو تفویض کرسکتے ہیں یا ڈیٹا فریم کے کالم پر کسی فنکشن کا اطلاق کرسکتے ہیں۔اس کو پورا کرنے کے لئے کچھ طریقے یہ ہیں: براہ راست ایک قدر تفویض کریں: پائیتھون کوپی کوڈڈف ['نیو کالم'] = موجودہ کالموں کے مابین ویلیو پرفارم ریاضی کی کارروائیوں: پائیتھون کوپی کوڈڈف ['نیو کلون'] = ڈی ایف ['کالم 1'] + ڈی ایف ['کالم 2']موجودہ کالموں پر ایک فنکشن کا اطلاق کریں: پائیٹون کوپی کوڈیڈف My_function (قطار): # موجودہ کالموں پر مبنی نئی قدر کی گنتی کرنے کے لئے منطق رزلٹ ڈی ایف ['نیو کلون \"] = df.apply (my_function ، محور = 1) یہاں ایک مثال ہے جو ان نقطہ نظر کو ظاہر کرتی ہے۔پی ڈی کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'تنخواہ': [50000 ، 60000 ،55000]} df = pd.dataframe (ڈیٹا)# ایک نیا کالم ڈی ایف بنانے کے لئے براہ راست ایک قیمت تفویض کریں ['بونس'] = 1000# کالموں کے مابین ریاضی کا آپریشن انجام دیں ایک نیا کالم ڈی ایف بنانے کے لئے ['مکمل طور پر'] = DF ['تنخواہ'] + ڈی ایف ['بونس']# موجودہ کالم ایس ڈی ای ایف ٹیکس_اماؤنٹ (قطار) پر مبنی ایک نیا کالم بنانے کے لئے ایک فنکشن کا اطلاق کریں: اگر قطار ['تنخواہ']> 50000: واپسی قطار ['تنخواہ'] * 0.2 دیگر: واپسی کی قطار ['تنخواہ'] * 0.1df ['ٹیکس'] = df.apply (ٹیکس_اماؤنٹ ، محور = 1)# نئے کالم پرنٹ (ڈی ایف) آؤٹ پٹ کے ساتھ ڈیٹا فریم ڈسپلے کریں: یامل کوپی کوڈ کا نام عمر کی تنخواہ بونس مکمل طور پر ٹیکس 0 جان 28 50000 1000 5000.01ایملی 35 60000 1000 61000 12000.02 ریان 42 55000 1000 56000 11000.0.0 اس مثال کے طور پر ، ایک نیا کالم 'بونس' 1000 کی مستقل قیمت تفویض کرکے تیار کیا گیا ہے۔ 'تنخواہ' کے مابین ریاضی کے عمل کو انجام دے کر ایک اور نیا کالم 'مکمل کالا' تخلیق کیا گیا ہے۔کالم اور 'بونس' کالم۔آخر میں ، محور = 1 کے ساتھ لاگو () طریقہ کار کا استعمال کرتے ہوئے ڈیٹا فریم کی ہر صف میں ٹیکس_اوماؤنٹ () فنکشن کا اطلاق کرکے ایک نیا کالم 'ٹیکس' تشکیل دیا جاتا ہے۔نتیجے میں ڈیٹا فریم ڈی ایف میں نئے بنائے گئے کالموں کے ساتھ اصل کالم شامل ہیں۔ موجودہ کالموں پر مبنی نئے کالم بنانا ، آپ اپنے ڈیٹا فریم میں موجود ڈیٹا سے اضافی بصیرت یا کمپیوٹ حاصل کردہ مقدار حاصل کرسکتے ہیں۔"
    },
    {
        "Question": "\"مختلف تاریخ کی شکلوں کو سنبھالتے ہوئے ، ڈیٹا فریم میں ڈایٹ ٹائم آبجیکٹ میں تار کے کالم کو تبدیل کرنے کے لئے کوڈ لکھیں۔\"",
        "Answer": "پانڈوں میں ، آپ مختلف طریقوں کا استعمال کرتے ہوئے ڈیٹا فریم میں ڈپلیکیٹ اقدار کو سنبھال سکتے ہیں۔یہاں کچھ عام نقطہ نظر ہیں: ڈپلیکیٹ قطاروں کی نشاندہی کرنا: ڈیٹا فریم میں نقل قطاروں کی جانچ پڑتال کے ل you ، آپ نقل () طریقہ استعمال کرسکتے ہیں۔یہ ایک بولین سیریز کو لوٹاتا ہے جس سے یہ ظاہر ہوتا ہے کہ آیا ہر صف پچھلی قطار کا نقل ہے۔. ڈوپلیکیٹڈ (رکھیں = غلط) ڈپلیکیٹ_ڈیف = ڈی ایف [ڈپلیکیٹ_روز] پرنٹ (ڈپلیکیٹ_ ڈی ایف) ڈپلیکیٹ قطار کو ہٹانا: ڈیٹا فریم سے ڈپلیکیٹ قطار کو ہٹانے کے ل you ، آپ ڈراپ_ڈوپلیکیٹس () طریقہ استعمال کرسکتے ہیں۔پہلے سے طے شدہ طور پر ، یہ ہر نقل کی قطار کی پہلی موجودگی کو برقرار رکھتا ہے اور اس کے بعد کی نقلیں ہٹا دیتا ہے۔سب سیٹ پیرامیٹر کے ساتھ ڈپلیکیٹڈ () اور ڈراپ_ڈوپلیکیٹس () طریقوں۔کالم کے نام یا کالم ناموں کی ایک فہرست پر سب سیٹ سیٹ کریں جس پر آپ ڈپلیکٹس کی جانچ کرنا چاہتے ہیں۔') ڈپلیکیٹ اقدار کی گنتی: کسی کالم میں ہر انوکھی قدر کی موجودگی کو گننے کے ل you ، آپ ویلیو_کاؤنٹس () طریقہ استعمال کرسکتے ہیں۔آپ کی مخصوص ضروریات کے مطابق ڈیٹا فریم۔آپ ڈپلیکیٹ قطاروں کی شناخت اور ڈسپلے کرنے ، ڈپلیکیٹ قطاریں ہٹانے ، یا مخصوص کالموں کی بنیاد پر ڈپلیکیٹس کو سنبھالنے کا انتخاب کرسکتے ہیں۔اعداد و شمار کی سالمیت کو برقرار رکھنے اور درست تجزیہ کو یقینی بنانے کے لئے ڈپلیکیٹ اقدار کو سنبھالنا بہت ضروری ہے۔"
    },
    {
        "Question": "ڈیٹا فریم کے کالم میں لگاتار قطاروں کے مابین فیصد کی تبدیلی کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈوں میں ، آپ ایک ڈیٹا فریم کو وسیع سے لمبی شکل تک اور اس کے برعکس پگھل () اور محور () افعال کا استعمال کرتے ہوئے دوبارہ شکل دے سکتے ہیں۔یہ فنکشن ڈیٹا فریم کو \"انپیوٹس\" \"، متعدد کالموں کو ایک ہی کالم میں تبدیل کرنا اور متغیر ناموں اور اقدار کو ذخیرہ کرنے کے لئے نئے کالم تیار کرنا۔یہاں ایک مثال یہ ہے: PD## PD# کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس ایک وسیع فارمیٹ ڈیٹافریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'ریاضی': [90 ، 85 ، 92] ، 'سائنس': [88 ، 93 ، 91] ،' انگریزی ': [86 ، 89 ، 90]} df_wide = pd.dataframe (ڈیٹا)# ڈیٹا فریم کو وسیع سے طویل فارمیٹڈف_لونگ = pd.melt (df_wide ، id_vars =' نام کی نئی شکل دیں۔'، var_name =' مضمون '، value_name =' اسکور ')# لانگ فارمیٹ ڈیٹا فیم پرنٹ (DF_LONG) آؤٹ پٹ ڈسپلے کریں: مارک ڈاون کاپی کوڈ کا نام سبجیکٹ اسکور 0 جان ریاضی 901 ایملی ریاضی 852 ریان ریاضی 923 جان سائنس 884 ایملی سائنس 935 ریان سائنس 916 جانانگریزی 867 ایملی انگلش 898 ریان انگریزی 90in اس مثال کے طور پر ، پگھل () فنکشن وسیع فارمیٹ ڈیٹا فریم DF_WID پر لاگو ہوتا ہے۔ID_VARS پیرامیٹر کالم (زبانیں) کی وضاحت کرتا ہے جو شناخت کنندگان کے طور پر رہنا چاہئے (اس معاملے میں ، 'نام' کالم)۔var_name پیرامیٹر نئے کالم کا نام بتاتا ہے جو متغیر ناموں (اس معاملے میں ، 'مضمون') کو اسٹور کرے گا۔ویلیو_ نام کا پیرامیٹر نئے کالم کا نام بتاتا ہے جو اقدار کو ذخیرہ کرے گا (اس معاملے میں ، 'اسکور')۔نتیجے میں ڈیٹا فریم DF_LONG طویل شکل میں ہے ، ہر قطار 'نام' ، 'مضمون' ، اور 'اسکور' کے انوکھے امتزاج کی نمائندگی کرتی ہے۔ طویل سے وسیع شکل تک ڈیٹا فریم کو نئی شکل دینے کے ل you ، آپ محور () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن ڈیٹا فریم کو \"محور\" ، ایک کالم سے منفرد اقدار کو متعدد کالموں میں تبدیل کرتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT Pandas As Pd# ایک طویل فارمیٹ ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'جان' ، 'یملی' ، 'ایملی' ، 'ریان' ، 'ریان'] ، 'مضمون': [' ریاضی '،' سائنس '،' ریاضی '،' سائنس '،' ریاضی '،' سائنس '] ،' اسکور ': [90 ، 88 ، 85 ، 93 ، 92 ، 91]} df_long = pd.ڈیٹا فریم (ڈیٹا)# ڈیٹا فریم کو طویل فارمیٹ سے وسیع فارمیٹڈف_ایڈ = df_long.pivot (اشاریہ = 'نام' ، کالم = 'مضمون' ، اقدار = 'اسکور') تک دوبارہ محفوظ کریں# وسیع فارمیٹ ڈیٹا فیم پرنٹ (DF_WIDE) آؤٹ پٹ کو ڈسپلے کریں: کاپی کوڈسوبیکجریاضی سائنس کا نام ایملی 85 93 جان 90 88ryan 92 91 91 اس مثال کے طور پر ، محور () فنکشن طویل فارمیٹ ڈیٹا فریم DF_LONG پر لاگو ہوتا ہے۔انڈیکس پیرامیٹر کالم (زبانیں) کی وضاحت کرتا ہے جو انڈیکس کے طور پر رہنا چاہئے (اس معاملے میں ، 'نام' کالم)۔کالم پیرامیٹر کالم کی وضاحت کرتا ہے جس میں الگ الگ کالموں میں تبدیل ہونے والی انوکھی اقدار پر مشتمل ہے (اس معاملے میں ، 'مضمون' کالم)۔اقدار پیرامیٹر کالم کی وضاحت کرتا ہے جس میں نئے کالموں میں رکھی جانے والی اقدار پر مشتمل ہے (اس معاملے میں ، 'اسکور'"
    },
    {
        "Question": "کسی دوسرے کالم کو وزن کے بطور استعمال کرتے ہوئے کسی ڈیٹا فریم میں کالم کے وزن والے وسط کا حساب لگانے کے لئے کوڈ لکھیں۔",
        "Answer": "پانڈاس ڈیٹا ٹائم ڈیٹا کو موثر انداز میں سنبھالنے کے لئے مختلف فنکشنلیاں مہیا کرتا ہے۔پانڈوں میں ڈیٹ ٹائم ڈیٹا کے ساتھ کام کرنے کے لئے کچھ عام کاروائیاں اور تکنیک یہ ہیں: ڈور کو ڈیٹ ٹائم میں تبدیل کرنا: اگر آپ کا ڈیٹ ٹائم ڈیٹا اسٹرنگ فارمیٹ میں ہے تو ، آپ اسے ڈیٹ ٹائم فارمیٹ میں تبدیل کرنے کے لئے ٹو_ڈیٹ ٹائم () فنکشن کا استعمال کرسکتے ہیں۔فارمیٹ پیرامیٹر کی وضاحت کرکے ، آپ ان پٹ سٹرنگ کی شکل کی وضاحت کرسکتے ہیں۔اجزاء: آپ ڈیٹ ٹائم کالم کے مختلف اجزاء نکال سکتے ہیں ، جیسے سال ، مہینہ ، دن ، گھنٹہ ، منٹ ، اور دوسرا ، ڈی ٹی ایکسیسر ڈاٹ پیتھون کوپی کوڈڈف ['سال'] = ڈی ایف ['تاریخ']۔ dt.yeardf['مہینہ'] = df ['تاریخ']ایک مخصوص تعدد پر مبنی مجموعی یا ڈاون سیمپل ڈیٹا ، جیسے گھنٹہ ، روزانہ ، ماہانہ ، وغیرہ۔ پیتھون کوپی کوڈڈف_ریسمپلڈ = df.resample ('d')۔ رقم () # روزانہ تعدد اور رقم کی قیمتوں میں دوبارہ نمونہ: آپ تاریخوں کو منتقل کرسکتے ہیں۔شفٹ () کے طریقہ کار کا استعمال کرتے ہوئے ایک ڈیٹ ٹائم کالم کو آگے یا پیچھے کی طرف۔یہ وقت کے اختلافات کا حساب لگانے یا پیچھے رہ جانے والے متغیرات بنانے کے ل useful مفید ثابت ہوسکتا ہے۔تاریخ کی حدود ، آپ موازنہ آپریٹرز کے ساتھ بولین انڈیکسنگ کا استعمال کرسکتے ہیں۔آپریٹر کا استعمال کرتے ہوئے۔نتیجہ ایک ٹائم ڈیلٹا آبجیکٹ ہے ، جو دو تاریخوں یا اوقات کے درمیان فرق کی نمائندگی کرتا ہے۔ٹائم زون سے واقف ڈیٹ ٹائم کالموں کو تبدیل کرنے اور ٹائم زون کے تبادلوں کو انجام دینے کے طور پر۔ پیتھون کوپی کوڈڈف ['ڈیٹ ٹائم'] = ڈی ایف ['ڈیٹ ٹائم']['ڈیٹ ٹائم']لائبریری ڈیٹ ٹائم ڈیٹا کو جوڑ توڑ ، تجزیہ کرنے اور دیکھنے کے لئے وسیع صلاحیتوں کو فراہم کرتی ہے ، جس سے آپ کو نفیس کاروائیاں انجام دینے اور وقت پر مبنی ڈیٹاسیٹس سے قیمتی بصیرت حاصل کرنے کے قابل بناتا ہے۔"
    },
    {
        "Question": "تحقیقاتی اعداد و شمار کا تجزیہ (ای ڈی اے) کیا ہے اور ڈیٹا تجزیہ میں یہ کیوں اہم ہے؟",
        "Answer": "پانڈوں میں ، آپ متعدد تکنیکوں کا استعمال کرتے ہوئے دوٹوک متغیر کو عددی اقدار میں تبدیل کرسکتے ہیں۔یہاں تین عام طریقے ہیں: لیبل انکوڈنگ: لیبل انکوڈنگ ایک متغیر متغیر میں ہر انوکھے زمرے کو ایک انوکھا عددی لیبل تفویض کرتا ہے۔اسکلرن کی لیبلینکوڈر کلاس۔ پریپروسیسنگ ماڈیول کو لیبل انکوڈنگ کے لئے استعمال کیا جاسکتا ہے۔ایک گرم انکوڈنگ ایک متغیر متغیر میں ہر انوکھے زمرے کے لئے بائنری کالم بناتا ہے۔پانڈاس ایک گرم انکوڈنگ کو انجام دینے کے لئے get_dummies () فنکشن مہیا کرتا ہے۔یہ نقشہ () فنکشن.پیتھون کوپی کوڈ میپنگ = {'زمرہ 1': 0 ، 'زمرہ 2': 1 ، 'زمرہ 3': 2} ڈی ایف ['انکوڈڈ کالم'] = ڈی ایف ['زمرہ دار کالم'] کا استعمال کرتے ہوئے کیا جاسکتا ہے۔ نقشہ (میپنگ (میپنگ (میپنگ (میپنگ) ہر طریقہ کے اپنے فوائد اور تحفظات ہیں۔لیبل انکوڈنگ زمرے کے مابین عام تعلقات کو محفوظ رکھتی ہے لیکن غیر اعلانیہ آرڈینٹی کو متعارف کر سکتی ہے۔ایک گرم انکوڈنگ آرڈینٹی کے مسائل سے گریز کرتی ہے لیکن کالموں کی ایک بڑی تعداد کا باعث بن سکتی ہے۔کسٹم میپنگ آپ کو میپنگ کو واضح طور پر بیان کرنے کی اجازت دیتی ہے لیکن دستی تفصیلات کی ضرورت ہوتی ہے۔ یہ ضروری ہے کہ آپ کے زمرہ جات کی نوعیت اور آپ کے تجزیے کی ضروریات کی بنیاد پر مناسب طریقہ کا انتخاب کریں۔ان عوامل پر غور کریں جیسے منفرد زمروں کی تعداد ، آرڈینٹی کی موجودگی ، اور اس کے بعد کے تجزیہ یا مشین لرننگ ماڈل پر اثرات۔"
    },
    {
        "Question": "آپ ازگر میں ای ڈی اے کے لئے ضروری لائبریریوں کو کیسے درآمد کرتے ہیں؟",
        "Answer": "پانڈوں میں CSV فائل میں ڈیٹا فریم کو بچانے کے ل you ، آپ TO_CSV () طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'تنخواہ': [[[28 ، 35 ، 42]50000 ، 60000 ، 55000]} df = pd.dataframe (ڈیٹا)# ڈیٹا فریم کو CSV fiderf.to_csv ('آؤٹ پٹ سی ایس وی' ، انڈیکس = غلط) میں محفوظ کریں ، اس مثال میں ، TO_CSV () کے طریقہ کار کو ڈیٹا فریم پر بلایا گیا ہے۔ڈی ایف۔پہلا پیرامیٹر فائل کا راستہ یا فائل کا نام ہے جہاں آپ CSV فائل کو محفوظ کرنا چاہتے ہیں۔اس معاملے میں ، ہم اسے 'آؤٹ پٹ سی ایس وی' کے طور پر محفوظ کرتے ہیں۔انڈیکس پیرامیٹر کو CSV فائل سے انڈیکس کالم کو خارج کرنے کے لئے غلط پر سیٹ کیا گیا ہے۔پہلے سے طے شدہ طور پر ، کالم کے نام CSV فائل میں پہلی صف کے طور پر شامل کیے جائیں گے۔ اس کوڈ کو چلانے کے بعد ، موجودہ ورکنگ ڈائرکٹری میں 'آؤٹ پٹ سی ایس وی' نامی ایک فائل بنائی جائے گی ، جس میں CSV فارمیٹ میں ڈیٹا فریم کے ڈیٹا پر مشتمل ہے۔آپ اپنی ضروریات کی بنیاد پر اضافی پیرامیٹرز ، جیسے ڈیلیمیٹر ، ہیڈر ، انکوڈنگ ، اور دیگر کی وضاحت کرکے TO_CSV () کے طریقہ کار کو اپنی مرضی کے مطابق بنا سکتے ہیں۔کسی ڈیٹا فریم کو کسی CSV فائل میں محفوظ کرنے کے لئے دستیاب اختیارات کے بارے میں مزید معلومات کے لئے پانڈاس دستاویزات کا حوالہ دیں۔"
    },
    {
        "Question": "ای ڈی اے کے لئے آپ ڈیٹاسیٹ کو پانڈاس ڈیٹا فریم میں کیسے لوڈ کرتے ہیں؟",
        "Answer": "پانڈوں میں ڈیٹا فریم میں سی ایس وی فائل سے ڈیٹا پڑھنے کے ل you ، آپ ریڈ_ سی ایس وی () فنکشن استعمال کرسکتے ہیں۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT Pandas جیسے PD# CSV فائل سے ڈیٹا کو DATAFRAMEDF = PD.READ_CSV ('data.csv') میں پڑھیں اس مثال میں ، READ_CSV () فنکشن کہا جاتا ہے ، اور پہلا پیرامیٹر فائل کا راستہ ہے۔یا CSV فائل کا فائل نام جو آپ پڑھنا چاہتے ہیں۔اس معاملے میں ، ہم فرض کرتے ہیں کہ فائل کا نام 'data.csv'.ped ڈیفالٹ کے ذریعہ رکھا گیا ہے ، Read_csv () فرض کرتا ہے کہ CSV فائل میں کالم کے ناموں کے ساتھ ہیڈر قطار ہے ، اور اس میں اقدار کو الگ کرنے کے لئے کوما (،) کو ڈیمیمیٹر کے طور پر استعمال کیا جاتا ہے۔ہر صف میںاگر آپ کی CSV فائل میں ایک مختلف ڈیمیمیٹر ہے تو ، آپ اسے ڈیمیمیٹر یا ایس ای پی پیرامیٹر کا استعمال کرتے ہوئے ، جیسے pd.read_csv ('data.csv' ، ڈیلیمیٹر = '؛') استعمال کرکے اس کی وضاحت کرسکتے ہیں۔کسی متغیر کو تفویض کریں ، اس معاملے میں ، ڈی ایف۔اس کے بعد آپ پانڈاس کا استعمال کرتے ہوئے ڈیٹا فریم پر مختلف آپریشنز اور تجزیے انجام دے سکتے ہیں۔ اگر سی ایس وی فائل میں کوئی ہیڈر قطار نہیں ہے تو ، آپ ہیڈر پیرامیٹر کو کسی کو بھی سیٹ نہیں کرسکتے ہیں اور بعد میں کالم کے ناموں کو دستی طور پر تفویض کرسکتے ہیں ، یا آپ نام پیرامیٹر کا استعمال کرتے ہوئے کالم کے ناموں کی وضاحت کرسکتے ہیں ، جیسےpd.read_csv ('data.csv' ، ہیڈر = کوئی نہیں ، نام = ['Col1' ، 'Col2' ، 'Col3'])۔ اضافی طور پر ، پانڈاس مختلف CSV فائل فارمیٹس کو سنبھالنے کے لئے بہت سے دوسرے اختیارات فراہم کرتا ہے ، جیسے گمشدہ اقدار کو سنبھالنا۔، کالموں کے لئے ڈیٹا کی اقسام کی وضاحت کرنا ، اور بہت کچھ۔سی ایس وی فائلوں کو ڈیٹا فریم میں پڑھنے کے لئے دستیاب اختیارات کے بارے میں مزید معلومات کے ل You آپ پانڈاس دستاویزات کا حوالہ دے سکتے ہیں۔"
    },
    {
        "Question": "آپ ڈیٹا فریم کے طول و عرض (قطار اور کالم) کو کس طرح چیک کرتے ہیں؟",
        "Answer": "ڈیٹا فریم میں آؤٹ لیئرز کو سنبھالنا مختلف تکنیکوں کا استعمال کرتے ہوئے کیا جاسکتا ہے۔یہاں کچھ عام نقطہ نظر ہیں: آؤٹ لیئرز کی نشاندہی کرنا: پہلے ، اپنے ڈیٹا فریم میں آؤٹ لیئرز کی شناخت کرنا ضروری ہے۔آؤٹ لیئرز کا پتہ لگانے کے ل You آپ اعداد و شمار کے طریقوں ، تصور ، یا ڈومین کے علم کا استعمال کرسکتے ہیں۔کچھ عام طریقوں میں شامل ہیں: باکس پلاٹ: باکس پلاٹوں کا استعمال کرتے ہوئے ہر عددی کالم کی تقسیم کا تصور کریں اور وسوسوں سے باہر کسی بھی نکات کو ممکنہ آؤٹ لیئرز کے طور پر شناخت کریں۔ایک زیڈ سکور کسی خاص دہلیز (جیسے ، 3) کے طور پر آؤٹ لیئرز ڈاٹ آئی کیو آر (انٹرکورٹائل رینج) کے اوپر: ہر عددی کالم کے لئے آئی کیو آر کا حساب لگائیں اور کسی خاص حد سے باہر پوائنٹس پر غور کریں (جیسے IQR 1.5 گنا)آؤٹ لیئرز: ایک بار جب آؤٹ لیئرز کی نشاندہی ہوجاتی ہے تو ، آپ ان کو ہٹانے یا اپنے ڈیٹا فریم سے فلٹر کرنے کا انتخاب کرسکتے ہیں۔تاہم ، یہ ضروری ہے کہ آپ اپنے ڈیٹا اور تجزیہ پر آؤٹ لیئرز کو ہٹانے کے اثرات پر غور سے غور کریں۔آؤٹ لیئرز کو ہٹانا قیمتی معلومات کے ضائع ہونے یا آپ کے تجزیے کو تعصب کا باعث بن سکتا ہے۔اگر آپ آؤٹ لیئرز کو ہٹانے کا فیصلہ کرتے ہیں تو ، آپ آؤٹ لیئرز پر مشتمل قطاروں کو فلٹر کرنے کے لئے ڈراپ () طریقہ یا بولین انڈیکسنگ کا استعمال کرسکتے ہیں۔۔اس سے مجموعی تقسیم کو محفوظ رکھتے ہوئے باہر جانے والوں کے اثر و رسوخ کو کم کرنے میں مدد ملتی ہے۔آپ عددی کالم میں آؤٹ لیئرز کو جیتنے کے لئے scipy.stats.mstats.winsore () فنکشن استعمال کرسکتے ہیں۔ڈی ایف ['ونسورائزڈ کالم'] = ونسورائزڈ_ ویلیو اسٹراانسفارمیشن: کچھ معاملات میں ، آپ کے ڈیٹا میں ریاضی کی تبدیلیوں کا اطلاق کرنے سے باہر جانے والوں کے اثرات کو کم کرنے میں مدد مل سکتی ہے۔مثال کے طور پر ، آپ انتہائی اقدار کے اثر و رسوخ کو کم کرنے کے لئے کالم کے لوگرتھم یا مربع روٹ لے سکتے ہیں۔آپ مضبوط اعدادوشمار کے طریقوں کا استعمال کرسکتے ہیں جو باہر جانے والوں کے لئے کم حساس ہیں۔مثال کے طور پر ، آپ وسط کو مرکزی رجحان کی پیمائش کے طور پر استعمال کرسکتے ہیں۔ڈیٹا ، آپ کے تجزیے کا سیاق و سباق ، اور آپ کے منصوبے کے اہداف۔احتیاط کا استعمال کرنا ضروری ہے اور آپ کے ڈیٹا اور اس کے بعد کے تجزیوں پر آؤٹ لیئر ہینڈلنگ تکنیک کے اثرات کا بغور جائزہ لینا ضروری ہے۔"
    },
    {
        "Question": "ڈیٹا کا جائزہ لینے کے لئے آپ ڈیٹا فریم کی پہلی چند قطاریں کیسے ظاہر کرتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ Pivot_table () فنکشن کا استعمال کرتے ہوئے ایک پائیوٹ ٹیبل تشکیل دے سکتے ہیں۔ایک محور ٹیبل آپ کو ایک یا زیادہ کالموں کی بنیاد پر اعداد و شمار کا خلاصہ اور مجموعی ڈیٹا کی اجازت دیتا ہے ، جس سے اعداد و شمار کی کراس ٹیبلولیشن مل جاتی ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD## ایک ڈیٹا فریمیٹا = {'زمرہ' بنائیں: ['a' ، 'b' ، 'a' ، 'b' ، 'a' ، 'b'] ، 'آئٹم': [[['x' ، 'x' ، 'y' ، 'Y' ، 'z' ، 'z'] ، 'قدر': [10 ، 15 ، 20 ، 25 ، 30 ، 35]} df = pd.dataframe (ڈیٹا)# ایک Pivot tablepivot_table = df.pivot_table (index = 'زمرہ' ، کالم = 'آئٹم' ، اقدار = 'ویلیو' ، Aggfunc = 'رقم') بنائیں ، اس مثال میں ، Pivot_table () فنکشن ڈیٹا فریم DF پر بلایا گیا ہے۔انڈیکس پیرامیٹر کالم (زبانیں) کی وضاحت کرتا ہے جس کے نتیجے میں پیوٹ ٹیبل کے اشاریہ کے طور پر استعمال کیا جائے ، کالم پیرامیٹر کالم (زبانیں) کی وضاحت کرتا ہے جو محور کی جدول کے کالموں کے طور پر استعمال ہوتا ہے ، اور اقدار پیرامیٹر کالم کی وضاحت کرتا ہے۔مجموعی اور خلاصہ۔ مذکورہ کوڈ میں ، ہم 'زمرہ' کے ساتھ انڈیکس کے ساتھ ایک محور ٹیبل تیار کرتے ہیں ، کالم کے طور پر 'آئٹم' ، اور اقدار کے طور پر 'قدر' کرتے ہیں۔Aggfunc پیرامیٹر 'رقم' پر سیٹ کیا گیا ہے ، اس بات کا اشارہ ہے کہ محور ٹیبل میں اقدار 'ویلیو' کالم میں متعلقہ اقدار کا مجموعہ ہونی چاہئے۔ نتیجے میں محور ٹیبل میں 'زمرہ' انڈیکس ، 'آئٹم' کے طور پر ہوگا۔کالم ، اور مجموعی اقدار کو ٹیبل کی قدر کے طور پر۔کسی بھی گمشدہ اقدار کو پہلے سے طے شدہ طور پر نان سے بھر دیا جائے گا۔ آپ اضافی پیرامیٹرز کی وضاحت کرکے Pivot_table () فنکشن کو مزید اپنی مرضی کے مطابق بناسکتے ہیں ، جیسے ایک مخصوص قدر کے ساتھ گمشدہ اقدار کو پُر کرنے کے لئے Fil_value ، سبٹوٹل اور گرینڈ کل قطاروں/کالموں کو شامل کرنے کے لئے مارجن ، اور دیگر شامل ہیں۔، آپ کی ضروریات کی بنیاد پر۔محور کی میزیں بنانے کے لئے دستیاب اختیارات کے بارے میں مزید معلومات کے لئے پانڈاس دستاویزات کا حوالہ دیں۔"
    },
    {
        "Question": "آپ ڈیٹا فریم میں ہر کالم کے ڈیٹا کی اقسام کو کس طرح چیک کرتے ہیں؟",
        "Answer": "ڈیٹا فریم میں کالموں کے مابین ارتباط کا حساب لگانے کے ل you ، آپ پانڈوں میں کور () کا طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال یہ ہے: PD## AS PD# ایک ڈیٹا فریمیٹا = {'کالم 1': [1 ، 2 ، 3 ، 4 ، 5] ، 'کالم 2': [2 ، 4 ، 6 ، 8 ، 10] ، 'کالم 3' بنائیں۔: [3 ، 6 ، 9 ، 12 ، 15]} df = pd.dataframe (ڈیٹا)# ارتباط میٹرکسکوریلیشن_میٹرکس = df.corr () کا حساب لگائیں اس مثال میں ، کور () طریقہ کو ڈیٹا فریم ڈی ایف پر کہا جاتا ہے۔کور () کا طریقہ ڈیٹا فریم کے کالموں کے مابین جوڑے کے ارتباط کا حساب لگاتا ہے۔ اس کے نتیجے میں ارتباط میٹرکس ایک ڈیٹا فریم ہے جہاں ہر سیل دو کالموں کے مابین ارتباط کے گتانک کی نمائندگی کرتا ہے۔ارتباط کے گتانک کی حد -1 سے 1 تک ہوتی ہے ، جہاں -1 ایک کامل منفی ارتباط کی نشاندہی کرتا ہے ، 1 ایک کامل مثبت ارتباط کی نشاندہی کرتا ہے ، اور 0 کسی بھی ارتباط کی نشاندہی نہیں کرتا ہے۔ پہلے سے طے شدہ ، کور () طریقہ کار پیئرسن ارتباط کے گتانک کا استعمال کرتا ہے ، جو لکیری پیمائش کرتا ہے۔متغیر کے مابین تعلقات۔آپ کور () طریقہ کار کے طریقہ کار پیرامیٹر کا استعمال کرکے مختلف ارتباط کے طریقوں کی وضاحت کرسکتے ہیں۔مثال کے طور پر ، آپ اسپیئر مین کے رینک کے ارتباط کے گتانک یا 'کینڈل' کے لئے 'اسپیئر مین' استعمال کرسکتے ہیں۔کالموں کے ہر جوڑے کے لئے ارتباط کی اقدار۔ آپ 'کالم 1' اور 'کالم 2' کے مابین ارتباط حاصل کرنے کے لئے ارتباط میٹرکس ، جیسے ارتباطی میٹرکس ، جیسے ارتباط_میٹرکس ['کالم 1'] ['کالم 2'] کی نشاندہی کرکے انفرادی ارتباط کی اقدار تک رسائی حاصل کرسکتے ہیں۔CORR () طریقہ ڈیفالٹ کے ذریعہ عددی کالموں کے لئے جوڑے کے ارتباط کا حساب لگاتا ہے۔اگر آپ کے ڈیٹا فریم میں غیر عددی کالم ہیں تو ، آپ کو ارتباط کا حساب لگانے سے پہلے ان کو پریپروسیس یا انکوڈ کرنے کی ضرورت پڑسکتی ہے۔"
    },
    {
        "Question": "ای ڈی اے کے دوران آپ ڈیٹا فریم میں گمشدہ اقدار کو کس طرح سنبھالتے ہیں؟",
        "Answer": "کسی ڈیٹا فریم میں کالم کے مجموعی مجموعہ کا حساب لگانے کے ل you ، آپ پانڈوں میں کمم () طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT پانڈاس PD# ایک ڈیٹا فریمیٹا = {'کالم 1' بنائیں: [1 ، 2 ، 3 ، 4 ، 5]} df = pd.dataframe (اعداد و شمار)# کالم ڈی ایف کے جمع شدہ رقم کا حساب لگائیں ['cumulativesum'] = df [' کالم 1 ']. cumsum () اس مثال میں ، cumsum () کے طریقہ کار کو ڈیٹا فریم DF کے' کالم 1 'کالم پر کہا جاتا ہے۔cumsum () کا طریقہ مخصوص کالم میں اقدار کی مجموعی رقم کا حساب لگاتا ہے۔ اس کے نتیجے میں مجموعی رقم ڈیٹا فریم DF میں 'cumulativesum' نامی ایک نئے کالم کو تفویض کی گئی ہے۔'cumulativesum' کالم میں ہر قدر 'کالم 1' کالم میں موجودہ قدر سمیت تمام سابقہ اقدار کے مجموعہ کی نمائندگی کرتی ہے۔مزید برآں ، پانڈاس دیگر مجموعی کارروائیوں کا حساب لگانے کے لئے اسی طرح کے طریقے مہیا کرتے ہیں ، جیسے کمولیٹو پروڈکٹ کے لئے کمپرڈ () ، کم سے زیادہ کے لئے کماکس () ، اور کم سے کم کے لئے کمین ()۔ڈیٹا فریم کے انڈیکس کا۔اگر آپ ایک مختلف ترتیب میں مجموعی رقم کا حساب لگانا چاہتے ہیں تو ، آپ cumsum () طریقہ کار کو لاگو کرنے سے پہلے ترتیب_ ویلیوز () کے طریقہ کار کا استعمال کرتے ہوئے ڈیٹا فریم کو ترتیب دے سکتے ہیں۔df_sorted ['کالم 1']۔ cumsum () اس سے یہ یقینی بنائے گا کہ کالم میں اقدار کے مطلوبہ ترتیب کی بنیاد پر مجموعی رقم کا حساب لگایا جائے۔"
    },
    {
        "Question": "\"آپ ڈیٹا فریم میں عددی کالموں کے خلاصہ اعدادوشمار (مطلب ، میڈین ، معیاری انحراف ، وغیرہ) کا حساب کیسے لگاتے ہیں؟\"",
        "Answer": "ڈیٹا فریم میں کالم میں رولنگ ونڈو فنکشن لگانے کے ل you ، آپ پانڈوں میں رولنگ () کا طریقہ استعمال کرسکتے ہیں۔رولنگ () کا طریقہ ایک مخصوص سائز کی رولنگ ونڈو تشکیل دیتا ہے اور آپ کو ونڈو پر مختلف افعال لگانے کی اجازت دیتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT پانڈاس PD# ایک ڈیٹا فریمیٹا = {'کالم 1' بنائیں: [1 ، 2 ، 3 ، 4 ، 5]} DF = PD.Dataframe (ڈیٹا)# رولنگ ونڈو فنکشن ونڈو_سائز = 3DF ['رولنگ مین'] = DF [' کالم 1 ']۔ رولنگ (ونڈو = ونڈو_سائز). مین () اس مثال میں ، رولنگ () کے طریقہ کار کو ڈیٹا فریم ڈی ایف کے' کالم 1 'کالم پر کہا جاتا ہے۔رولنگ () کا طریقہ ایک مخصوص سائز کی رولنگ ونڈو بناتا ہے ، جس کی وضاحت ونڈو پیرامیٹر کے ذریعہ کی جاتی ہے۔اس معاملے میں ، ہم ونڈو_ سائز 3 پر سیٹ کرتے ہیں ، لہذا رولنگ ونڈو میں موجودہ قیمت اور دو سابقہ اقدار شامل ہوں گی۔ رولنگ ونڈو بنانے کے بعد ، ہم ونڈو پر ایک فنکشن کا اطلاق کرسکتے ہیں ، جیسے اس مثال میں () فنکشن۔وسط () فنکشن رولنگ ونڈو میں اقدار کی اوسط قدر کا حساب لگاتا ہے۔ رولنگ ونڈو فنکشن سے نتیجے میں ہونے والی اقدار کو ڈیٹا فریم ڈی ایف میں 'رولنگ مین' کے نام سے ایک نئے کالم میں تفویض کیا جاتا ہے۔'رولنگ مین' کالم میں ہر قدر 'کالم 1' کالم میں متعلقہ ونڈو کی اوسط قدر کی نمائندگی کرتی ہے۔، رولنگ ونڈو کے لئے مطلوبہ حساب کتاب پر منحصر ہے۔مزید برآں ، آپ ونڈو کے سائز کو ایڈجسٹ کرسکتے ہیں اور اپنی ضروریات کی بنیاد پر مختلف افعال کا انتخاب کرسکتے ہیں۔ نوٹ کریں کہ پہلی چند قطاروں کے لئے جہاں مکمل ونڈو بنانے کے ل enough کافی سابقہ اقدار موجود نہیں ہیں ، پانڈاس رولنگ ونڈو کے نتائج کو نان کی اقدار تفویض کریں گے۔آپ رولنگ () کے طریقہ کار میں MIN_PERIODS پیرامیٹر کا استعمال کرسکتے ہیں تاکہ نتائج کا حساب لگانے کے لئے درکار غیر نول اقدار کی کم سے کم تعداد کی وضاحت کی جاسکے۔= 1) .مین () اس بات کو یقینی بنائے گا کہ رولنگ ونڈو فنکشن کا حساب کتاب بھی کم سے کم اقدار والی قطاروں کے لئے کیا جاتا ہے۔"
    },
    {
        "Question": "آپ ایک واضح کالم میں انوکھی اقدار اور ان کی تعدد کو کس طرح دریافت کرتے ہیں؟",
        "Answer": "ڈیٹا فریم میں عددی کالموں کو معمول پر لانے یا معیاری بنانے کے ل you ، آپ اسکلرن.پروسیسنگ ماڈیول میں پری پروسیسنگ افعال استعمال کرسکتے ہیں۔خاص طور پر ، آپ عام ہونے کے لئے من میکس اسکیلر یا معیاری کاری کے لئے اسٹینڈرڈس اسکیلر کا استعمال کرسکتے ہیں۔یہاں ایک ڈیٹا فریم میں عددی کالموں پر معمول کے مطابق اور معیاری کاری کرنے کی ایک مثال ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور PDFROM SKLEREN.Preprocessing درآمد MINMAXCALER ، اسٹینڈرڈس اسکیلر# ایک ڈیٹا فریمیٹا = {'کالم 1' بنائیں: [1 ، 2 ، 3 ، 4 ، 5].DF.COLLUMS)# عددی کالم اسکیلر = اسٹینڈرڈس اسکیلر () df_standardized = pd.dataframe (Scaler.fit_transfor (DF) ، کالم = df.colums) کو معیاری بنائیں ، اس مثال کے طور پر ، منیکس اسکیلر کو عام کرنے کے لئے استعمال کیا جاتا ہے ، اور اسٹینڈرڈسکلر استعمال کیا جاتا ہے ، اور اسٹینڈرڈسکلر استعمال کیا جاتا ہے ، اور اسٹینڈرڈسکلر استعمال کیا جاتا ہے ، اور اسٹینڈرڈسکلر استعمال کیا جاتا ہے۔دونوں اسکیلرز کو شروع کیا جاتا ہے ، اور پھر اسکیلنگ آپریشن کو انجام دینے کے لئے Dataframe DF پر Fit_transform () کے طریقہ کار کو طلب کیا جاتا ہے۔ اس کے نتیجے میں معمول کے مطابق ڈیٹا فریم (DF_Normalized) اور معیاری ڈیٹا فریم (DF_standardized) اصل ڈیٹا فریم (DF) کی طرح کالم ہوتا ہے ، جس میں ، کے ساتھ ، اصل ڈیٹا فریم (DF) کے ساتھ ایک جیسے کالم ہوتے ہیں۔اسکیلنگ کے طریقہ کار کے مطابق تبدیل کی جانے والی عددی اقدار۔ نارملائزیشن ہر کالم میں اقدار کو ایک مخصوص رینج میں ترازو کرتی ہے ، عام طور پر 0 اور 1 کے درمیان۔ یہ اقدار کے مابین رشتہ دار تعلقات کو محفوظ رکھتا ہے۔اس مثال کے طور پر منیماکس اسکیلر فارمولا (x - منٹ) / (زیادہ سے زیادہ - منٹ) کا استعمال کرتے ہوئے اقدار کو ترازو کرتا ہے۔ دوسری طرف ، معیاری کاری ، ہر کالم میں اقدار کو 0 اور معیاری انحراف 1 میں تبدیل کرتی ہے۔وسط کے آس پاس کے اعداد و شمار کو سنبھالتا ہے اور اقدار کے پھیلاؤ کو ایڈجسٹ کرتا ہے۔اس مثال میں اسٹینڈرڈرس اسکیلر فارمولا (x - مطلب) / std کا استعمال کرتے ہوئے اقدار کو معیاری بناتا ہے۔"
    },
    {
        "Question": "ہسٹگرام کا استعمال کرتے ہوئے آپ عددی متغیر کی تقسیم کو کس طرح تصور کرتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ ملٹی لیول انڈیکسنگ کو سنبھال سکتے ہیں ، جسے ملٹی انڈیکس کلاس کا استعمال کرتے ہوئے ، ہائیرارکیکل انڈیکسنگ بھی کہا جاتا ہے۔ملٹی لیول انڈیکسنگ آپ کو قطار اور کالم لیبل کی ایک سے زیادہ سطحوں کی اجازت دیتا ہے ، جو متعدد جہتوں کے ساتھ ڈیٹا کو منظم اور رسائی کا ایک طریقہ فراہم کرتا ہے۔ملٹی لیول انڈیکسنگ کے ساتھ ڈیٹا فریم کے ساتھ تخلیق اور کام کرنے کی ایک مثال یہ ہے: پی ڈی کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس PD# ملٹی لیول انڈیکسنگ ڈیٹا = {'لیول 1' کے ساتھ ایک ڈیٹا فریم بنائیں: ['A' ، 'A' ، 'B'، 'بی' ، 'سی' ، 'سی'] ، 'لیول 2': [1 ، 2 ، 1 ، 2 ، 1 ، 1 ، 2] ، 'قدر': [10 ، 20 ، 30 ، 40 ، 50 ، 50 ، 60]}df = pd.dataframe (ڈیٹا) df.set_index (['لیول 1' ، 'لیول 2'] ، ان پلیس = سچ) # ملٹی لیول انڈیکسنگ پرنٹ (df.loc ['a']) کے ساتھ ڈیٹا تک رسائی # لیول 1 لیبل کے ساتھ قطاریں'a'print (df.loc [' a '، 1]) # لیول 1 لیبل' A 'اور لیول 2 لیبل 1 پرنٹ (df.loc [' a ':' b ']) کے ساتھ ایک مخصوص قطار تک رسائی حاصل کریں) # سطح 1 کے ساتھ قطاریںلیبلز 'A' سے 'B'Print (df.loc [(' a '، 1) ،' ویلیو ']) # لیول 1 لیبل' A 'اور لیول 2 لیبل 1 # ری سیٹ کریں ملٹی لیول انڈیکسنگ ڈی ایف۔ ری سیٹ_ انڈیکس کے ساتھ ایک مخصوص سیل تک رسائی حاصل کریں۔ہم 'لیول 1' اور 'لیول 2' کالموں کی بنیاد پر ملٹی لیول انڈیکس کو سیٹ کرنے کے لئے سیٹ_ انڈیکس () کا طریقہ استعمال کرتے ہیں۔ ملٹی لیول انڈیکسنگ کے ساتھ ڈیٹا تک رسائی حاصل کرنے کے ل you ، آپ ایل او سی انڈیکسر استعمال کرسکتے ہیں۔ملٹی لیول انڈیکس لیبلوں کی بنیاد پر قطاروں یا خلیوں کو منتخب کرنے کے ل You آپ ایک ہی لیبل یا لیبلوں کا ایک لیبل لیبل کو منتقل کرسکتے ہیں۔مثال کے طور پر ، df.loc ['a'] 'لیول 1' لیبل 'اے' ، اور df.loc ['A' ، 1] کے ساتھ تمام قطاریں بازیافت کرتا ہے۔'لیول 2' لیبل 1. آپ ملٹی لیول انڈیکس لیبلوں پر مبنی قطاروں کی ایک رینج کو منتخب کرنے کے لئے سلائسنگ کا استعمال بھی کرسکتے ہیں ، جیسے DF.LOC ['A': 'B'] 'لیول 1' لیبل 'کے ساتھ قطاریں بازیافت کرنے کے لئے' A ':' B ']A 'to' B'. کثیر سطح کی اشاریہ سازی کے ساتھ کسی مخصوص سیل تک رسائی حاصل کرنے کے ل you ، آپ قطار اور کالم انڈیکسنگ دونوں کے ل lab لیبلوں کا ایک ٹیوپل پاس کرسکتے ہیں ، جیسے DF.LOC [('a' ، 1) ، 'قدر']۔اگر آپ ملٹی لیول انڈیکسنگ کو دوبارہ ترتیب دینا چاہتے ہیں اور سطح کو باقاعدہ کالموں میں تبدیل کرنا چاہتے ہیں تو ، آپ RESET_INDEX () طریقہ استعمال کرسکتے ہیں۔ ملٹی لیول انڈیکسنگ متعدد جہتوں کے ساتھ ڈیٹا کو منظم اور تجزیہ کرنے کا ایک طاقتور طریقہ فراہم کرتا ہے ، جس سے آپ آپریشن انجام دے سکتے ہیں۔اور انڈیکس میں مخصوص سطحوں یا سطح کے امتزاج پر مبنی انتخاب۔"
    },
    {
        "Question": "آپ عددی متغیر کی تقسیم کو دیکھنے کے لئے ایک باکس پلاٹ کیسے بناتے ہیں؟",
        "Answer": "پانڈوں میں ڈایٹ ٹائم آبجیکٹ میں ڈور کے کالم کو تبدیل کرنے کے ل you ، آپ ٹو_ڈیٹ ٹائم () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن کسی تاریخ یا وقت کی سٹرنگ نمائندگی کو تجزیہ کرتا ہے اور اسے ڈیٹ ٹائم آبجیکٹ میں تبدیل کرتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT پانڈاس PD# STRINGSDATA = {'تاریخ' کے کالم کے ساتھ ایک ڈیٹا فریم بنائیں: ['2021-01-01' ، '2021-02-01' ، '2021-01']}df = pd.dataframe (ڈیٹا)# 'تاریخ' کالم کو ڈیٹ ٹائم آبجیکٹ ڈی ایف میں تبدیل کریں ['تاریخ'] = pd.to_datetime (df ['تاریخ']) اس مثال میں ، ہمارے پاس ایک کالم کے ساتھ ایک ڈیٹا فریم DF ہے 'تاریخ''تاریخوں کی نمائندگی کرنے والے تار پر مشتمل ہے۔اس کالم کو ڈیٹ ٹائم آبجیکٹ میں تبدیل کرنے کے ل we ، ہم ٹو_ڈیٹ ٹائم () فنکشن استعمال کرتے ہیں اور کالم کو 'تاریخ' کو بطور دلیل پاس کرتے ہیں۔ٹو_ڈیٹ ٹائم () فنکشن ڈیٹ ٹائم آبجیکٹ کی ایک سیریز لوٹاتا ہے ، جسے ہم ڈیٹا فریم کے 'تاریخ' کالم کو واپس تفویض کرتے ہیں۔ اس تبدیلی کے بعد ، 'تاریخ' کالم میں موجود اقدار کو ڈیٹ ٹائم آبجیکٹ کے طور پر محفوظ کیا جاتا ہے ، جو آسان ہیرا پھیری کی اجازت دیتا ہے اورتاریخوں کا تجزیہ۔آپ ڈیٹ ٹائم آبجیکٹ پر مختلف کاروائیاں انجام دے سکتے ہیں ، جیسے دن ، مہینہ ، یا سال نکالنا ، وقت کے اختلافات کا حساب لگانا ، اور بہت کچھ۔ اگر کالم میں ڈوروں میں معیاری ISO 8601 فارمیٹ ('yyyy-mm) سے مختلف تاریخ کی شکل ہے۔-DD ') ، آپ ٹو_ڈیٹ ٹائم () فنکشن کے فارمیٹ پیرامیٹر کا استعمال کرتے ہوئے مناسب شکل فراہم کرسکتے ہیں۔مثال کے طور پر ، اگر ڈور 'DD-mm-yyyy' فارمیٹ میں ہیں تو ، آپ اس طرح کی شکل بیان کرسکتے ہیں: پائیٹون کوپی کوڈڈف ['تاریخ'] = pd.to_datetime (df ['تاریخ'] ، فارمیٹ = '٪ d-٪ m- ٪ y ') اپنے کالم میں ڈور کی شکل سے ملنے کے لئے صحیح فارمیٹ سٹرنگ کی وضاحت کرنا یقینی بنائیں۔ پہلے سے طے شدہ ، to_datetime () فنکشن یہ فرض کرتا ہے کہ ڈور تاریخوں کی نمائندگی کرتے ہیں۔اگر آپ کے کالم میں وقت یا ڈیٹا ٹائم کی اقدار کی نمائندگی کرنے والے تار شامل ہیں تو ، آپ پانڈوں کو خود بخود ڈیٹ ٹائم فارمیٹ.پیتھون کوپی کوڈڈف ['وقت'] = pd.to_datetime (df ['وقت'] ، infer_datetime_format = true) ، infer_datetime_format = true) کی نمائندگی کرنے کے لئے انفر_ڈیٹ ٹائم_فورمیٹ پیرامیٹر کا استعمال کرسکتے ہیں۔کالم ڈاٹ کام میں فراہم کردہ ڈوروں کی بنیاد پر ڈیٹ ٹائم فارمیٹ کا اندازہ لگانے کی کوشش کریں گے۔آپ کے ڈیٹا میں"
    },
    {
        "Question": "آپ باکس پلاٹوں یا دوسرے طریقوں کا استعمال کرتے ہوئے عددی کالم میں آؤٹ لیئرز کی جانچ کیسے کرتے ہیں؟",
        "Answer": "پانڈاس سٹرنگ ہیرا پھیری کے متعدد طریقے مہیا کرتا ہے جو تار پر مشتمل کالموں پر سٹرنگ آپریشن کو سنبھالنے کے لئے استعمال ہوسکتے ہیں۔یہ طریقے .str لوازمات کے ذریعے دستیاب ہیں ، جو آپ کو مختلف تار کے کام انجام دینے کے ل string سٹرنگ طریقوں کے سوٹ تک رسائی حاصل کرنے کی سہولت دیتا ہے۔پانڈوں میں سٹرنگ ہیرا پھیری کو کس طرح سنبھالنے کی ایک مثال یہ ہے: PD# کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس اسٹرنگس ڈیٹا = {'سٹرنگ' کے کالم کے ساتھ ایک ڈیٹا فریم بنائیں: ['ہیلو ، ورلڈ!' ، 'ازگر بہت اچھا ہے' ، 'پانڈاس بہت اچھا ہے'']} df = pd.dataframe (ڈیٹا)# کالم ڈی ایف [' سبسٹرنگ '] = df [' string ']. str.extract (' (\\ w+) ') df [' placease '] = df [')'سٹرنگ'].str.contains ('عظیم')# کالم ڈی ایف میں ایک اسٹرنگ کو تبدیل کریں ['تبدیل'] = df ['string']. str.replace ('حیرت انگیز' ، 'حیرت انگیز')# ایک کالم کو متعدد کالم ایس ڈی ایف میں تقسیم کریں [[[['فرسٹ ورڈ' ، 'سیکنڈ ورڈ']] = df ['سٹرنگ']۔ str.split ('،' ، '، توسیع = سچ) اس مثال میں ، ہمارے پاس ایک ڈیٹا فریم DF ہے جس میں' اسٹرنگ 'پر مشتمل کالم ہے جس میں ڈور شامل ہیں۔ہم اس کالم میں سٹرنگ ہیرا پھیری کے مختلف طریقوں کو لاگو کرنے کے لئے .str لوازمات کا استعمال کرسکتے ہیں: ڈوروں سے ایک سٹرنگ نکالنے کے ل we ، ہم .str.extract () طریقہ استعمال کرتے ہیں اور ایک باقاعدہ اظہار کا نمونہ ((\\ w+)) نکالنے کے لئے فراہم کرتے ہیں۔ہر تار کا پہلا لفظ۔نتیجہ 'اسٹرنگ' کالم میں محفوظ ہے۔ تاروں کو بڑے میں تبدیل کرنے کے لئے ، ہم .str.upper () طریقہ استعمال کرتے ہیں۔نتیجہ 'اپر کیس' کالم میں محفوظ ہے۔ ہر تار کی لمبائی حاصل کرنے کے ل we ، ہم .str.len () طریقہ استعمال کرتے ہیں۔نتیجہ 'لمبائی' کے کالم میں محفوظ ہے۔ چیک کرنے کے لئے کہ آیا ہر تار میں کوئی مخصوص اسٹرنگ موجود ہے ، ہم .str.contains () طریقہ استعمال کرتے ہیں۔نتیجہ 'پر مشتمل' کالم میں محفوظ کیا جاتا ہے۔ ہر تار میں ایک سٹرنگ کو تبدیل کرنے کے ل we ، ہم .str.replace () طریقہ استعمال کرتے ہیں۔ہم لفظ 'حیرت انگیز' کو 'حیرت انگیز' کے ساتھ تبدیل کرتے ہیں۔نتیجہ 'تبدیل' کالم میں محفوظ کیا جاتا ہے۔ تاروں کو متعدد کالموں میں تقسیم کرنے کے لئے ، ایک حد بندی کی بنیاد پر ، ہم .str.split () طریقہ استعمال کرتے ہیں۔ہم کوما ('،') میں تاروں کو تقسیم کرتے ہیں اور اس کے نتیجے کو علیحدہ کالموں کو 'فرسٹ ورڈ' اور 'سیکنڈ ورڈ' میں بڑھا دیتے ہیں۔ یہ سٹرنگ ہیرا پھیری کی کارروائیوں کی صرف چند مثالیں ہیں جو آپ پانڈوں میں انجام دے سکتے ہیں۔.straps () ، Startswith () ، endswith () ، اور بہت کچھ کے ذریعے اور بھی بہت سارے سٹرنگ طریقے دستیاب ہیں۔آپ دستیاب سٹرنگ طریقوں کی جامع فہرست کے لئے سٹرنگ ہینڈلنگ پر پانڈاس دستاویزات کا حوالہ دے سکتے ہیں۔"
    },
    {
        "Question": "آپ ارتباط میٹرکس یا بکھرنے والے پلاٹوں کا استعمال کرتے ہوئے عددی متغیر کے مابین ارتباط کو کس طرح دریافت کرتے ہیں؟",
        "Answer": "پانڈوں میں ٹیکسٹ سرچ اور مماثلت انجام دینے کے ل you ، آپ .str لوازمات کے ذریعہ فراہم کردہ مختلف تار کے طریقوں اور باقاعدہ تاثرات استعمال کرسکتے ہیں۔یہاں کچھ عام تکنیکیں ہیں: عین مطابق مماثلت: آپ == آپریٹر یا .eq () طریقہ کا استعمال کرتے ہوئے عین مطابق میچوں کی جانچ کرسکتے ہیں۔مثال کے طور پر: پائیتھون کوپی کوڈیمپورٹ پانڈاس بطور PD# اسٹرنگس ڈیٹا = {'متن' کے کالم کے ساتھ ایک ڈیٹا فریم بنائیں: ['ہیلو ، ورلڈ!' ، 'ازگر بہت اچھا ہے' ، 'پانڈاس بہت اچھا ہے']} df = pd.dataframe (ڈیٹا)# عین مطابق میچنگ ڈی ایف_سیکٹ_مچ = ڈی ایف [ڈی ایف ['متن'] == 'ازگر بہت اچھا ہے'] جزوی ملاپ: متن کے اندر سبسٹرنگز کی تلاش کے ل you ، آپ .str.contains () طریقہ استعمال کرسکتے ہیں۔یہ بولین ماسک لوٹاتا ہے جس سے یہ ظاہر ہوتا ہے کہ آیا ہر عنصر میں پیٹرن پایا جاتا ہے۔مثال کے طور پر: پائیٹون کوپی کوڈ# جزوی میچنگ ڈی ایف_پارٹیل_مچ = ڈی ایف [ڈی ایف ['ٹیکسٹ']۔ str.contains ('IS')] کیس غیر حساس مماثلت: کیس غیر حساس مماثلت انجام دینے کے ل you ، آپ کیس = جھوٹے پیرامیٹر کو استعمال کرسکتے ہیں۔.str.contains () طریقہ۔مثال کے طور پر: پائیٹون کوپی کوڈ# انجام دیں کیس غیر حساس مماثل میچنگ ڈی ایف_ کیس_یسنسیٹیو_مچٹ = ڈی ایف [ڈی ایف ['متن'].str.contains () طریقہ۔باقاعدگی سے اظہار متن کے نمونے کے ملاپ کے ل powerful طاقتور صلاحیتوں کو فراہم کرتا ہے۔مثال کے طور پر: پائیتھون کوپی کوڈ# باقاعدگی سے اظہار کریں مماثل ڈیف_ریجیکس_مچ = ڈی ایف [ڈی ایف ['ٹیکسٹ']۔.isin () طریقہ کار کا استعمال کرتے ہوئے اقدار کی فہرست کے خلاف عین مطابق سٹرنگ میچوں کی جانچ کریں۔مثال کے طور پر: پائیٹون کوپی کوڈ# اقدار کی فہرست کے ساتھ عین مطابق مماثلت = ['ہیلو ، ورلڈ!' ، 'پانڈاس بہت اچھا ہے'] df_exact_match_list = df [df ['text']۔ isin (values)] یہ صرف کچھ ہیںپانڈوں میں متن کی تلاش اور مماثل تکنیک کی مثالیں۔اپنی مخصوص ضروریات پر منحصر ہے ، آپ ان طریقوں کو منطقی آپریٹرز (جیسے ، اور کے لئے اور ، کے لئے) کے ساتھ جوڑ سکتے ہیں تاکہ متن کی مزید پیچیدہ کام انجام دیں۔مزید برآں ، آپ اپنے متن کے ملاپ کے کاموں کو مزید بہتر بنانے کے لئے اسٹارٹ ویتھ () ، اینڈسیتھ () ، میچ () ، اور فائنڈال () جیسے دوسرے سٹرنگ طریقوں کا استعمال کرسکتے ہیں۔"
    },
    {
        "Question": "ای ڈی اے کے دوران آپ ڈیٹا فریم میں گمشدہ اقدار کو کس طرح سنبھالتے اور تصور کرتے ہیں؟",
        "Answer": "پانڈوں میں اعلی کارڈنلٹی کے ساتھ زمرہ دار ڈیٹا کو سنبھالنا مشکل ہوسکتا ہے کیونکہ اس سے میموری کی نا اہلی اور سست کارکردگی کا باعث بن سکتا ہے۔اعلی کارڈنلٹی سے مراد ایک بڑی تعداد میں منفرد قسموں یا ایک متغیر متغیر میں سطح ہے۔پانڈوں میں اعلی کارڈنلٹی کے ساتھ زمرہ دار اعداد و شمار کو سنبھالنے کے لئے کچھ تکنیک یہ ہیں: زمرے کی تعداد کو کم کریں: اگر اعلی کارڈنلٹی بڑی تعداد میں نایاب یا کبھی کبھار زمرے کی وجہ سے ہے تو ، آپ انہیں ایک علیحدہ زمرے میں گروپ کرنے یا اسی طرح کے ساتھ جوڑنے پر غور کرسکتے ہیں۔اقسام.اس سے اہم معلومات کو حاصل کرتے ہوئے کارڈنلٹی کو کم کرنے میں مدد مل سکتی ہے۔آپ ویلیو_کونٹ () جیسے طریقوں کا استعمال کرسکتے ہیں اور غیر معمولی زمرے کی نشاندہی کرنے اور گروپ کرنے کے لئے ایک حد کا اطلاق کرسکتے ہیں۔پانڈاس مختلف انکوڈنگ تکنیک مہیا کرتا ہے ، جیسے لیبل انکوڈنگ اور ایک گرم انکوڈنگ ، جو متغیر متغیرات کو عددی نمائندگی میں تبدیل کرسکتا ہے۔لیبل انکوڈنگ ہر زمرے میں ایک انوکھا عددی لیبل تفویض کرتا ہے ، جبکہ ایک گرم انکوڈنگ ہر زمرے کے لئے ڈمی متغیر پیدا کرتی ہے۔تاہم ، یہ بات ذہن میں رکھیں کہ ایک گرم انکوڈنگ کے نتیجے میں کالموں کی تعداد میں نمایاں اضافہ ہوسکتا ہے ، جو اعلی کارڈنلٹی ڈیٹا کے لئے ممکن نہیں ہوسکتا ہے۔ فریکوینسی انکوڈنگ: فریکوینسی انکوڈنگ ہر زمرے کو ڈیٹاسیٹ میں اپنی فریکوئنسی کے ساتھ تبدیل کرتی ہے۔یہ نقطہ نظر ہر زمرے کے واقعات کے تناسب کا استعمال کرتے ہوئے زمرہاتی متغیر کو انکوڈ کرتا ہے ، جو معلومات کی مفید نمائندگی ہوسکتا ہے۔آپ ہر زمرے کی تعدد کا حساب لگانے کے لئے ویلیو_کونٹ () فنکشن کا استعمال کرسکتے ہیں اور پھر تعدد کو اصل کالم پر نقشہ بنا سکتے ہیں۔اس زمرے کے لئے ہدف متغیر کی قدر۔اس تکنیک نے متغیر متغیر اور ہدف متغیر کے مابین تعلقات کو اپنی گرفت میں لے لیا ہے ، جو پیش گوئی کرنے والے ماڈلنگ کے لئے ممکنہ طور پر مفید معلومات فراہم کرتا ہے۔تاہم ، ٹارگٹ انکوڈنگ کے لئے محتاط توثیق کی ضرورت ہوتی ہے اور اسے زیادہ سے زیادہ مناسب ہونے کا خطرہ ہوسکتا ہے ، لہذا اسے احتیاط کے ساتھ استعمال کیا جانا چاہئے۔اس سے کارڈنلٹی کو منفرد اقدار کی پہلے سے طے شدہ تعداد میں کم کیا جاتا ہے۔ہیش فنکشن ہر زمرے کو بالٹیوں میں سے ایک پر نقشہ بناتا ہے ، جس سے موثر اسٹوریج اور حساب کتاب کی اجازت ملتی ہے۔تاہم ، یہ تصادم کا تعارف کرسکتا ہے ، جہاں مختلف قسموں کو ایک ہی بالٹی میں نقش کیا جاتا ہے۔ جہتی کمی: اگر اعلی کارڈنلٹی میموری یا کمپیوٹیشنل وسائل کے لحاظ سے ایک اہم مسئلہ پیدا کرتی ہے تو ، آپ طول و عرض میں کمی کی تکنیک جیسے پرنسپل جزو تجزیہ (پی سی اے) کے استعمال پر غور کرسکتے ہیں۔یا t-sne زمرہ متغیر کی جہت کو کم کرنے کے لئے۔یہ تکنیک اہم معلومات کو محفوظ کرتے ہوئے ایک کم جہتی جگہ میں متغیر متغیر کو پیش کرتی ہے۔ یہ بات اہم ہے کہ اعلی کارڈنلٹی کو سنبھالنے کا انتخاب مخصوص مسئلے ، اعداد و شمار کی نوعیت ، اور آپ کے تجزیہ یا ماڈلنگ کے کام کی ضروریات پر منحصر ہے۔میموری کے استعمال ، گنتی کے وقت ، تشریح ، اور بہاو تجزیہ یا ماڈلز پر ممکنہ اثرات کے مابین تجارتی تعلقات پر غور کریں۔"
    },
    {
        "Question": "آپ گروپ بائی اور جمع کا استعمال کرتے ہوئے ایک متغیر متغیر اور عددی متغیر کے مابین تعلقات کو کس طرح دریافت کرتے ہیں؟",
        "Answer": "پانڈوں میں دو ڈیٹا فریموں کے مابین عنصر کے حساب سے موازنہ کرنے کے ل you ، آپ موازنہ آپریٹرز (== ،! = ، <،> ، <= ،> =) یا مساوی () طریقہ استعمال کرسکتے ہیں۔یہ طریقے آپ کو دو ڈیٹا فریموں کے مابین متعلقہ عناصر کا موازنہ کرنے اور موازنہ کے نتائج کی نشاندہی کرنے والے ایک نیا ڈیٹا فریم یا بولین ماسک تیار کرنے کی اجازت دیتے ہیں۔یہاں آپ عنصر کے حساب سے موازنہ کیسے کرسکتے ہیں: موازنہ آپریٹرز کا استعمال: آپ موازنہ آپریٹرز کو براہ راست استعمال کرسکتے ہیں تاکہ دو ڈیٹا فریم عنصر کے مطابق موازنہ کیا جاسکے۔نتیجہ اصل ڈیٹا فریموں کی طرح ایک ہی شکل کا ڈیٹا فریم ہوگا ، جہاں ہر عنصر کے مقابلے کا نتیجہ ہوتا ہے۔مثال کے طور پر: PDTHONCOPY CODEMPORT پانڈاس PD# دو ڈیٹا اے ایف آر اے ایم ایس ڈی ایف 1 = pd.dataframe ({'A': [1 ، 2 ، 3] ، 'B': [4 ، 5 ، 6]}) DF2 = PD.Dataframe ({بنائیں'A': [1 ، 2 ، 4] ، 'B': [4 ، 5 ، 6]})# موازنہ آپریٹرز کامپارسن_ریسولٹ = DF1 == DF2in کا استعمال کرتے ہوئے عنصر کے لحاظ سے موازنہ کریں ، اس مثال کے ساتھ ، موازنہ_ریسولٹ اسی کے ساتھ ایک ڈیٹا فریم ہوگا۔شکل DF1 اور DF2 کے طور پر۔موازنہ_ریسولٹ میں ہر عنصر میں صحیح ہوگا اگر ڈی ایف 1 اور ڈی ایف 2 میں متعلقہ عناصر برابر ہیں ، اور غلط۔برابر ہیں یا نہیں۔یہ چیک کرتا ہے کہ آیا شکل ، کالم کے نام ، اور عنصر کی اقدار ایک جیسی ہیں۔مثال کے طور پر: پائیتھون کوپی کوڈ# چیک کریں کہ آیا اس کی مثال میں ایکولس () میتھڈیر_ ای کیوئل = ڈی ایف 1.equals (DF2) کا استعمال کرتے ہوئے دو ڈیٹا فریم برابر ہیں یا نہیں۔آپ پانڈوں میں دو ڈیٹا فریموں کے مابین عنصر کے حساب سے موازنہ کریں۔اپنی مخصوص ضروریات پر منحصر ہے ، آپ ان موازنہوں کو مختلف طریقوں سے ڈیٹا کو فلٹر ، ماسک یا جوڑ توڑ کرنے کے لئے استعمال کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کسی متغیر متغیر کی تقسیم کو دیکھنے کے لئے بار چارٹ کیسے بناتے ہیں؟",
        "Answer": "ڈیٹا فریم میں عدم توازن کی کلاسوں کو سنبھالنا مشین لرننگ میں ایک اہم کام ہے جب ہدف متغیر میں نمایاں طور پر غیر مساوی طبقاتی تقسیم ہوتی ہے۔متوازن کلاسز متعصب ماڈلز کا باعث بن سکتی ہیں جو اکثریتی طبقے کے حق میں ہیں اور اقلیتی طبقے پر ناقص کارکردگی کا حامل ہے۔متوازن کلاسوں کو سنبھالنے کے لئے یہاں کچھ تکنیکیں ہیں: ڈیٹا کو دوبارہ ترتیب دینے: ڈیٹا کو دوبارہ ترتیب دینے کی تکنیک میں یا تو اقلیتی طبقے کی حد سے تجاوز کرنا یا متوازن طبقاتی تقسیم کے حصول کے لئے اکثریتی طبقے کو کم کرنا شامل ہے۔اوورمپلنگ کے طریقے اقلیتی طبقے کے لئے مصنوعی نمونے تیار کرتے ہیں ، جیسے سموٹ (مصنوعی اقلیت سے زیادہ نمونے لینے کی تکنیک) ، اڈاسین (انکولی مصنوعی نمونے لینے) ، یا بے ترتیب اوور سمپلنگ۔انڈرسمپلنگ کے طریقوں نے اکثریتی طبقے میں نمونوں کی تعداد کو کم کیا ، جیسے بے ترتیب انڈرسمپلنگ یا کلسٹر پر مبنی انڈرسمپلنگ۔ان تکنیکوں کا مقصد طبقاتی تقسیم کو متوازن کرنا اور دونوں طبقات کو زیادہ مساوی نمائندگی فراہم کرنا ہے۔ کلاس وزن: زیادہ تر مشین لرننگ الگورتھم آپ کو کلاس میں عدم توازن سے نمٹنے کے لئے کلاسوں میں وزن تفویض کرنے کی اجازت دیتے ہیں۔اقلیتی طبقے کو زیادہ وزن تفویض کرکے اور اکثریت والے طبقے کو کم وزن تفویض کرکے ، آپ ماڈل کی تربیت کے دوران اقلیتی طبقے کو زیادہ اہمیت دے سکتے ہیں۔طبقاتی وزن کو طبقاتی تقسیم کی بنیاد پر دستی طور پر سیٹ کیا جاسکتا ہے یا کلاس فریکوئنسی کے لئے خود بخود متناسب تناسب کا حساب لگایا جاسکتا ہے۔اسکیکیٹ لرن میں بہت سے مشین لرننگ الگورتھم میں ایک کلاس_ ویٹ پیرامیٹر ہوتا ہے جو اس کے مطابق ترتیب دیا جاسکتا ہے۔ لاگت سے حساس سیکھنے: لاگت سے حساس سیکھنے میں مختلف طبقات کو ان کی اہمیت یا ندرت کی بنیاد پر غلط طبقاتی اخراجات تفویض کرنا شامل ہے۔اقلیتی طبقے کو غلط درجہ بندی کرنے کے لئے ایک اعلی قیمت تفویض کرکے ، ماڈل اقلیتی طبقے کے واقعات کی صحیح پیش گوئی کرنے پر زیادہ توجہ مرکوز کرنا سیکھ سکتا ہے۔یہ نقطہ نظر مفید ثابت ہوسکتا ہے جب مختلف کلاسوں کے لئے غلط طبقاتی اخراجات برابر نہیں ہوتے ہیں۔بے ترتیب جنگل یا تدریجی فروغ جیسے بیگنگ پر مبنی طریقے ، اعداد و شمار کی تقسیم کو سنبھالنے کی صلاحیت کی وجہ سے عدم توازن کی کلاسوں کو بہتر طریقے سے سنبھال سکتے ہیں۔یہ الگورتھم اکثریتی طبقے کی طرف تعصب کو کم کرسکتے ہیں اور اقلیتی طبقے کے لئے بہتر کارکردگی فراہم کرسکتے ہیں۔ تشخیص میٹرکس: عدم توازن کی کلاسوں سے نمٹنے کے دوران صرف درستگی قابل اعتماد میٹرک نہیں ہے۔اس کے بجائے ، آپ کو تشخیصی میٹرکس پر غور کرنا چاہئے جو متوازن ڈیٹاسیٹس کے لئے زیادہ موزوں ہیں۔میٹرک جیسے صحت سے متعلق ، یاد ، F1-اسکور ، اور ROC وکر (AUC-ROC) کے تحت علاقہ ماڈل کی کارکردگی کا بہتر اندازہ فراہم کرسکتا ہے۔یہ میٹرکس مجموعی طور پر درستگی کے بجائے دونوں طبقوں کی کارکردگی پر قبضہ کرنے پر مرکوز ہے۔ ڈیٹا بڑھاوا: ڈیٹا کو بڑھاوا دینے کی تکنیکوں میں موجودہ اعداد و شمار میں مختلف تبدیلیوں یا گھٹیا پنوں کا اطلاق کرکے نئے مصنوعی نمونے تیار کرنا شامل ہیں۔یہ نقطہ نظر اقلیتی طبقے میں نمونوں کی تعداد کو بڑھانے اور عام کرنے کی ماڈل کی صلاحیت کو بہتر بنانے میں مدد فراہم کرسکتا ہے۔ مخصوص مسئلے ، دستیاب اعداد و شمار اور مطلوبہ نتائج کی بنیاد پر مناسب تکنیک کا انتخاب کرنا ضروری ہے۔آپ کو مختلف طریقوں کے ساتھ تجربہ کرنے اور ماڈل کی کارکردگی پر ان کے اثرات کا اندازہ کرنے کی ضرورت پڑسکتی ہے۔مزید برآں ، یہ ضروری ہے کہ متوازن کلاسوں کو سنبھال کر اور نتائج کو احتیاط سے توثیق کرکے متعارف کروائے جانے والے ممکنہ تعصب سے محتاط رہیں۔"
    },
    {
        "Question": "آپ مختلف قسم کے متغیر میں مختلف زمروں کے تناسب کو دیکھنے کے لئے پائی چارٹ کیسے بناتے ہیں؟",
        "Answer": "کسی ڈیٹا فریم میں کالم کی چلتی اوسط کا حساب لگانے کے ل you ، آپ پانڈوں کے ذریعہ فراہم کردہ رولنگ () فنکشن استعمال کرسکتے ہیں۔رولنگ () فنکشن آپ کو کالم پر رولنگ ونڈو بنانے اور مختلف جمع کرنے کے افعال کا اطلاق کرنے کی اجازت دیتا ہے ، جس میں چلتی اوسط کا حساب کتاب بھی شامل ہے۔یہ ہے کہ آپ چلتی اوسط کا حساب کیسے لگاسکتے ہیں: پی ڈی کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس PD# عددی اقدار کے کالم کے ساتھ ایک ڈیٹا فریم بنائیں = {'ویلیو': [10 ، 15 ، 20 ، 25 ، 30]} df = pd.dataframe (ڈیٹا)# رولنگ () فنکشن ونڈو_سائز = 3moving_average = df ['ویلیو'] کا استعمال کرتے ہوئے چلتی اوسط کا حساب لگائیں۔ رولنگ (ونڈو = ونڈو_سائز) .مین () اس مثال میں ، ہم ایک کالم کے ساتھ ایک ڈیٹا فریم ڈی ایف بناتے ہیں جس میں 'ویلیو' ہوتا ہے جس میں 'ویلیو' ہوتا ہے۔اقدار۔چلتی اوسط کا حساب لگانے کے ل we ، ہم 'ویلیو' کالم پر رولنگ () فنکشن کا اطلاق کرتے ہیں اور ونڈو کے سائز کو ونڈو = 3 کے بطور وضاحت کرتے ہیں۔اس کے بعد رولنگ ونڈو پر مطلب () فنکشن کا اطلاق ہوتا ہے ، جو ہر ونڈو کے وسط کا حساب لگاتا ہے۔نتیجہ موونگ_اوریج متغیر میں محفوظ ہے۔ آپ اپنی ضروریات کے مطابق ونڈو_ سائز پیرامیٹر کو ایڈجسٹ کرسکتے ہیں۔ونڈو کا سائز ہر متحرک اوسط حساب کتاب کے لئے سمجھے جانے والے مشاہدات کی تعداد کا تعین کرتا ہے۔مثال کے طور پر ، ونڈو سائز 3 کے ساتھ ، موجودہ قیمت اور دو سابقہ اقدار کا استعمال کرتے ہوئے چلتی اوسط کا حساب لگایا جائے گا۔ نوٹ کریں کہ چلتی اوسط میں ابتدائی ونڈو_سائز -1 قطاروں کے لئے نان اقدار ہوں گی ، کیونکہ اس میں کافی مشاہدات نہیں ہیں۔اوسط کا حساب لگائیں۔اگر آپ ان نان اقدار کو ختم کرنا چاہتے ہیں تو ، آپ .dropna () طریقہ استعمال کرسکتے ہیں: پائیتھون کوپی کوڈمونگ_اوریج = موونگ_اویورج۔ ڈروپنا () اس سے آپ کو نان اندراجات کے بغیر اوسطا اوسط اقدار ملیں گے۔اور اپنے ڈیٹا فریم میں ٹائم سیریز یا کسی دوسرے ترتیب والے ڈیٹا میں اتار چڑھاو کو ہموار کریں۔"
    },
    {
        "Question": "آپ دو عددی متغیر کے مابین تعلقات کو دیکھنے کے لئے سکریٹر پلاٹ کیسے بناتے ہیں؟",
        "Answer": "ٹائم سیریز کے ڈیٹا کو سنبھالنے کے لئے پانڈاس بہترین فعالیت فراہم کرتا ہے۔پانڈوں میں ٹائم سیریز کے اعداد و شمار کو سنبھالنے کے لئے کچھ کلیدی خصوصیات اور تکنیک یہ ہیں: تاریخ اور وقت کی تجزیہ: پانڈاس تاریخوں اور اوقات کی تار کی نمائندگی کو ڈیٹ ٹائم آبجیکٹ میں تبدیل کرنے کے لئے ٹو_ڈیٹ ٹائم () فنکشن فراہم کرتا ہے۔آپ مناسب تجزیہ کو یقینی بنانے کے لئے فارمیٹ کوڈز کا استعمال کرتے ہوئے تاریخ یا ٹائم سٹرنگ کی شکل کی وضاحت کرسکتے ہیں۔مثال کے طور پر: پی ڈی## کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس ڈیڈ ٹائم آبجیکٹ ڈی ایف ['تاریخ'] = pd.to_datetime (df ['تاریخ'] ، فارمیٹ = '٪ y- ٪ m- ٪ d') میں تبدیل کریں) اشاریہ سازی اور سلائسنگ: پانڈاس آپ کو سیٹ_ انڈیکس () طریقہ کار کا استعمال کرتے ہوئے ڈیٹا فریم انڈیکس کے طور پر ڈیٹ ٹائم کالم کو سیٹ کرنے کی اجازت دیتا ہے۔اس سے وقت کی بنیاد پر آسانی سے اشاریہ سازی اور سلائسنگ کا اہل بناتا ہے۔آپ متعلقہ قطاروں کو بازیافت کرنے کے لئے ایک مخصوص تاریخ یا تاریخوں کی ایک حد استعمال کرسکتے ہیں۔مثال کے طور پر: پائیتھون کوپی کوڈ# 'تاریخ' کالم کو بطور انڈیکس ڈی ایف ڈاٹ ایسٹ_ انڈیکس ('تاریخ' ، ان پلیس = سچ) سیٹ کریں# مخصوص ڈیٹیٹس اسپیسیفک_ڈیٹ_ڈیٹا = df.loc ['2023-07-01'] کے لئے ڈیٹا کو بازیافت کریں]# اعداد و شمار کو بازیافت کریں اعداد و شمار کو بازیافت کریںdatesdate_range_data = df.loc ['2023-07-01': '2023-07-31'] دوبارہ ترتیب دینے اور تعدد تبادلوں کی ایک رینج: پانڈاس مختلف تعدد کے لئے ٹائم سیریز کے اعداد و شمار کو دوبارہ ترتیب دینے کے لئے دوبارہ نمونہ () فنکشن فراہم کرتا ہے۔آپ مطلوبہ تعدد کی بنیاد پر ڈیٹا کو مجموعی یا انٹرپولیٹ کرسکتے ہیں۔مثال کے طور پر ، آپ ہر ماہ کی اقدار کی اوسط لے کر روزانہ کے اعداد و شمار کو ماہانہ ڈیٹا میں تبدیل کرسکتے ہیں۔یہاں ایک مثال ہے: پائیٹون کوپی کوڈ# اعداد و شمار کو ماہانہ فریکوینسی مونتھلی_ڈیٹا = df.resample ('m') پر دوبارہ نمونہ کریں۔ مطلب () وقت کی تبدیلی: آپ شفٹ () فنکشن کا استعمال کرتے ہوئے ڈیٹا فریم کے ٹائم انڈیکس کو منتقل کرسکتے ہیں۔اس سے آپ کو مختلف ٹائم پوائنٹس پر اقدار کے مابین اختلافات کا حساب لگانے یا پیچھے رہ جانے والے متغیر پیدا کرنے کی اجازت ملتی ہے۔مثال کے طور پر: پائیٹون کوپی کوڈ# ڈیٹا کو 1 دن کے دن_ڈیٹا = df.shift (1) رولنگ ونڈوز اور چلتی اوسط کے ذریعہ شفٹ کریں: جیسا کہ پہلے ذکر کیا گیا ہے ، آپ رولنگ () فنکشن کو رولنگ کے اعدادوشمار کا حساب لگانے کے لئے استعمال کرسکتے ہیں ، جیسے حرکت پذیر اوسط سے زیادہوقت کی ونڈویہ ڈیٹا کو ہموار کرنے اور رجحانات کی نشاندہی کرنے کے لئے مفید ہے۔یہاں 7 دن کی حرکت پذیر اوسط کا حساب لگانے کی ایک مثال ہے: پائیٹون کوپی کوڈ## 7 دن کی حرکت پذیر اوسطا میومونگ_اوریج = ڈی ایف ['ویلیو'] کا حساب لگائیں۔ رولنگ (ونڈو = 7)ڈیٹ ٹائم انڈیکس میں ٹی زیڈ پیرامیٹر کا استعمال کرتے ہوئے زون۔آپ ٹائم زون کی معلومات کو تبدیل کرسکتے ہیں ، ٹائم اسٹیمپ کو مقامی بنا سکتے ہیں ، اور ٹائم زون سے واقف کاروں کو انجام دے سکتے ہیں۔مثال کے طور پر: پائیتھون کوپی کوڈ# انڈیکس ڈی ایف کے ٹائم زون کو تبدیل کریں۔سیریز کا ڈیٹا۔پانڈاس وقت پر مبنی اشاریہ سازی ، تعدد تبادلوں ، تاریخ کی حد کی پیداوار ، اور ٹائم سیریز کے تصو .رات کے لئے وسیع رینج بھی فراہم کرتا ہے۔پانڈوں کی وسیع دستاویزات ان خصوصیات اور بہت کچھ کے بارے میں تفصیلی معلومات فراہم کرتی ہیں ، جس سے آپ کو ٹائم سیریز کے اعداد و شمار کے ساتھ موثر انداز میں کام کرنے میں مدد ملتی ہے۔"
    },
    {
        "Question": "آپ وقت کے ساتھ عددی متغیر کے رجحان کو دیکھنے کے لئے لائن پلاٹ کیسے بناتے ہیں؟",
        "Answer": "جب پانڈوں میں بڑے ڈیٹاسیٹس کے ساتھ کام کرتے ہو تو ، نظام کے وسائل کے موثر استعمال کو یقینی بنانے کے لئے میموری کی اصلاح بہت ضروری ہے۔پانڈوں میں میموری کی اصلاح کو سنبھالنے کے لئے کچھ تکنیک یہ ہیں: ڈیٹا کی اقسام کی اصلاح: اپنے کالموں کے لئے مناسب ڈیٹا کی اقسام کا انتخاب میموری کے استعمال کو نمایاں طور پر کم کرسکتا ہے۔پانڈاس مختلف سائز کے ساتھ ڈیٹا کی مختلف اقسام فراہم کرتا ہے۔مثال کے طور پر ، انٹیجر اقدار کے لئے INT64 کے بجائے INT8 کا استعمال کرنا یا فلوٹ 64 کے بجائے فلوٹ 32 کا استعمال فلوٹنگ پوائنٹ نمبر کے لئے فلوٹ 64 میموری کی کھپت کو کم کرسکتا ہے۔آپ کالموں کو واضح طور پر مناسب اعداد و شمار کی اقسام میں تبدیل کرنے کے لئے ASTYPE () طریقہ استعمال کرسکتے ہیں۔مثال کے طور پر: پائیٹون کوپی کوڈ# کالم کو ایک چھوٹے سے انٹیجر ڈیٹا ٹائپڈف ['کالم'] = ڈی ایف ['کالم'] میں تبدیل کریں۔ ایسٹائپ ('انٹ 8') زمرہ دار اعداد و شمار: اگر آپ کے پاس محدود تعداد میں منفرد اقدار کے ساتھ کالم ہیں تو ، کنورٹنگان کو واضح ڈیٹا کی قسم میں میموری کے استعمال کو نمایاں طور پر کم کیا جاسکتا ہے۔واضح ڈیٹا ٹائپ انفرادی اقدار کو ایک علیحدہ نظر ٹیبل میں محفوظ کرتا ہے اور کالم میں اقدار کی نمائندگی کرنے کے لئے انٹیجر کوڈ کا استعمال کرتا ہے۔آپ کالموں کو زمرہ دار ڈیٹا کی قسم میں تبدیل کرنے کے لئے ASTYPE () کا طریقہ استعمال کرسکتے ہیں۔مثال کے طور پر: پائیٹون کوپی کوڈ# کالم کو زمرہ دار ڈیٹا ٹائپڈ میں تبدیل کریں ['کالم'] = ڈی ایف ['کالم']پانڈوں میں پڑھیں_ سی ایس وی () یا ریڈ_ ٹیبل () میں ایک ساتھ ہی پورے ڈیٹاسیٹ کو میموری میں لوڈ کرنے کے بجائے چھوٹے حصوں میں ڈیٹا کو لوڈ کرنے کے لئے افعال۔اس سے آپ کو چھوٹے حصوں میں ڈیٹا پر کارروائی اور تجزیہ کرنے کی سہولت ملتی ہے۔ پیتھون کوپی کوڈ # CSV filechunk_size = 10000 for chunk سے pd.read_csv ('data.csv' ، cunksize = chunk_size) میں حصوں میں ڈیٹا لوڈ کریں: # ڈیٹا کا حصہ # پروسیس کریں #... لو_ میموری پیرامیٹر کا استعمال کریں: جب بڑے ڈیٹاسیٹس کو پڑھتے ہو تو ، آپ کم_میموری پیرامیٹر کو READ_CSV () یا READ_TABLE () افعال میں درست پر سیٹ کرسکتے ہیں۔اس سے پانڈوں کو ڈیٹا پڑھنے کے عمل کے دوران میموری کے استعمال کو بہتر بنانے کی اجازت ملتی ہے۔ پیتھون کوپی کوڈ# کم میموری کے استعمال کی اصلاح کے ساتھ سی ایس وی فائل پڑھیں۔تجزیہ کرنے یا پروسیسنگ کے لئے اس کی ضرورت نہیں ہے ، آپ انہیں ڈراپ () کے طریقہ کار کا استعمال کرکے چھوڑ سکتے ہیں۔غیر ضروری کالموں کو ہٹانا میموری کی کھپت کو کم کرتا ہے۔مثال کے طور پر: پائیٹون کوپی کوڈ# ڈیٹا فریمڈف ڈاٹ ڈراپ (['کالم 1' ، 'کالم 2'] ، محور = 1 ، ان پلیس = سچ) سے غیر ضروری کالموں کو چھوڑیں HDF5 فارمیٹ: بہت بڑے ڈیٹاسیٹس کے ل you ، آپ ڈیٹا کو ذخیرہ کرنے پر غور کرسکتے ہیں۔ایچ ڈی ایف 5 فارمیٹ ، جو موثر اسٹوریج اور بڑے عددی ڈیٹاسیٹس کی بازیافت فراہم کرتا ہے۔پانڈاس ریڈ_ ایچ ڈی ایف () اور ٹو_ ایچ ڈی ایف () فنکشنس.پیتھونکپی کوڈ# کو ایچ ڈی ایف 5 فائلڈف ڈاٹ ٹی ایچ ڈی ایف ('ڈیٹا ڈاٹ ایچ 5' ، کلید = 'ڈی ایف' ، موڈ = 'ڈبلیو کو لکھیں')# HDF5 فائلڈف = PD.READ_HDF (' data.h5 '، key =' DF ') سے ڈیٹا فریم پڑھیں ان تکنیکوں کو لاگو کرکے ، آپ پانڈوں میں بڑے ڈیٹاسیٹس کے ساتھ کام کرتے وقت میموری کے استعمال کو مؤثر طریقے سے بہتر بناسکتے ہیں۔یہ ضروری ہے کہ آپ اپنے سسٹم کی میموری رکاوٹوں پر غور کریں اور اپنی مخصوص ضروریات کی بنیاد پر مناسب اصلاح کی مناسب تکنیک کا انتخاب کریں۔"
    },
    {
        "Question": "متعدد عددی متغیر کے مابین ارتباط کو دیکھنے کے ل you آپ گرمی کا نقشہ کیسے بناتے ہیں؟",
        "Answer": "پانڈاس ڈیٹا انکوڈنگ اور ضابطہ کشائی کو سنبھالنے کے لئے متعدد طریقے مہیا کرتا ہے ، جس میں JSON اور XML فارمیٹس شامل ہیں۔یہاں آپ ان فارمیٹس کے ساتھ پانڈوں میں کس طرح کام کرسکتے ہیں: JSON: JSON فارمیٹ میں ڈیٹا کو انکوڈ کرنے یا ڈیکوڈ کرنے کے لئے ، پانڈاس مندرجہ ذیل طریقے فراہم کرتے ہیں: TO_JSON (): یہ طریقہ ایک پانڈاس آبجیکٹ (جیسے ، ڈیٹا فریم ، سیریز) کو JSON تار میں تبدیل کرتا ہے۔پائیتھون کوپی کوڈ# ڈیٹا فریم کو jsonjson_data = df.to_json () read_json () میں تبدیل کریں: یہ طریقہ JSON فائل یا JSON سٹرنگ کو پڑھتا ہے اور ایک ڈیٹا فیم.پیتھون کوپی کوڈ# JSON فائل کو ڈیٹا فیمڈف = pd.read_json ('ڈیٹا. joson' میں پڑھیں۔) آپ انکوڈنگ یا ضابطہ کشائی کے عمل کو اپنی مرضی کے مطابق بنانے کے ل these ان طریقوں میں اضافی پیرامیٹرز کی وضاحت کرسکتے ہیں ، جیسے اورینٹ ، لائنز ، کمپریشن ، اور بہت کچھ۔ان پیرامیٹرز کے بارے میں مزید تفصیلات کے لئے پانڈاس دستاویزات کا حوالہ دیں۔یہاں xml.etree.elementTree کا استعمال کرتے ہوئے ایک مثال ہے: XML کو پارس کرنا: آپ xml.etree.element ٹری ماڈیول کا استعمال کرتے ہوئے XML ڈیٹا کو پارس کرسکتے ہیں اور اسے پانڈاس ڈیٹا فیم میں تبدیل کرسکتے ہیں۔= et.parse ('data.xml') روٹ = ٹری.گیٹرووٹ ()# XML سے ڈیٹا نکالیں اور جڑ میں بچے کے لئے ڈیٹا فریمیٹا = [] بنائیں: قطار = {child بچے میں ذیلی بچے کے لئے: قطار [subchild.tag] =subchild.text ڈیٹا.ایپینڈ (قطار) df = pd.dataframe (ڈیٹا) اس مثال میں ، ہم et.parse () کا استعمال کرتے ہوئے XML فائل کی تجزیہ کرتے ہیں اور درختوں کو استعمال کرتے ہوئے جڑ عنصر حاصل کرتے ہیں۔اس کے بعد ہم XML سے ڈیٹا نکالتے ہیں اور لغات کی ایک فہرست بناتے ہیں ، جہاں ہر لغت ڈیٹا فریم میں ایک قطار کی نمائندگی کرتی ہے۔آخر میں ، ہم pd.dataframe () کا استعمال کرتے ہوئے ڈیٹا فریم بناتے ہیں۔Etimport Pandas as Pd# as as dataframedf = pd.dataframe بنائیں ({'نام': ['جان' ، 'ایلس' ، 'باب'] ، 'عمر': [25 ، 30 ، 35]})# XML بنائیںانڈیکس کے لئے عنصری = et.element ('روٹ') ، df.iterrows () میں قطار ()۔('data.xml') اس مثال میں ، ہم ڈیٹا فریم میں ہر صف کی نمائندگی کرنے والے ذیلی خطوط کے ساتھ ایک XML عنصر کی جڑ تیار کرتے ہیں۔ہم Iterrows () کا استعمال کرتے ہوئے ڈیٹا فریم پر تکرار کرتے ہیں ، ہر کالم کے لئے سبیلیمنٹ تیار کرتے ہیں ، اور ان کو اقدار تفویض کرتے ہیں۔آخر میں ، ہم et.elementtree () کا استعمال کرتے ہوئے ایک XML درخت بناتے ہیں اور اسے درختوں میں لکھتے ہیں۔مزید پیچیدہ منظرناموں یا مخصوص تقاضوں کے ل you ، آپ کو تفصیلی استعمال اور اختیارات کے ل the پانڈوں اور متعلقہ لائبریری دستاویزات کا حوالہ دینے کی ضرورت پڑسکتی ہے۔"
    },
    {
        "Question": "ای ڈی اے کے دوران آپ عددی کالم میں آؤٹ لیئرز کو کس طرح سنبھالتے اور تصور کرتے ہیں؟",
        "Answer": "طریقہ زنجیر پانڈوں میں ایک طاقتور تکنیک ہے جو آپ کو کوڈ کی ایک لائن میں ڈیٹا فریم یا سیریز پر متعدد آپریشن کرنے کی اجازت دیتی ہے۔اس سے کوڈ پڑھنے کی اہلیت اور اجتماعی پن میں اضافہ ہوتا ہے۔یہاں ایک مثال ہے جو یہ ظاہر کرتی ہے کہ پانڈوں میں طریقہ کار کی زنجیروں کو کس طرح استعمال کرنا ہے: PD## مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'A': [1 ، 2 ، 3] ، 'B': [4 ، 5 ، 6]، 'C': [7 ، 8 ، 9]})# طریقہ کار زنجیروں کی مثالسچ) اس مثال میں ، ہم طریقہ کار زنجیر کا استعمال کرتے ہوئے ایک ہی لائن میں درج ذیل کاروائیاں انجام دیتے ہیں: گروپ بائی ('A'): کالم 'a'.mean () کے ذریعہ ڈیٹا فریم گروپ کریں: ہر گروپ کے لئے وسط کا حساب لگائیں۔'، چڑھائی = غلط): کالم' B 'کے ذریعہ ڈیٹا فریم کو نزولی ترتیب میں ترتیب دیں۔ reset_index (ڈراپ = سچ): ڈیٹا فریم کا انڈیکس کو دوبارہ ترتیب دیں۔ نتیجہ متغیر کے نتائج کو تفویض کیا گیا ہے۔ طریقہ کار کو مؤثر طریقے سے زنجیر استعمال کرنے کے لئے ، برقرار رکھیں ، برقرار رکھیں ، برقرار رکھیں۔مندرجہ ذیل رہنما خطوط کو ذہن میں رکھیں: ہر طریقہ بہتر پڑھنے کے ل a ایک نئی لائن پر ہونا چاہئے۔ اگلی لائن پر بیان جاری رکھنے کے لئے ہر لائن کے آخر میں بیک سلیش (\\) کا استعمال کریں۔ جب گروپ کام کرنے یا دلائل کی وضاحت کرنے کے لئے ضروری ہو تو قوسین کا استعمال کریں۔طریقہ کار زنجیر کا فائدہ اٹھانا ، آپ اپنے کوڈ کو ہموار کرسکتے ہیں اور جامع اور پڑھنے کے قابل انداز میں متعدد آپریشن انجام دے سکتے ہیں۔تاہم ، محتاط رہیں کہ زنجیروں والے کوڈ کو بہت پیچیدہ یا سمجھنے میں مشکل نہ بنائیں۔کوڈ پڑھنے کی اہلیت اور ایک ساتھ جکڑے ہوئے آپریشنوں کی تعداد کے مابین توازن برقرار رکھنا ضروری ہے۔"
    },
    {
        "Question": "ای ڈی اے کے دوران آپ کس طرح ڈیٹا کی اسکیچ کا پتہ لگاتے ہیں اور ان کو سنبھالتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ کراس ٹیبلولیشن انجام دے سکتے ہیں ، جسے کراسسٹاب () فنکشن کا استعمال کرتے ہوئے ، ہنگامی جدول کے نام سے بھی جانا جاتا ہے۔کراس ٹیبولیشن آپ کو ڈیٹا فریم میں دو یا زیادہ زمرہ متغیر کے مابین تعلقات کا تجزیہ کرنے کی اجازت دیتا ہے۔یہاں پانڈوں میں کراسسٹاب () فنکشن کو کس طرح استعمال کرنے کی ایک مثال ہے: پی ڈی کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس کو PD# مثال کے طور پر ڈیٹا فریمڈف = PD.Dataframe ({'صنف': ['مرد' ، 'مرد' ، 'مرد' ، 'عورت' ،'خواتین'] ، 'عمر': [25 ، 30 ، 35 ، 25 ، 30] ، 'قومیت': ['USA' ، 'USA' ، 'کینیڈا' ، 'کینیڈا' ، 'USA']})# پرفارمکراس-ٹیبولیشن کراس_ٹاب = پی ڈی کروسسٹاب (ڈی ایف ['صنف'] ، ڈی ایف ['قومیت'])# کراس ٹیبولیشن پرنٹ (کراس_ٹاب) پرنٹ کریں اس مثال میں ، ہمارے پاس تین کالموں کے ساتھ ایک ڈیٹا فریم ہے: 'صنف' ، 'عمر' '، اور 'قومیت'۔ہم کراس ٹیبولیشن کا استعمال کرتے ہوئے 'صنف' اور 'قومیت' متغیر کے مابین تعلقات کا تجزیہ کرنا چاہتے ہیں۔ کراسسٹاب () فنکشن ان پٹ کے طور پر دو یا زیادہ واضح متغیرات لیتا ہے اور کراس ٹیبلولیشن ڈیٹا فریم تیار کرتا ہے۔اس معاملے میں ، ہم DF ['صنف'] اور DF ['قومیت'] کو کراسسٹاب () کے دلائل کے طور پر پاس کرتے ہیں۔قطاریں پہلے متغیر کی انوکھی قسموں کی نمائندگی کرتی ہیں (اس معاملے میں ، 'صنف') ، اور کالم دوسرے متغیر کی انوکھی قسموں کی نمائندگی کرتے ہیں (اس معاملے میں ، 'قومیت')۔ مندرجہ بالا مثال کی پیداوار ہے: کاپیکوڈینیشنلٹی کینیڈا یوسجینڈر فیملی 1 2 مل 1 1 1 ٹیبل سے پتہ چلتا ہے کہ کینیڈا کی قومیت والی ایک خاتون ہے ، امریکی قومیت کے ساتھ دو خواتین ، کینیڈا کی قومیت والا ایک مرد ، اور امریکی قومیت والا ایک مرد۔ کراس ٹیبلولیشن کے ذریعہ ، آپ اس میں بصیرت حاصل کرسکتے ہیں۔آپ کے ڈیٹاسیٹ میں متغیر متغیر کے مابین تقسیم اور رشتہ۔آپ قطار یا کالم مارجن کی وضاحت کرنے ، اقدار کو معمول پر لانے اور بہت کچھ کرنے کے لئے کراسسٹاب () فنکشن میں اضافی پیرامیٹرز بھی شامل کرسکتے ہیں۔دستیاب اختیارات سے متعلق مزید معلومات کے لئے پانڈاس دستاویزات کا حوالہ دیں۔"
    },
    {
        "Question": "ای ڈی اے کے دوران آپ اعلی کارڈنلٹی کے ساتھ زمرہ دار متغیرات کو کس طرح سنبھالتے اور تصور کرتے ہیں؟",
        "Answer": ""
    },
    {
        "Question": "ای ڈی اے کے دوران آپ متوازن کلاسوں کو کس طرح سنبھالتے اور تصور کرتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ مختلف طریقوں اور افعال کا استعمال کرتے ہوئے ڈیٹا کی تبدیلی اور فیچر انجینئرنگ کو سنبھال سکتے ہیں۔یہاں کچھ عام تکنیک ہیں: 1۔ایک یا زیادہ کالموں یا پورے ڈیٹا فریم پر کسٹم فنکشن کا اطلاق کرنے کے لئے DATAYOU پر افعال کا اطلاق (استعمال () فنکشن کا استعمال کرسکتے ہیں۔اس سے آپ کو اپنے ڈیٹا پر پیچیدہ تبدیلیاں انجام دینے کی سہولت ملتی ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس بطور PD#کالم 'a'df [' a_squared '] = df [' a '] میں اقدار۔لیمبڈا فنکشن جو ان پٹ ویلیو کو مربع کرتا ہے۔اس کے بعد ہم اس فنکشن کو 'A' کالم پر DF ['A'] کا استعمال کرتے ہوئے لاگو کرتے ہیں۔ () استعمال کریں۔اس کے نتیجے میں اقدار ڈیٹا فریم 2 میں ایک نئے کالم 'A_SQUARED' کو تفویض کی گئی ہیں۔ڈمی متغیر کی تخلیق کرتے ہوئے جب متغیر متغیرات سے نمٹنے کے بعد ، آپ ڈمی متغیرات بنانے کے لئے گیٹ_ڈمی () فنکشن کا استعمال کرسکتے ہیں ، جسے ایک گرم انکوڈنگ بھی کہا جاتا ہے۔ڈمی متغیر الگ الگ کالموں میں بائنری متغیر (0 یا 1) کے طور پر واضح متغیر کی نمائندگی کرتے ہیں۔یہاں ایک مثال یہ ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور PD# مثال کے طور پر ڈیٹا فریم 'color'df = pd.dataframe ({' رنگ ': [' سرخ '،' نیلے '،' سبز ']})# ڈمی متغیرات بنائیں'رنگ' کالم ڈومی_ڈیف = pd.get_dummies (df ['color'])# ڈمی متغیرات کو اصل dataframedf = pd.concat ([df ، dummy_df] ، محور = 1)# پرنٹ کریں ٹرانسفارمڈ ڈیٹا فیم پرنٹ (df) میں پرنٹ کریںاس مثال کے طور پر ، ہمارے پاس ایک ڈیٹا فریم ہے جس میں ایک زمرہ کالم 'رنگ' ہے۔ہم 'رنگ' کالم کے لئے ڈمی متغیر بنانے کے لئے PD.get_dmise () استعمال کرتے ہیں۔اس کے نتیجے میں ڈمی متغیرات کو پھر PD.concat (). 3 کا استعمال کرتے ہوئے اصل ڈیٹا فریم کے ساتھ جوڑ دیا جاتا ہے۔گمشدہ ویلیوز پانڈاس کو ہینڈل کرنا گمشدہ اقدار کو سنبھالنے کے ل various مختلف افعال مہیا کرتا ہے ، جیسے فلنا () کو ایک مخصوص قدر یا طریقہ کار سے لاپتہ اقدار کو بھرنے کے ل ، ، قطاروں یا کالموں کو لاپتہ اقدار کے ساتھ ہٹانے کے لئے ، اور انٹرپولیشن کا استعمال کرتے ہوئے گمشدہ اقدار کو پُر کرنے کے لئے انٹرپولیٹ ()۔اس کی ایک مثال یہ ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور Pdimport numpy کے طور پر NP# مثال کے طور پر Dataframe گمشدہ اقدار کے ساتھ DDF = pd.dataframe ({'A': [1 ، np.nan ، 3] ، 'B': [np.nan ، 5 ، 6]})# گمشدہ اقدار کو 0df_fled = df.fillna (0)# گمشدہ اقدار کے ساتھ ڈراپ قطاریں DF_Dropped = df.dropna ()# لکیری انٹرپولیشن ڈیف_ٹرپولیٹڈ = df.interpolate کا استعمال کرتے ہوئے گمشدہ اقدار کو پُر کریں۔(df_dropped) پرنٹ (df_interpolated) اس مثال میں ، ہمارے پاس ایک ڈیٹا فریم ہے جس میں گمشدہ اقدار ہیں جن کی نمائندگی NP.nan کے طور پر کی جاتی ہے۔ہم گمشدہ اقدار کو 0 ، ڈراپنا () سے محروم اقدار کے ساتھ قطاریں ہٹانے کے لئے ، اور لکیری انٹرپولیشن 4 کا استعمال کرتے ہوئے گمشدہ اقدار کو پُر کرنے کے ل fl فلنا (0) کا استعمال کرتے ہیں۔اسکیلنگ اور معمول بنانا ڈیٹا آپ کے اعداد و شمار کو پیمانے یا معمول پر لانے کے لئے مختلف تکنیکوں کا استعمال کرسکتے ہیں۔اس مقصد کے لئے سکیٹ لرن لائبریری سے منیماکس اسکیلر ، اسٹینڈرڈس اسکیلر ، یا روبسٹ اسکیلر کلاس استعمال کی جاسکتی ہیں۔یہاں ایک مثال یہ ہے: PDFROMESSSCALER PANDAS PDFROM SKLEREN.Preprocessing درآمد Minmaxcaler# مثال کے ساتھ اعداد و شمار کے کالم ایس ڈی ایف = PD.Dataframe ({'A': [1 ، 2 ، 3] ، 'بی': [4 ، 5 ، 6]})# اسکیل"
    },
    {
        "Question": "ای ڈی اے کے دوران آپ ڈیٹ ٹائم متغیر کو کس طرح سنبھالتے اور تصور کرتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ مختلف طریقوں اور افعال کا استعمال کرتے ہوئے ڈیٹا کو معمول پر لانے اور اسکیلنگ کو سنبھال سکتے ہیں۔یہاں دو عام تکنیک ہیں: 1۔من میکس اسکیلنگ (نارملائزیشن) من میکس اسکیلنگ ، جسے معمول کے نام سے بھی جانا جاتا ہے ، اعداد و شمار کو ایک خاص حد میں ، عام طور پر 0 اور 1 کے درمیان بازیافت کرتا ہے ، آپ کم سے کم میکس اسکیلنگ انجام دینے کے لئے سکیٹ لرن لائبریری سے من میکس اسکیلر کلاس استعمال کرسکتے ہیں۔یہاں ایک مثال یہ ہے: PDFROMESSSSCALER# PDFROMOSSING.Preprocessing درآمد MINMAXSCALER# مثال کے ساتھ اعداد و شمار کے کالم ایس ڈی ایف = PD.Dataframe ({'A': [10 ، 20 ، 30] ، 'بی': [5 ، 15 ، 25]})# مین میکس اسکیلسکلر = منیماکس اسکیلر ()# کو ڈیٹی فریمڈف_سکلڈ = pd.dataframe (اسکیلر.فیٹ_ٹرانسفارم (ڈی ایف) ، کالم = ڈی ایف.و کالمز) کے ساتھ سیٹ کریں ، اس طرح کے ڈیٹا فیم پرنٹ (DF_Scaled) کو پرنٹ کریں ، ہم پرنٹ کریں ،عددی کالم 'A' اور 'B'۔ہم منیماکس اسکیلر کلاس کی ایک مثال بناتے ہیں اور ڈیٹا کو اسکیل کرنے کے لئے Fit_transform () طریقہ استعمال کرتے ہیں۔اس کے نتیجے میں اسکیلڈ اقدار کو ایک نیا ڈیٹا فریم بنانے کے لئے استعمال کیا جاتا ہے ، ایک ہی کالم کے ناموں کے ساتھ ، DF_SCALED۔ مذکورہ بالا مثال کی آؤٹ پٹ یہ ہوگی: CSSCOPY کوڈ A B0 0.0 0.01 0.5 0.52 0.52 1.0 1.0 HERE ، ہر کالم میں اقدار کے درمیان اسکیل کیا جاتا ہے۔0 اور 1 اس کالم 2 میں کم سے کم اور زیادہ سے زیادہ اقدار کی بنیاد پر۔اسٹینڈرڈائزیشن اسٹینڈرڈائزیشن ڈیٹا کو صفر کا مطلب اور یونٹ کے تغیر میں تبدیل کرتی ہے۔آپ معیاری کاری کو انجام دینے کے لئے سککیٹ لرن لائبریری سے اسٹینڈرڈرس اسکیلر کلاس استعمال کرسکتے ہیں۔اس کی ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس بطور PDFROM SKLEREN.Preprocessing امپورٹ اسٹینڈرڈس اسکیلر# مثال کے ساتھ عددی کالم ایس ڈی ایف = PD.Dataframe ({'A': [10 ، 20 ، 30] ، 'B': [5 ، 15 ، 25]})# اسٹینڈرڈرس اسکیلر = اسٹینڈرڈسکلر ()# فٹ اور تبدیل کریں dataframedf_scaled = pd.dataframe (scaler.fit_transfor (df) ، کالم = df.columons)# اسکیلڈ ڈیٹا فیم پرنٹ (df_scaled) کے ساتھ پرنٹ کریں ، ہم پرنٹ کریں A ataframe پرنٹ (df_scaled)عددی کالم 'A' اور 'B'۔ہم اسٹینڈرڈرس اسکیلر کلاس کی ایک مثال تیار کرتے ہیں اور ڈیٹا کو معیاری بنانے کے لئے Fit_transform () طریقہ استعمال کرتے ہیں۔اس کے نتیجے میں معیاری اقدار کو ایک نیا ڈیٹا فریم بنانے کے لئے استعمال کیا جاتا ہے ، اسی کالم کے ناموں کے ساتھ ، DF_SCALED۔ مذکورہ بالا مثال کی آؤٹ پٹ یہ ہوگی: CSSCOPY کوڈ A B0 -1.224745 -1.2247451 0.0000000000000000002 1.224747474745 ہیری میں ، وینس میں۔صفر کا مطلب اور یونٹ کے تغیرات کے لئے معیاری۔ اپنے ڈیٹا کو اسکیلنگ یا معیاری بنانا ، آپ اس بات کو یقینی بناسکتے ہیں کہ عددی متغیر اسی طرح کے پیمانے پر ہیں ، جو مشین لرننگ الگورتھم اور ڈیٹا تجزیہ کے کاموں کے لئے فائدہ مند ثابت ہوسکتے ہیں۔ نوٹ کریں۔، عام طور پر یہ تجویز کیا جاتا ہے کہ تربیت کے اعداد و شمار پر اسکیلر کو فٹ کریں اور اعداد و شمار کے رساو سے بچنے کے لئے ٹیسٹ یا نظر نہ آنے والے ڈیٹا کو تبدیل کرنے کے لئے اسی اسکیلر کا استعمال کریں۔"
    },
    {
        "Question": "آپ متعدد عددی متغیرات کے لئے بکھرے ہوئے میٹرکس پلاٹ کو کس طرح تخلیق اور ترجمانی کرتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ مختلف طریقوں اور افعال کا استعمال کرتے ہوئے ڈیٹا بائننگ اور صوابدیدی کو سنبھال سکتے ہیں۔یہاں دو عام تکنیک ہیں: 1۔کٹ اور QCUT فنکشنز کٹ () اور QCUT () پانڈوں میں افعال کو مستقل متغیرات کو مجرد وقفوں یا زمرے میں باندھنے یا عکاسی کرنے کے لئے استعمال کیا جاسکتا ہے۔یہ اعداد و شمار کو مساوی چوڑائی کے ٹوکریوں میں تقسیم کرتا ہے۔ کیو کٹ () فنکشن: یہ فنکشن ڈیٹا کو کوانٹائل میں تقسیم کرتا ہے ، جس سے ہر بن میں تقریبا برابر تعداد میں ڈیٹا پوائنٹس کو یقینی بنایا جاتا ہے۔بن کناروں کا تعین اعداد و شمار کی تقسیم کی بنیاد پر کیا جاتا ہے۔ یہاں کی ایک مثال جو ان افعال کے استعمال کو ظاہر کرتی ہے: PDimport numpy کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس کو NP# مثال کے طور پر ایک عددی کالم ڈی ایف = PD.Dataframe کے ساتھ ڈیٹا فریم ({'عمر': [[[عمر ': [22 ، 25 ، 30 ، 35 ، 40 ، 45 ، 50]})# کٹ () ڈی ایف ['ایج_بنس'] = pd.cut (df ['عمر'] ، ڈبے = [20 ، 30 کا استعمال کرتے ہوئے برابر چوڑائی بائننگ انجام دیں.مثال کے طور پر ، ہمارے پاس عددی کالم 'عمر' کے ساتھ ایک ڈیٹا فریم ہے۔ہم PD.cut () کو برابر چوڑائی بائننگ انجام دینے کے لئے استعمال کرتے ہیں ، جس میں بن کناروں کو [20 ، 30 ، 40 ، 50] کی وضاحت کی گئی ہے۔نتیجے میں بن لیبل ایک نئے کالم 'AGE_BINS' کو تفویض کیے گئے ہیں۔ہم کوانٹائل پر مبنی بائننگ انجام دینے کے لئے PD.QCUT () کا استعمال بھی کرتے ہیں ، جس میں کوانٹائل کی تعداد 3 کے طور پر بتائی جاتی ہے۔ نتیجے میں بن لیبل ایک نئے کالم 'AGE_QUANTILES' میں تفویض کیے جاتے ہیں۔ مذکورہ بالا مثال کی آؤٹ پٹ یہ ہوگی: کاپی کوڈ ایج_بنسAGE_QUANTILES0 22 (20 ، 30] (21.999 ، 33.0] 1 25 (20 ، 30] (21.999 ، 33.0] 2 30 (20 ، 30] (33.0 ، 40.0] 3 35 (30 ، 40] (33.0 ، 40] 40 40].AGE_QUANTILES کا کالم کوانٹائل پر مبنی بِنز 2 کی نمائندگی کرتا ہے۔ کسٹم بائننگ اگر آپ کو بائننگ کے ل specific مخصوص تقاضے ہیں یا اپنی اپنی مرضی کے مطابق بنوں کی وضاحت کرنا چاہتے ہیں تو ، آپ لیبل پیرامیٹر کے ساتھ PD.cut () فنکشن استعمال کرسکتے ہیں۔ اس سے آپ کو کسٹم لیبل تفویض کرنے کی اجازت ملتی ہے۔ہر بن کے لئے۔ یہاں کی ایک مثال ہے: پائیتھون کوپی کوڈیمپورٹ پانڈاس بطور PDimport numpy کے طور پر NP# مثال کے طور پر ایک عددی کالم ڈی ایف = pd.dataframe ({'عمر': [22 ، 25 ، 30 ، 35 ، 40 ، 45 ، 50]})})# کسٹم بِنز اور لیبل بنس کی وضاحت کریں = [20 ، 30 ، 40 ، 50] لیبل = ['یوتھ' ، 'بالغ' ، 'سینئر']# کسٹم لیبلز ڈی ایف کے ساتھ کٹ () کا استعمال کرتے ہوئے بائننگ پرفارم کریں ['ایج_ٹیٹریجری'] = pd.cut."
    },
    {
        "Question": "ای ڈی اے کے دوران آپ فیچر اسکیلنگ اور نارملائزیشن کو کس طرح انجام دیتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ ڈیٹ ٹائم انڈیکس یا ٹائم اسٹیمپ آبجیکٹ کے TZ_CONVERT () اور TZ_Localize () طریقوں کا استعمال کرتے ہوئے ٹائم زون کے تبادلوں کو سنبھال سکتے ہیں۔یہاں آپ ٹائم زون کے تبادلوں کو کس طرح انجام دے سکتے ہیں: ڈیٹا فریم کالم کو ڈیٹ ٹائم انڈیکس یا ٹائم اسٹیمپ آبجیکٹ میں تبدیل کریں اگر یہ پہلے سے ہی اس فارمیٹ میں نہیں ہے۔ پی ڈی کوپی کوڈیمپورٹ پانڈاس بطور PD# مثال ڈیٹا ٹائم کالم ڈی ایف = پی ڈی ڈی اے ایف آر اے ایم (time 'ٹائم اسٹیمپ': [[{'ٹائم اسٹیمپ': ['2022-01-01 12:00:00' ، '2022-01-01 13:00:00'] ، 'ویلیو': [10 ، 20]})# 'ٹائم اسٹیمپ' کالم کو ڈیٹیمیڈف میں تبدیل کریں ['ٹائم اسٹیمپ'] = pd.to_datetime (df [' Timestamp '])#' ٹائم اسٹیمپ 'کالم کو بطور انڈیکسڈف.سیٹ_ انڈیکس (' ٹائم اسٹیمپ '، ان پلیس = سچ) ڈیٹا فریم کے ٹائم زون کو تبدیل کرنے کے لئے TZ_Convert () کا طریقہ استعمال کریں۔مطلوبہ ٹائم زون ۔پیتھون کوپی کوڈ# ٹائم زون کو 'امریکہ/new_york'df = df.tz_convert (' امریکہ/new_york ') میں تبدیل کریں ، اس مثال میں ، ہم ڈیٹا فریم کے ٹائم زون کو ڈیفالٹ ٹائم زون سے' امریکہ میں تبدیل کرتے ہیں۔/new_york'.if اگر ڈیٹا فریم میں ٹائم زون سیٹ نہیں ہے تو ، آپ ڈیٹا فریم کو کسی مخصوص ٹائم زون میں مقامی بنانے کے لئے tz_localize () کا طریقہ استعمال کرسکتے ہیں۔ پیتھون کوپی کوڈ# ڈیٹا فریم کو 'امریکہ/LOS_ANGELS' میں مقامی بنائیں۔.tz_localize ('امریکہ/LOS_ANGELES') یہاں ، ہم ڈیٹا فریم کو 'امریکہ/LOS_ANGELES' ٹائم زون پر مقامی بناتے ہیں۔ نوٹ کریں کہ جب ٹائم زون کی تبدیلی انجام دیتے ہو تو ، یہ یقینی بنانا ضروری ہے کہ آپ کے ڈیٹا میں ٹائم زون کے بارے میں ضروری معلومات موجود ہوں۔تبادلوں صرف اس صورت میں درست ہوگا جب اصل ٹائم زون کی معلومات درست ہو۔ آپ ان کالموں میں ڈیٹا ٹائم انڈیکس یا ٹائم اسٹیمپ آبجیکٹ تک رسائی حاصل کرکے اور ان پر TZ_CONVERT () یا TZ_LOCALIZE () کے طریقوں کا استعمال کرکے ڈیٹا فریم کے اندر مخصوص کالموں میں ٹائم زون کے تبادلوں کا اطلاق کرسکتے ہیں۔براہ راست۔ مزید اعلی درجے کی ٹائم زون ہینڈلنگ اور تبادلوں کے ل you ، آپ PYTZ لائبریری کو بھی دریافت کرسکتے ہیں ، جو ازگر میں ٹائم زون کے لئے وسیع پیمانے پر مدد فراہم کرتا ہے۔"
    },
    {
        "Question": "ای ڈی اے کے دوران آپ فیچر انکوڈنگ اور تبدیلی کس طرح انجام دیتے ہیں؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ڈیٹا فریم میں کالم کے وسط ، میڈین ، اور موڈ کا حساب لگانے کے لئے یہاں ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'ویلیو': [10 ، 20 ، 30 ، 30 ، 30 ، 40 40.). ویلیوز [0] پرنٹ (\"مطلب:\" ، مطلب) پرنٹ (\"میڈین:\" ، میڈین) پرنٹ (\"موڈ:\" ، موڈ) اس مثال میں ، ہمارے پاس 'ویلیو' نامی کالم والا ڈیٹا فریم ہے۔ہم وسط کا حساب لگانے کے لئے 'ویلیو' کالم کے وسط () طریقہ کا استعمال کرتے ہیں ، میڈین کا حساب لگانے کے لئے میڈین () طریقہ ، اور موڈ کا حساب لگانے کے لئے موڈ () کا طریقہ۔ویلیو وصولی کا استعمال کرتے ہوئے موڈ کو نکالا جاتا ہے ، یہ فرض کرتے ہوئے کہ ڈیٹاسیٹ میں صرف ایک ہی موڈ ہے۔ آؤٹ پٹ یہ ہوگا: میک فیل کوپی کوڈیمین: 36.25 میڈیم: 35.0Mod، اور موڈ 50 ہے۔ نوٹ کریں کہ اگر ڈیٹاسیٹ میں متعدد طریقوں موجود ہیں تو موڈ () کا طریقہ متعدد اقدار کو واپس کرسکتا ہے۔اس مثال میں ، ہم فرض کرتے ہیں کہ صرف ایک ہی موڈ ہے اور انڈیکسنگ (اقدار [0]) کا استعمال کرتے ہوئے پہلی قدر نکالیں۔"
    },
    {
        "Question": "ای ڈی اے کے دوران آپ عددی متغیر کے مابین کثیر القومیت کا پتہ لگانے اور کس طرح سنبھالتے ہیں؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے متعدد شرائط پر مبنی ڈیٹا فریم میں قطاروں کو فلٹر کرنے کے لئے یہاں ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس ڈیٹا فریمڈف = pd.dataframe ({'نام': ['ایلس' ، 'چارلی' ، 'ڈیو'] ،' عمر ': [25 ، 30 ، 35 ، 40] ،' شہر ': [' نیویارک '،' لندن '،' پیرس '،' ٹوکیو ']})# متعدد شرائط فلٹرڈ_ڈیف = ڈی ایف پر مبنی فلٹر قطاریں۔شہر '۔ہم دو شرائط کی بنیاد پر قطار کو فلٹر کرنا چاہتے ہیں: 30 سے زیادہ عمر اور شہر 'لندن' کے برابر۔ہم [] انڈیکسنگ آپریٹر کو قوسین کے اندر کی شرائط کی وضاحت کرنے کے لئے استعمال کرتے ہیں ، جسے \"اور\" حالت کے لئے اینڈ آپریٹر کے ذریعہ الگ کیا جاتا ہے۔ آؤٹ پٹ یہ ہوگا: کاپی کوڈ کا نام ایج سٹی 1 باب 30 لندن ہیر ، صرف 'نام' کے ساتھ 'باب' کے ساتھ ہی قطار'،' عمر '30 کے طور پر ، اور' سٹی 'بطور' لندن 'دونوں شرائط کو پورا کرتا ہے اور اسے فلٹر شدہ ڈیٹا فریم (فلٹرڈ_ ڈی ایف) میں شامل کیا جاتا ہے۔ آپ مختلف منطقی آپریٹرز جیسے \"اور\" اور \"شرائط ، |\"یا\" شرائط ، اور \"نہیں\" شرائط کے لئے ڈیٹا فریم میں قطاروں کو فلٹر کرنے کے لئے متعدد شرائط کو یکجا کرنے کے لئے۔"
    },
    {
        "Question": "ای ڈی اے کے دوران آپ ٹیکسٹ ڈیٹا کو کس طرح سنبھالتے اور تصور کرتے ہیں؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ڈیٹا فریم میں کسی دوسرے کالم میں گروپ کردہ کالم میں اقدار کے جوڑے کا حساب لگانے کے لئے یہاں ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'شہر': ['نیو یارک' ، 'لندن'، 'پیرس' ، 'لندن' ، 'پیرس'] ، 'آبادی': [8500000 ، 8900000 ، 2200000 ، 8300000 ، 2400000]})# 'آبادی' کالم میں 'سٹی' ایس یو ایم_بی_سیٹی = ڈی ایف کے ذریعہ گروپوں میں اقدار کی رقم کا حساب لگائیں۔. گروپ بائی ('شہر') ['آبادی']۔ رقم () پرنٹ (SUM_BY_CITY) اس مثال میں ، ہمارے پاس کالم 'شہر' اور 'آبادی' کے ساتھ ایک ڈیٹا فریم ہے۔ہم 'سٹی' کالم کے ذریعہ گروپ کردہ آبادی کی اقدار کی رقم کا حساب لگانا چاہتے ہیں۔ہم 'سٹی' کالم کے ذریعہ ڈیٹا فریم کو گروپ کرنے کے لئے گروپ بائی () کے طریقہ کار کا استعمال کرتے ہیں اور پھر ہر گروپ کے اندر 'آبادی' کالم میں اقدار کی رقم کا حساب لگانے کے لئے رقم () طریقہ کا اطلاق کرتے ہیں۔8500000PARIS 4600000NAME: آبادی ، DTYPE: INT64HERE ، 'سٹی' کالم میں ہر منفرد شہر کے لئے آبادی کی اقدار کا مجموعہ حساب کیا جاتا ہے۔نتیجے میں سیریز آبجیکٹ (SUM_BY_CITY) میں اقدار کے طور پر اشاریہ اور آبادی کی اقدار کی رقم کے طور پر شہر ہیں۔) ، وغیرہ ، مطلوبہ اجتماعی فنکشن کے ساتھ صرف () کی جگہ لے کر۔"
    },
    {
        "Question": "ای ڈی اے کے دوران آپ پی سی اے جیسی جہتی کمی کی تکنیک کو کس طرح انجام دیتے ہیں؟",
        "Answer": "یقینا!ڈیٹا فریم کو پانڈوں کا استعمال کرتے ہوئے ایک لغت میں تبدیل کرنے کے لئے ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'نام': ['ایلس' ، 'چارلی'] ، 'عمر':۔مثال کے طور پر ، ہمارے پاس کالم 'نام' ، 'عمر' ، اور 'شہر' کے ساتھ ایک ڈیٹا فریم ہے۔ہم ڈیٹا فریم کے TO_DICT () کا طریقہ استعمال کرتے ہیں تاکہ اسے لغت میں تبدیل کیا جاسکے۔اورینٹ = 'ریکارڈز' دلیل نتیجے میں لغت کی شکل کی وضاحت کرتی ہے ، جہاں ڈیٹا فریم کی ہر قطار لغت کا ریکارڈ بن جاتی ہے۔ آؤٹ پٹ یہ ہوگا: سی ایس ایس کوپی کوڈ [{'نام': 'ایلس' ، 'عمر': 25 ، 'شہر ':' نیویارک '} ، {' نام ':' باب '،' عمر ': 30 ،' شہر ':' لندن '} ، {' نام ':' چارلی '،' عمر ': 35 ،' شہر':' پیرس '}] یہاں ، ڈیٹا فریم کو لغت کی فہرست میں تبدیل کیا گیا ہے ، جہاں ہر لغت ڈیٹا فریم کی ایک قطار کی نمائندگی کرتی ہے۔لغات کی کلیدیں کالم کے ناموں سے مطابقت رکھتی ہیں ، اور اقدار اسی سیل اقدار کے مطابق ہیں۔ نوٹ کریں کہ TO_DICT () طریقہ مختلف لغت کی شکلوں کے لئے مختلف دیگر اختیارات فراہم کرتا ہے۔آپ کالم کے ناموں کی لغت کو کلیدوں اور کالم کی اقدار کے طور پر اقدار کے طور پر ، یا 'فہرست' کے طور پر 'ڈکٹ' کے طور پر اورینٹ پیرامیٹر کی وضاحت کرسکتے ہیں جہاں ہر کالم کا نام اپنی اقدار کی فہرست میں نقشہ بناتا ہے۔"
    },
    {
        "Question": "آپ باکس پلاٹوں یا وایلن پلاٹوں کا استعمال کرتے ہوئے مختلف گروپوں میں عددی متغیر کی تقسیم کا تجزیہ کیسے کرتے ہیں؟",
        "Answer": "یقینا!یہاں ڈیٹا فریم کو JSON سٹرنگ میں تبدیل کرنے کے لئے ایک مثال کا کوڈ ہے جس کا استعمال کرتے ہوئے پانڈوں کا استعمال کرتے ہوئے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹی فریمف = PD.Dataframe ({'نام': ['ایلس' ، 'چارلی'] ، 'عمر' '.اس مثال میں ، ہمارے پاس کالم 'نام' ، 'عمر' ، اور 'شہر' کے ساتھ ایک ڈیٹا فریم ہے۔ہم ڈیٹا فریم کے TO_JSON () کا طریقہ استعمال کرتے ہیں تاکہ اسے JSON تار میں تبدیل کیا جاسکے۔اورینٹ = 'ریکارڈز' دلیل کے نتیجے میں JSON سٹرنگ کی شکل کی وضاحت ہوتی ہے ، جہاں ڈیٹا فریم کی ہر قطار JSON ریکارڈ بن جاتی ہے۔ آؤٹ پٹ ہوگا: CSSCOPY کوڈ [{\"نام\": \"ایلس\" ، \"عمر\": 25 ،\"سٹی\": \"نیو یارک\"} ، {\"نام\": \"باب\" ، \"عمر\": 30 ، \"شہر\": \"لندن\"} ، {\"نام\": \"چارلی\" ، \"عمر\": 35 ، \"شہر \":\" پیرس \"}] یہاں ، ڈیٹا فریم کو JSON تار میں تبدیل کیا گیا ہے جو لغت کی فہرست کی نمائندگی کرتا ہے۔ہر لغت ڈیٹا فریم کی ایک قطار کی نمائندگی کرتی ہے ، جہاں کلیدیں کالم کے ناموں سے مطابقت رکھتی ہیں اور اقدار اسی سیل اقدار سے مطابقت رکھتی ہیں۔ نوٹ کریں کہ TO_JSON () طریقہ مختلف JSON فارمیٹس کے لئے مختلف دیگر اختیارات فراہم کرتا ہے۔آپ JSON سٹرنگ حاصل کرنے کے لئے 'کالم' کے طور پر اورینٹ پیرامیٹر کی وضاحت کرسکتے ہیں جہاں کالم کے نام چابیاں بن جاتے ہیں اور کالم کی اقدار اقدار بن جاتی ہیں ، یا 'انڈیکس' JSON سٹرنگ میں انڈیکس اقدار کو شامل کرنے کے لئے۔"
    },
    {
        "Question": "ای ڈی اے کے دوران آپ ٹائم سیریز کے ڈیٹا کو کس طرح سنبھالتے اور تصور کرتے ہیں؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ڈیٹا فریم میں کالم کی مجموعی مصنوعات کا حساب لگانے کے لئے یہاں ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس ڈیٹا فریمڈف = pd.dataframe ({'ویلیو': [2 ، 3 ، 4 ، 5]})# مجموعی حساب کتاب کریں'ویلیو' کالمکومولیٹو_ پروڈکٹ = ڈی ایف ['ویلیو'] کی مصنوعات۔ کمپروڈ () پرنٹ (مجموعی_ پروڈکٹ) اس مثال میں ، ہمارے پاس 'ویلیو' نامی کالم والا ڈیٹا فریم ہے۔ہم مجموعی مصنوعات کا حساب لگانے کے لئے 'ویلیو' کالم کے کمپروڈ () طریقہ کار کا استعمال کرتے ہیں۔کمپرڈ () کا طریقہ کالم کے آغاز سے لے کر ہر صف تک تمام اقدار کی پیداوار کا حساب لگاتا ہے ، جس کے نتیجے میں مجموعی مصنوعات کی ایک سیریز ہوتی ہے۔ آؤٹ پٹ یہ ہوگا: یامل کوپی کوڈ 0 21 62 243 120Name: ویلیہر صف کے لئے 'ویلیو' کالم کی مصنوعات کا حساب لگایا جاتا ہے۔نتیجے میں سیریز آبجیکٹ (مجموعی_ پروڈکٹ) کی لمبائی ڈیٹا فریم کی طرح ہوتی ہے ، جہاں ہر قدر اس صف تک مجموعی مصنوع کی نمائندگی کرتی ہے۔ نوٹ کریں کہ اگر کالم میں کوئی گمشدہ اقدار (این اے این) موجود ہیں تو ، مجموعی مصنوع بھی نان ہوگا۔اس نقطہ کے بعد.اگر ضرورت ہو تو فلنا () یا ڈراپنا () جیسے طریقوں کا استعمال کرتے ہوئے مجموعی مصنوع کا حساب لگانے سے پہلے آپ گمشدہ اقدار کو سنبھال سکتے ہیں۔"
    },
    {
        "Question": "ای ڈی اے کے دوران آپ ڈپلیکیٹ اقدار کی شناخت اور ہینڈل کیسے کرتے ہیں؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ڈیٹا فریم کے کالم میں لگاتار قطاروں کے درمیان فرق کا حساب لگانے کے لئے یہاں ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'ویلیو': [2 ، 5 ، 8 ، 12]})#'ویلیو' کالم ڈف = ڈی ایف ['ویلیو'] میں لگاتار قطاروں کے درمیان فرق کا حساب لگائیں۔ ڈف () پرنٹ (فرق) اس مثال میں ، ہمارے پاس 'ویلیو' نامی کالم والا ڈیٹا فریم ہے۔ہم لگاتار قطاروں کے مابین فرق کا حساب لگانے کے لئے 'ویلیو' کالم کے مختلف () طریقہ کار کا استعمال کرتے ہیں۔ڈف () طریقہ کالم میں ہر قدر اور پچھلی قدر کے درمیان فرق کا حساب لگاتا ہے ، جس کے نتیجے میں اختلافات کی ایک سیریز ہوتی ہے۔ آؤٹ پٹ یہ ہوگا: یامل کوپی کوڈ 0 نان 1 3.02 3.03 4.0Name: ویلی'ویلیو' کالم کا حساب لگایا جاتا ہے۔نتیجے میں سیریز آبجیکٹ (DIFF) کی لمبائی ڈیٹا فریم کی طرح ہے ، جہاں پہلی قیمت نان ہے کیونکہ فرق کی گنتی کرنے کے لئے کوئی پچھلی قیمت نہیں ہے ، اور اس کے بعد کی اقدار ہر قدر اور پچھلی قدر کے درمیان فرق کی نمائندگی کرتی ہیں۔ نوٹ کریں کہ آپ کر سکتے ہیں۔کسی خاص وقفے میں اقدار کے مابین فرق کا حساب لگانے کے لئے ڈف () طریقہ کار کے پیرامیٹر کی بھی وضاحت کریں۔مثال کے طور پر ، ڈی ایف ['ویلیو']۔ ڈف (ادوار = 2) اس سے پہلے ہر قدر اور قیمت کی دو قطاروں کے درمیان فرق کا حساب لگائے گا۔"
    },
    {
        "Question": "آپ سکریٹر میٹرکس پلاٹوں یا جوڑی کے پلاٹوں کا استعمال کرتے ہوئے متعدد متغیرات کے مابین تعلقات کا تجزیہ اور تصور کیسے کرتے ہیں؟",
        "Answer": "یقینا!ڈیٹا فریم کی ہر قطار میں فنکشن کا اطلاق کرنے اور پانڈوں کا استعمال کرتے ہوئے نتائج کی بنیاد پر ایک نیا کالم بنانے کے لئے ایک مثال کوڈ ہے: پی ڈی کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس کو PD# مثال کے طور پر ڈیٹا فیمڈف = PD.Dataframe ({'نام': ['ایلس' ، '،'باب '،' چارلی '] ،' عمر ': [25 ، 30 ، 35]})# ہر روڈف پر لاگو ہونے کے لئے کسی فنکشن کی وضاحت کریں۔# فنکشن کو ہر صف پر لاگو کریں اور ایک نیا کالم 'زمرہ' ڈی ایف ['زمرہ'] = ڈی ایف ['عمر'] بنائیں۔ اس مثال کے طور پر ، ہمارے پاس کالم 'نام' کے ساتھ ایک ڈیٹا فریم ہے۔اور 'عمر'۔ہم ایک فنکشن کا حساب کتاب_کیٹری (عمر) کی وضاحت کرتے ہیں جو ان پٹ کے طور پر عمر لیتا ہے اور عمر کی بنیاد پر ایک زمرہ لوٹاتا ہے۔اس کے بعد ہم ہر صف پر فنکشن کو لاگو کرنے اور نتائج کی بنیاد پر ایک نیا کالم 'زمرہ' بنانے کے لئے 'عمر' کالم پر لاگو () طریقہ استعمال کرتے ہیں۔چارلی 35 جوانی ، فنکشن کا حساب کتاب_کیٹری (عمر) 'عمر' کالم میں ہر قدر پر لاگو ہوتا ہے ، جس کے نتیجے میں ایک نیا کالم 'زمرہ' ہوتا ہے جو ہر عمر کو حالت کی بنیاد پر 'جوان' یا 'بالغ' کے طور پر درجہ بندی کرتا ہے۔نتیجے میں ڈیٹا فریم (ڈی ایف) میں نیا کالم شامل ہے۔ آپ کسی بھی کسٹم فنکشن کو لاگو () طریقہ کار کا استعمال کرتے ہوئے ہر صف میں لاگو کرسکتے ہیں اور نتیجہ کی بنیاد پر ایک نیا کالم تشکیل دے سکتے ہیں۔فنکشن کو الگ الگ یا لیمبڈا فنکشن ان لائن کے طور پر اطلاق () طریقہ کار کے ساتھ بیان کیا جاسکتا ہے۔"
    },
    {
        "Question": "ای ڈی اے کے دوران آپ ڈیٹا کے عدم توازن کا پتہ لگانے اور کس طرح سنبھالتے ہیں؟",
        "Answer": "یقینا!ڈیٹا فریم میں کالم کی وزن کے اوسط کا حساب لگانے کے لئے یہاں ایک مثال کوڈ ہے جس کا استعمال کسی دوسرے کالم کا استعمال کرتے ہوئے پانڈوں کا استعمال کرتے ہوئے ہوتا ہے: پیڈون کوپی کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹا فریمڈف = pd.dataframe ({'اقدار': [10 ، 20 ، 30 ، 40]، 'وزن': [0.2 ، 0.3 ، 0.4 ، 0.1]})# 'وزن' کالم کے وزن کے اوسط 'کالم' کالم وائٹ_اوریج = (DF ['اقدار'] * DF ['وزن'])۔ رقم () ())۔ رقم ()/ df ['وزن']۔ رقم () پرنٹ (وزن والے_اوریج) اس مثال میں ، ہمارے پاس کالم 'اقدار' اور 'وزن' کے ساتھ ایک ڈیٹا فریم ہے۔ہم 'وزن' کالم کا استعمال کرتے ہوئے 'اقدار' کالم کی وزن اوسط کا حساب لگاتے ہیں۔ہم 'ویلیوز' کالم میں ہر قدر کو 'ویٹ' کالم میں اسی قدر کے ساتھ ضرب دیتے ہیں ، مصنوعات کا خلاصہ کرتے ہیں ، اور اسے 'ویٹ' کالم کے مجموعہ سے تقسیم کرتے ہیں۔ آؤٹ پٹ یہ ہوگا: کاپی کوڈ 23.0 ہیئر ،'ویلیوز' کالم کی وزنی اوسط کا حساب 'وزن' کالم کا استعمال کرتے ہوئے کیا جاتا ہے۔نتیجے میں قیمت 'اقدار' کالم کی اوسط کی نمائندگی کرتی ہے ، جہاں ہر قیمت کو 'وزن' کالم میں اسی قدر کے مطابق وزن کیا جاتا ہے۔ نوٹ کریں کہ وزن کے درست وزن کے حساب کتاب کے لئے وزن 1 تک 1 تک ہونا چاہئے۔اگر ضرورت ہو تو ، آپ وزن کے اوسط کا حساب لگانے سے پہلے 'وزن' کے کالم کو اس کی رقم کو تقسیم کرکے معمول بنا سکتے ہیں۔"
    },
    {
        "Question": "آپ بار پلاٹوں یا باکس پلاٹوں کا استعمال کرتے ہوئے عددی اور زمرہ متغیر کے مابین ارتباط کا تجزیہ اور تصور کیسے کرتے ہیں؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے متعلقہ کالم کے وسط کے ساتھ کسی ڈیٹا فریم میں گمشدہ اقدار کو تبدیل کرنے کے لئے ایک مثال کوڈ ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور PDimport numpy کے طور پر NP# مثال کے طور پر گمشدہ قدروں کے ساتھ ڈیٹا فریم ({'A': [1 ، 2 ، 2 ، [1 ، 2 ، 2 ، [1 ، 2 ،np.nan ، 4 ، 5] ، 'B': [6 ، NP.Nan ، 8 ، NP.Nan ، 10]})# گمشدہ اقدار کو کالم کے ذریعہ تبدیل کریں۔DF_FLED) اس مثال میں ، ہمارے پاس کالم 'A' اور 'B' کے ساتھ ایک ڈیٹا فریم ہے ، جہاں کچھ اقدار NP.nan کی نمائندگی کرتے ہیں۔ہم گمشدہ اقدار کو متعلقہ کالم کے وسط سے تبدیل کرنے کے لئے ڈیٹا فریم کے فلنا () طریقہ کا استعمال کرتے ہیں۔وسط () فنکشن ہر کالم کے وسیلہ کا حساب لگاتا ہے ، اور فلنا () گمشدہ اقدار کو اپنے متعلقہ کالم کے ذرائع سے تبدیل کرتا ہے۔ آؤٹ پٹ یہ ہوگا: CSSCOPY کوڈ A B0 1.0 6.01 2.0 8.02 3.0 8.03 4.0 8.04 5.0 10.0 HERE ، گمشدہ اقدارکالموں میں 'A' اور 'B' کو ہر متعلقہ کالم کے وسط کے ساتھ تبدیل کیا جاتا ہے۔نتیجے میں ڈیٹا فریم (DF_FLED) میں وہ اصل اقدار پر مشتمل ہیں جہاں وہ دستیاب تھے اور کالم کا مطلب ہے جہاں گمشدہ اقدار موجود ہیں۔ نوٹ کریں کہ فلنا () کے طریقہ کار میں یہ کنٹرول کرنے کے لئے مختلف پیرامیٹرز ہوتے ہیں ، جیسے کہ گمشدہ اقدار کو کس طرح بھرا جاتا ہے ، جیسے اس کی بجائے کسی خاص قدر کی وضاحت کرنامطلب ، ایف فل یا بی فل طریقوں کا استعمال کرتے ہوئے ، یا انٹرپولیشن طریقوں کا استعمال کرتے ہوئے آگے یا پیچھے بھرنا۔"
    },
    {
        "Question": "آپ ہنگامی جدولوں یا اسٹیکڈ بار پلاٹوں کا استعمال کرتے ہوئے دو دوٹوک متغیر کے مابین تعلقات کا تجزیہ اور تصور کیسے کرتے ہیں؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ڈیٹا فریم میں ڈیٹ ٹائم اقدار کے کالم سے سال ، مہینہ اور دن نکالنے کے لئے ایک مثال کوڈ ہے: پی ڈی کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹا ٹائم کالم ڈی ایف = پی ڈی ڈی اے ایف آر اے ایم ({'2022- [' 2022- '05-10 14:30:00 '،' 2022-06-15 09:45:00 '،' 2022-07-20 18:20:00 ']})#' ڈیٹ ٹائم 'کالم کو ڈیٹ ٹائم ٹائپڈ میں تبدیل کریں [' ڈیٹ ٹائم'] = pd.to_dattime (df [' dattime '])#' ڈیٹ ٹائم 'کالم ڈی ایف [' سال '] = df [' ڈیٹ ٹائم '] سے سال ، مہینہ اور دن کا عرق سال ، مہینہ ، اور دن['ڈیٹ ٹائم']ہم پہلے 'ڈیٹ ٹائم' کالم کو PD.TO_DATETIME () فنکشن کا استعمال کرتے ہوئے ڈیٹ ٹائم ٹائپ میں تبدیل کرتے ہیں۔اس کے بعد ، ہم ڈیٹ ٹائم پراپرٹیز تک رسائی حاصل کرنے اور سال ، مہینے اور دن کو الگ الگ کالموں 'سال' ، 'مہینے' ، اور 'ڈے' میں بالترتیب نکالنے کے لئے .DT رسار کا استعمال کرتے ہیں۔ آؤٹ پٹ ہو گا: YAMLCOPY کوڈ ڈیٹ ٹائم سال کا مہینہڈے 0 2022-05-10 14:30:00 2022 5 101 2022-06-15 09:45:00 2022 6 152 202-07-20 18:20:00 2022 7 20 20 یہاں ، سال ، مہینہ ، اور دن نکالا جاتا ہے'ڈیٹ ٹائم' کالم سے اور علیحدہ کالموں میں محفوظ۔نتیجے میں ڈیٹا فریم (ڈی ایف) میں 'ڈیٹ ٹائم' کالم اور نئے کالم 'سال' ، 'مہینہ' ، اور 'ڈے' میں نکالی گئی اقدار کے ساتھ اصل ڈیٹ ٹائم اقدار پر مشتمل ہے۔دوسرا ، ہفتے کا دن ، وغیرہ ، اسی .DT رسار اور مناسب ڈیٹ ٹائم پراپرٹیز جیسے گھنٹے ، منٹ ، دوسرا ، ڈے آف ویک ، وغیرہ کا استعمال کرتے ہوئے۔"
    },
    {
        "Question": "آپ گرمی کے نقشوں یا موزیک پلاٹوں کا استعمال کرتے ہوئے متعدد زمرہ متغیر کے مابین تعلقات کا تجزیہ اور تصور کیسے کرتے ہیں؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ایک ڈیٹا فریم میں متعدد کالموں کے مابین ارتباط میٹرکس کا حساب لگانے کے لئے ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'A': [1 ، 2 ، 3 ، 4 ، 5] ، 'بی۔': [6 ، 7 ، 8 ، 9 ، 10] ،' C ': [11 ، 12 ، 13 ، 14 ، 15]})# اس مثال کے طور پر ، ہم ارتباط میٹرکسکوریلیشن_میٹرکس = df.corr () پرنٹ (ارتباط_میٹرکس) کا حساب لگائیں۔کالم 'A' ، 'B' ، اور 'C' کے ساتھ ڈیٹا فریم رکھیں۔ہم ان کالموں کے مابین ارتباط میٹرکس کا حساب لگانے کے لئے ڈیٹا فریم کے CORR () طریقہ کار کا استعمال کرتے ہیں۔کور () کا طریقہ ان کی اقدار کی بنیاد پر کالموں کے مابین جوڑے کے ارتباط کی گنتی کرتا ہے۔ آؤٹ پٹ یہ ہوگا: سی ایس ایس سی او پی سی کوڈ اے بی سی اے 1.000000 1.0000 1.000000 1.0000 1.000000000000000000c 1.000000 1.000000 1.0000 here ، ارتباط میٹرکس کا حساب ہے ، جو ایک مربع میٹکس ہے ، جو ایک مربع میٹرکس ہے ، جو ایک مربع میٹرکس ہے ، جو ایک مربع میٹرکس ہے ، جو ایک مربع میٹرکس ہےکالموں کے ہر جوڑے کے درمیان باہمی ربط۔چونکہ ہر کالم میں اقدار اس مثال میں ایک جیسی ہیں ، لہذا کالموں کے ہر جوڑے کے مابین ارتباط 1 ہے۔ نوٹ کریں کہ ارتباط کی اقدار -1 سے 1 تک ہوتی ہیں ، جہاں 1 ایک مضبوط مثبت ارتباط کی نشاندہی کرتا ہے ، -1 ایک مضبوط منفی ارتباط کی نشاندہی کرتا ہے۔، اور 0 کالموں کے مابین کوئی ارتباط کی نشاندہی نہیں کرتا ہے۔ آپ ہیٹ میپس کا استعمال کرتے ہوئے ارتباط میٹرکس کو بھی تصور کرسکتے ہیں یا مزید تجزیہ کے لئے میٹرکس سے انفرادی ارتباط کی اقدار تک رسائی حاصل کرسکتے ہیں۔"
    },
    {
        "Question": "آپ وایلن پلاٹوں یا بھیڑ پلاٹوں کا استعمال کرتے ہوئے مختلف زمروں میں عددی متغیر کی تقسیم کا تجزیہ اور تصور کیسے کرتے ہیں؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے کسی دوسرے کالم کی حالت پر مبنی ڈیٹا فریم میں ایک نیا کالم بنانے کے لئے ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس ڈیٹا فریمڈف = PD.Dataframe ({'اقدار': [10 ، 20 ، 30 ، 40 ، 50]})# 'اقدار' کالم ڈی ایف ['زمرہ'] کی حالت پر مبنی ایک نیا کالم 'زمرہ' بنائیں۔) اس مثال میں ، ہمارے پاس 'اقدار' کے نام سے کالم والا ڈیٹا فریم ہے۔ہم 'اقدار' کالم کی حالت پر مبنی ایک نیا کالم 'زمرہ' تشکیل دیتے ہیں۔ہم 'اقدار' کالم میں اقدار پر اعادہ کرنے کے لئے فہرست کی تفہیم کا استعمال کرتے ہیں ، حالت کو چیک کریں (اس معاملے میں ، اگر قیمت 30 سے زیادہ ہے) ، اور اسی زمرے ('اعلی' یا 'کم') کو رائل پر تفویض کریں۔نیا 'زمرہ' کالم۔ آؤٹ پٹ یہ ہوگا: ریاضی کا کوڈ ویلیو کیٹیگری 0 10 LOW1 20 LOW2 30 LOW3 40 HIGHHERE ، ایک نیا کالم 'زمرہ' اس شرط کی بنیاد پر بنایا گیا ہے کہ اگر 'اقدار' کالم میں قدر زیادہ ہے تو30 سے زیادہ ، اسے 'ہائی' تفویض کیا گیا ہے۔بصورت دیگر ، یہ 'کم' تفویض کیا جاتا ہے۔ آپ اپنی مخصوص ضروریات کے مطابق حالت اور اس سے متعلقہ اقدار میں ترمیم کرسکتے ہیں۔"
    },
    {
        "Question": "آپ لائن پلاٹوں یا علاقے کے پلاٹوں کا استعمال کرتے ہوئے وقت کے ساتھ عددی متغیر کی تقسیم کا تجزیہ اور تصور کیسے کرتے ہیں؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے عمودی طور پر دو ڈیٹا فریموں کو ہم آہنگ کرنے کے لئے ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframesdf1 = pd.dataframe ({'A': [1 ، 2 ، 3] ، 'B': [4 ، 5 ، 6]}) df2 = pd.dataframe ({'a': [7 ، 8 ، 9] ، 'بی': [10 ، 11 ، 12]})# ڈیٹا فیموں کو عمودی طور پر ڈیف_کونکاٹینیٹڈ = پی ڈی ڈاٹ کوکیٹ ([ڈی ایف 1 ، ڈی ایف 2]) پرنٹ کریں(df_concatenated) اس مثال میں ، ہمارے پاس ایک ہی کالم کے نام 'A' اور 'B' کے ساتھ دو ڈیٹا فیمس DF1 اور DF2 ہیں۔عمودی طور پر ان کو جوڑنے کے ل we ، ہم PD.CONCAT () فنکشن کا استعمال کرتے ہیں اور ڈیٹا فریموں کو بطور فہرست پاس کرتے ہیں۔پہلے سے طے شدہ طور پر ، pd.concat () عمودی عمل (محور = 0) انجام دیتا ہے۔ آؤٹ پٹ یہ ہوگا: CSSCOPY کوڈ A B0 1 41 2 52 3 60 7 101 8 112 9 12 یہاں ، دو ڈیٹا فیمس DF1 اور DF2 عمودی طور پر شامل ہیں ،ایک نیا ڈیٹا فریم DF_CONCATENATET کے نتیجے میں۔نتیجے میں ہونے والے ڈیٹا فریم میں دونوں ڈیٹا فریموں کی تمام قطاریں شامل ہیں ، اصل قطار کے اشاریے محفوظ ہیں۔ نوٹ کریں کہ کالم کے نام اور کالم آرڈر کو کنیٹیٹیٹڈ ڈیٹا فریم میں برقرار رکھا گیا ہے۔اگر آپ نتیجے میں ہونے والے ڈیٹا فریم میں قطار انڈیکس کو دوبارہ ترتیب دینا چاہتے ہیں تو ، آپ RESET_INDEX () کا طریقہ استعمال کرسکتے ہیں ، جیسے DF_CONCATENATED.reset_index (ڈراپ = سچ)۔ اگر ڈیٹا فریموں کے کالم کے مختلف نام یا آرڈر ہیں تو ، آپ محور = 1 کی وضاحت بھی کرسکتے ہیں۔پیرامیٹر ان کو افقی طور پر (کالم وار) کو جوڑنے کے لئے۔"
    },
    {
        "Question": "آپ لائن پلاٹوں یا سکریٹر پلاٹوں کا استعمال کرتے ہوئے عددی متغیر اور ڈیٹ ٹائم متغیر کے مابین تعلقات کا تجزیہ اور تصور کیسے کرتے ہیں؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ڈیٹا فریم میں ڈور کے کالم کو چھوٹے کے کالم میں تبدیل کرنے کے لئے ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'متن': ['ہیلو' ، 'اوپن' ، 'اوپنائی' ، 'ازگر ']})#' ٹیکسٹ 'کالم کو کم سے کم [' متن '] = DF [' متن '] میں تبدیل کریں۔ str.lower () پرنٹ (DF) اس مثال میں ، ہمارے پاس' متن 'کے نام سے کالم والا ڈیٹا فریم ہے۔ڈور پر مشتملہم تمام ڈوروں کو کم کرنے کے لئے 'ٹیکسٹ' کالم کے .Str.lower () کا طریقہ استعمال کرتے ہیں۔ آؤٹ پٹ ہوگا: مارک ڈاون کوپی کوڈ ٹیکسٹ 0.lower () طریقہ.کالم میں موجود تمام ڈوروں کو لوئر کیس میں تبدیل کیا جاتا ہے ، جس کے نتیجے میں ایک نیا ڈیٹا فریم ہوتا ہے جہاں 'ٹیکسٹ' کالم میں لوئر کیسز ڈور ہوتے ہیں۔پانڈوں میں سٹرنگ آپریشن کے لئے دستیاب ہے۔یہ کالم میں ہر تار کو چھوٹے حصے میں تبدیل کرتا ہے۔ آپ اسی طرح کے سٹرنگ ایکسیسر طریقوں جیسے .str.upper () کو بڑے میں تبدیل کرنے کے لئے استعمال کرسکتے ہیں۔مختلف سٹرنگ آپریشنز کے لئے پانڈوں کے ذریعہ۔"
    },
    {
        "Question": "آپ سجا دیئے گئے پلاٹوں یا حرارت کے نقشوں کا استعمال کرتے ہوئے متعدد طبقاتی متغیرات پر کنڈیشنڈ کنڈیشنڈ کی ایک عددی متغیر کی تقسیم کا تجزیہ اور تصور کیسے کرتے ہیں؟",
        "Answer": "ڈیٹا فریم میں دو کالموں کے مابین یکلیڈین فاصلے کا حساب لگانے کے ل you ، آپ نیپی لائبریری استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور پی ڈیمپورٹ نیمپی بطور این پی#، 10]})# 'x' اور 'y' کالم سیوکلیڈین_ڈیسٹنس = np.linalg.norm (df ['x'] - df ['y']) پرنٹ (euclidean_distance) کے درمیان یوکلیڈین فاصلے کا حساب لگائیں ، اس مثال میں ، ہمارے پاس ایک ہے۔کالم 'X' اور 'y' کے ساتھ ڈیٹا فریم۔ہم 'X' اور 'Y' کالموں کے مابین یوکلیڈین فاصلے کا حساب لگانے کے لئے NP.LINLG.NORM () NUMPY سے فنکشن کا استعمال کرتے ہیں۔یوکلیڈین فاصلے کا حساب دو کالموں میں اسی عناصر کے مابین مربع اختلافات کی رقم کے مربع جڑ کے طور پر کیا جاتا ہے۔ آؤٹ پٹ یہ ہوگا: کاپی کوڈ 8.660254037844387here ، 'X' اور 'Y' کالموں کے درمیان یوکلیڈین فاصلہ کا استعمال کرتے ہوئے حساب کیا جاتا ہے۔NP.LINLG.Norm () فنکشن۔نتیجہ ایک ہی قیمت ہے جو دو کالموں کے مابین فاصلے کی نمائندگی کرتی ہے۔ نوٹ کریں کہ NP.LINLG.Norm () فنکشن عام طور پر صفوں یا ویکٹروں کے مابین یکلیڈین فاصلے کا حساب لگانے کے لئے استعمال کیا جاسکتا ہے ، نہ کہ صرف ڈیٹا فریم کالموں تک۔"
    },
    {
        "Question": "آپ ورڈ کلاؤڈز یا بار پلاٹوں کا استعمال کرتے ہوئے عددی متغیر اور متن متغیر کے مابین تعلقات کا تجزیہ اور تصور کیسے کرتے ہیں؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے سٹرنگ کالم کی لمبائی پر مبنی ڈیٹا فریم میں قطاروں کو فلٹر کرنے کے لئے ایک مثال کا کوڈ یہاں ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'متن': ['ہیلو' ، 'ورلڈ' ، 'اوپنائی'،' ازگر ']})#' ٹیکسٹ 'کالم فلٹرڈ_ ڈی ایف = ڈی ایف [ڈی ایف [ڈی ایف [' ٹیکسٹ '] کی لمبائی پر مبنی فلٹر قطاریں۔ str.len ()> 5] پرنٹ (فلٹرڈ_ ڈی ایف) اس مثال کے طور پر ، ہمارے پاس ایک ڈیٹا فریم ہے جس کے ساتھ ہمارے پاس ایک ڈیٹا فریم ہے۔'متن' نامی ایک کالم جس میں ڈور شامل ہیں۔ہم ہر تار کی لمبائی کا حساب لگانے کے لئے 'ٹیکسٹ' کالم کے .str.len () طریقہ استعمال کرتے ہیں۔اس کے بعد ، ہم قطاروں کو فلٹر کرنے کے لئے ایک شرط لگاتے ہیں جہاں 'ٹیکسٹ' کالم کی لمبائی 5 سے زیادہ ہے۔کالمصرف وہ صف جہاں 'متن' ویلیو 'اوپنائی' ہے (5 سے زیادہ لمبائی کے ساتھ) فلٹرڈ ڈیٹا فریم میں شامل ہے۔ آپ اپنی مخصوص ضروریات کے مطابق حالت میں ترمیم کرسکتے ہیں۔مثال کے طور پر ، آپ ڈی ایف ['متن'] استعمال کرسکتے ہیں۔کالم میں ہر تار کی لمبائی حاصل کرنے کے لئے۔اس کے بعد ، نتیجے میں بولین سیریز مماثل قطار کو منتخب کرنے کے لئے ڈیٹا فریم پر فلٹر کے طور پر استعمال ہوتی ہے۔"
    },
    {
        "Question": "آپ باکس پلاٹوں یا وایلن پلاٹوں کا استعمال کرتے ہوئے ایک متغیر متغیر پر کنڈیشنڈ کنڈیشنڈ کی تقسیم کا تجزیہ اور تصور کیسے کرتے ہیں؟",
        "Answer": "کسی ڈیٹا فریم میں کالم کی زیادہ سے زیادہ کا حساب لگانے کے ل you ، آپ پانڈوں میں .کومیکس () طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'اقدار': [10 ، 5 ، 5 ، 8 ، 12 ، 6]})# 'اقدار' کالم ڈی ایف ['cumulative_max'] کے مجموعی زیادہ سے زیادہ کا حساب لگائیں۔= df ['values']. cummax () پرنٹ (DF) اس مثال میں ، ہمارے پاس 'اقدار' کے نام سے کالم والا ڈیٹا فریم ہے۔ہم ہر صف میں مجموعی طور پر زیادہ سے زیادہ کا حساب لگانے کے لئے 'اقدار' کالم پر .کومیکس () طریقہ استعمال کرتے ہیں۔ آؤٹ پٹ ہو گا: ریاضی کا کوڈ کوڈ ویلیو کی ویلیوز مجموعی_میکس 0 101 5 102 8 103 12 124 6 12 یہاں ، 'کمولیٹو_میکس' کالم شامل کیا گیا ہے.کومیکس () طریقہ کار کا استعمال کرتے ہوئے ڈیٹا فریم میں۔نتیجے میں آنے والے کالم میں ہر صف میں 'اقدار' کالم کی مجموعی زیادہ سے زیادہ ہوتی ہے۔یہ ایک نئی سیریز لوٹتا ہے جس میں مجموعی زیادہ سے زیادہ اقدار شامل ہیں۔ آپ اسی طرح کے مجموعی آپریشنز کا اطلاق کرسکتے ہیں جیسے. cumumum () مجموعی رقم کے لئے یا .کومپرڈ () ایک ڈیٹا فریم میں کالم پر دوسرے مجموعی حساب کتاب کرنے کے لئے مجموعی مصنوع کے لئے۔"
    },
    {
        "Question": "آپ ہسٹوگرام اوورلیز یا کثافت پلاٹوں کا استعمال کرتے ہوئے مختلف گروپوں میں عددی متغیر کی تقسیم کا تجزیہ اور تصور کیسے کرتے ہیں؟",
        "Answer": "ڈیٹا فریم کو ایکسل فائل میں تبدیل کرنے کے ل you ، آپ پانڈوں میں TO_EXCEL () کا طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'نام': ['ایلس' ، 'باب' ، 'چارلی'] ، 'عمر': [25 ، 30 ، 35]})# ڈیٹا فریم کو ایکسل فائلڈف ڈاٹ ٹی او ایکسسل ('آؤٹ پٹ. ایکس ایل ایس ایکس' ، انڈیکس = غلط) پرنٹ (\"ڈیٹا فریم ایکسل فائل میں محفوظ کیا گیا ہے۔\") میں تبدیل کریں ، اس مثال میں ، ہمارے پاس ڈی ایف نامی ڈیٹا فریم ہے۔ہم ڈیٹا فریم پر TO_EXCEL () کا طریقہ استعمال کرتے ہیں تاکہ اسے ایکسل فائل کے طور پر محفوظ کیا جاسکے۔TO_EXCEL () کی پہلی دلیل فائل کا راستہ اور نام ہے جہاں آپ ایکسل فائل کو محفوظ کرنا چاہتے ہیں۔اس معاملے میں ، ہم اسے \"آؤٹ پٹ. ایکس ایل ایس ایکس\" کے طور پر محفوظ کرتے ہیں۔انڈیکس = جھوٹے پیرامیٹر کا استعمال انڈیکس کالم کو ایکسل فائل میں محفوظ ہونے سے خارج کرنے کے لئے کیا جاتا ہے۔ آؤٹ پٹ یہ ہوگا: سی ایس ایس کوپی کوڈیٹا اے ایف آر اے ایم ایکسل فائل کو محفوظ کیا جاتا ہے۔ کوڈ کو چلانے کے بعد ، \"آؤٹ پٹ. ایکس ایل ایس ایکس\" کے نام سے ایک فائل تشکیل دی جائے گی۔موجودہ ڈائرکٹری ، جس میں ایکسل فارمیٹ میں ڈیٹا فریم ڈیٹا موجود ہے۔ نوٹ کریں کہ TO_EXCEL () طریقہ استعمال کرنے کے ل you ، آپ کو اوپن پِکس ایل لائبریری انسٹال کی ضرورت ہے۔اگر آپ نے اسے انسٹال نہیں کیا ہے تو ، آپ اسے PIP انسٹال اوپن پِلکس ایل کا استعمال کرتے ہوئے انسٹال کرسکتے ہیں۔دستیاب اختیارات کے بارے میں مزید معلومات کے لئے دستاویزات: پانڈاس.ڈیٹافریم.ٹو_کسسل ()"
    },
    {
        "Question": "آپ ارتباط میٹرکس یا بکھرنے والے پلاٹ میٹرکس کا استعمال کرتے ہوئے متعدد عددی متغیر کے مابین تعلقات کا تجزیہ اور تصور کیسے کرتے ہیں؟",
        "Answer": "مشترکہ کالم کی بنیاد پر دو ڈیٹا فریموں کو ضم/شامل کرنے کے ل you ، آپ پانڈوں میں انضمام () فنکشن استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس ڈیٹا فیمس ڈی ایف 1 = pd.dataframe ({'ID': [1 ، 2 ، 3 ، 4] ، 'نام': ['ایلس' ، 'باب' ، 'چارلی' ،'ڈیو']}) df2 = pd.dataframe ({'ID': [3 ، 4 ، 5 ، 6] ، 'عمر': [25 ، 30 ، 35 ، 40]})# 'ID' پر مبنی ڈیٹا فریموں کو ضم کریںاس مثال میں کالم میجرڈ_ ڈی ایف = پی ڈی ایم (ڈی ایف 1 ، ڈی ایف 2 ، آن = 'آئی ڈی') پرنٹ (مرجڈ_ ڈی ایف) پرنٹ (مرجڈ_ ڈی ایف) ، ہمارے پاس دو ڈیٹا فیمز ، ڈی ایف 1 اور ڈی ایف 2 ہیں ، جو ایک عام کالم 'آئی ڈی' کا اشتراک کرتے ہیں۔ہم 'ID' کالم کی بنیاد پر ڈیٹا فریموں کو ضم کرنے کے لئے انضمام () فنکشن کا استعمال کرتے ہیں۔آن پیرامیٹر کو ضم کرنے کے لئے عام کالم کی نشاندہی کرنے کے لئے 'ID' پر سیٹ کیا گیا ہے۔ آؤٹ پٹ یہ ہوگا: کاپی کوڈ ID نام AGE0 3 چارلی 251 4 ڈیو 30 کے بعد ، دونوں ڈیٹا فریموں کو 'ID' کالم ، اور 'کی بنیاد پر ضم کیا گیا ہے۔نتیجے میں ڈیٹا فریم مرج_ڈیف میں دونوں ڈیٹا فیمز سے ملاپ کی قطاریں شامل ہیں۔مماثل 'ID' اقدار (3 اور 4) کے ساتھ صرف قطاروں کو ضم شدہ ڈیٹا فریم میں شامل کیا گیا ہے۔ آپ مختلف قسم کے شامل ہونے کی بھی وضاحت کرسکتے ہیں ، جیسے اندرونی شمولیت ، بائیں شمولیت ، دائیں شمولیت ، یا بیرونی شمولیت ، کس طرح پیرامیٹر کا استعمال کرتے ہوئے۔انضمام () فنکشن میں۔دستیاب اختیارات کے بارے میں مزید معلومات کے لئے پانڈاس دستاویزات کا حوالہ دیں: پانڈاس ۔مریج ()"
    },
    {
        "Question": "آپ لائن پلاٹوں یا باکس پلاٹوں کا استعمال کرتے ہوئے ڈیٹ ٹائم متغیر پر کنڈیشنڈ کنڈیشنڈ کی تقسیم کی تقسیم کا تجزیہ اور تصور کیسے کرتے ہیں؟",
        "Answer": "کسی حالت کی بنیاد پر ڈیٹا فریم سے قطاریں چھوڑنے کے ل you ، آپ پانڈوں میں بولین انڈیکسنگ استعمال کرسکتے ہیں۔یہاں ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'نام': ['ایلس' ، 'باب' ، 'چارلی'] ، 'عمر': [25 ، 30 ، 35]})# کنڈیشن ڈی ایف = ڈی ایف [ڈی ایف ['عمر']> 25] پرنٹ (ڈی ایف) پر مبنی قطاریں ڈراپ (ڈی ایف) پرنٹ (ڈی ایف) ، ہمارے پاس ڈی ایف نامی ڈیٹا فریم ہے۔ہم کسی حالت کی بنیاد پر ڈیٹا فریم سے قطاریں چھوڑنے کے لئے بولین انڈیکسنگ کا استعمال کرتے ہیں۔حالت DF ['Age']> 25 قطاریں منتخب کرتی ہے جہاں 'عمر' کالم 25 سے زیادہ ہے۔ آؤٹ پٹ ہوگا: مارک ڈاون کاپی کوڈ نام AGE1 باب 302 چارلی 35 ہائر ، ایسی قطاریں جو حالت کو پورا نہیں کرتی ہیں (DF ['عمر' ']> 25) ڈیٹا فریم سے خارج کردیئے گئے ہیں ، اور اس کے نتیجے میں ڈیٹا فریم کو ڈی ایف میں واپس اسٹور کیا جاتا ہے۔ بولین انڈیکسنگ کا استعمال کرتے ہوئے ، آپ مختلف شرائط کا اطلاق مختلف معیارات کی بنیاد پر قطاروں کو چھوڑنے کے لئے کرسکتے ہیں۔فلٹر شدہ نتیجہاگر آپ اصل میں ترمیم کیے بغیر ایک نیا ڈیٹا فریم بنانا چاہتے ہیں تو ، آپ نتیجہ کو ایک نئے متغیر کو تفویض کرسکتے ہیں: پائیٹون کوپی کوڈفلٹرڈ_ڈیف = ڈی ایف [ڈی ایف ['عمر']> 25] اس معاملے میں ، اصل ڈی ایف میں کوئی تبدیلی نہیں کی جاتی ہے ، اورفلٹرڈ قطاریں فلٹر_ڈف میں محفوظ ہیں۔"
    },
    {
        "Question": "آپ لائن پلاٹوں یا ایریا پلاٹوں کا استعمال کرتے ہوئے مختلف وقتی ادوار میں عددی متغیر کی تقسیم کا تجزیہ اور تصور کیسے کرتے ہیں؟",
        "Answer": "ڈیٹا فریم میں کالم سے انوکھی اقدار نکالنے کے ل you ، آپ پانڈوں میں انوکھا () طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'نام': ['ایلس' ، 'باب' ، 'چارلی' ، 'باب' ، 'ڈیو']# انوکھی اقداراس مثال میں 'نام' کالم یونیک_والیوز = ڈی ایف ['نام'] سے منفرد () پرنٹ (منفرد_اولیوس) سے ، ہمارے پاس 'نام' کے نام سے ایک کالم کے ساتھ ڈی ایف نامی ڈیٹا فریم ہے۔ہم منفرد اقدار کو نکالنے کے لئے 'نام' کالم پر انوکھا () طریقہ استعمال کرتے ہیں۔ آؤٹ پٹ یہ ہوگا: CSSCOPY کوڈ ['ایلس' 'باب' 'چارلی' 'ڈیو'] یہاں ، انوکھا () طریقہ کار ایک صف لوٹاتا ہے'نام' کالم سے انوکھی اقدار کی۔سرنی میں ہر ایک انوکھا نام ہوتا ہے جو ڈیٹا فریم کے 'نام' کالم میں ظاہر ہوتا ہے۔ آپ مطلوبہ کالم نام کے ساتھ 'نام' کی جگہ لے کر ڈیٹا فریم میں دوسرے کالموں سے انوکھی اقدار نکالنے کے ل simillion اسی طرح کی کاروائیاں انجام دے سکتے ہیں۔ نوٹ کریں کہ منفرد کا حکمنتیجے میں صف میں اقدار اس ترتیب پر مبنی ہیں جس میں وہ اصل کالم میں ظاہر ہوتے ہیں۔انوکھی اقدار کو ترتیب دینے کے ل you ، آپ نتیجے میں صف پر ترتیب_اولیوز () کا طریقہ استعمال کرسکتے ہیں: پائیٹون کوپی کوڈونیک_ ویلیوز_سورٹڈ = ڈی ایف ['نام']۔ منفرد ()"
    },
    {
        "Question": "آپ باکس پلاٹوں یا وایلن پلاٹوں کا استعمال کرتے ہوئے عددی متغیر اور ایک متغیر متغیر کے مابین تعلقات کا تجزیہ اور تصور کیسے کرتے ہیں؟",
        "Answer": "ایک سے زیادہ کالموں سے اقدار کو یکجا کرکے ڈیٹا فریم میں ایک نیا کالم بنانے کے ل you ، آپ سٹرنگ کنکیٹیشن یا کسی اور مطلوبہ تبدیلی کا استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PD## مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'پہلا نام': ['ایلس' ، 'باب' ، 'چارلی'] ، 'آخری نام': ['سمتھ' ، 'جانسن'،' براؤن ']})#' پہلا نام 'اور' آخری نام 'ڈی ایف [' مکمل نام '] = DF [' پہلا نام '] +' ' + DF [' آخری نام '] کے امتزاج کرکے ایک نیا کالم بنائیں۔اس مثال میں پرنٹ (ڈی ایف) ، ہمارے پاس کالموں کے 'پہلا نام' اور 'آخری نام' کے ساتھ DF نامی ڈیٹا فریم ہے۔ہم 'پہلا نام' اور 'آخری نام' کالموں سے '+' آپریٹر اور اس کے درمیان جگہ کا استعمال کرتے ہوئے اقدار کو ہم آہنگ کرکے 'مکمل نام' کے نام سے ایک نیا کالم بناتے ہیں۔ آؤٹ پٹ ہوگا: ریاضی کا کوڈ پہلا نام آخری نام مکمل نام 0 ایلساسمتھ ایلس اسمتھ 1 باب جانسن باب جانسن 2 چارلی براؤن چارلی براؤنیہیر ، نیا کالم 'مکمل نام' ڈیٹا فریم میں ہر قطار کے لئے 'پہلے نام' اور 'آخری نام' کالموں کی اقدار کو یکجا کرکے تیار کیا گیا ہے۔ آپ کسی بھی مطلوبہ تبدیلی کو انجام دے سکتے ہیں۔ایک سے زیادہ کالموں سے اقدار کی بنیاد پر نیا کالم بنانے کے لئے کونکیٹیشن لاجک۔"
    },
    {
        "Question": "\"آپ کو کسی مصنوع کے لئے کسٹمر کے جائزے پر مشتمل ڈیٹاسیٹ دیا گیا ہے۔ آپ جائزوں کو مثبت ، منفی یا غیر جانبدار قرار دینے کے لئے جذبات کا تجزیہ کیسے کریں گے؟\"",
        "Answer": "ڈیٹا فریم میں دو ڈیٹ ٹائم کالموں کے مابین فرق کا حساب لگانے کے ل you ، آپ ایک کالم کو دوسرے سے گھٹا سکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹا فریمڈف = pd.dataframe (start 'اسٹارٹ ٹائم': ['2022-01-01 10:00:00' ، '2022-01-01 12:30:00'] ، 'اختتامی وقت': ['2022-01-01 11:30:00' ، '2022-01-01 14:15:00']})# کالموں کو ڈیٹ ٹیمڈف میں تبدیل کریں ['اسٹارٹ ٹائم'] = PD۔to_datetime (df ['start وقت']) df ['end وقت'] = pd.to_datetime (df ['اختتامی وقت'])# 'اختتامی وقت' اور 'اسٹارٹ ٹائم' ڈی ایف ['مدت' 'کے درمیان فرق کا حساب لگائیں]= DF ['اختتامی وقت'] - DF ['اسٹارٹ ٹائم'] پرنٹ (DF) اس مثال میں ، ہمارے پاس DF نامی ایک ڈیٹا فریم ہے جس میں کالم 'اسٹارٹ ٹائم' اور 'اختتامی وقت' ہے جس میں ڈیٹا ٹائم ویلیوز پر مشتمل ہے۔ہم سب سے پہلے ان کالموں کو PD.TO_DATETIME () کا استعمال کرتے ہوئے ڈیٹ ٹائم فارمیٹ میں تبدیل کرتے ہیں۔ پھر ، ہم 'اختتامی وقت' کالم کو 'اختتامی وقت' کالم سے گھٹا کر 'اختتامی وقت' اور 'اسٹارٹ ٹائم' کے درمیان فرق کا حساب لگاتے ہیں۔نتیجے میں ٹائم ڈیلٹا کی اقدار کو 'دورانیہ' کے نام سے ایک نئے کالم میں تفویض کیا گیا ہے۔ آؤٹ پٹ یہ ہوگا: SQLCOPY کوڈ اسٹارٹ ٹائم اینڈ ٹائم ٹائم کی مدت 2022-01-01 10:00:00 2022-01-01 11:30:00 0 دن 01 01.'ڈیٹا فریم میں ہر صف کے لئے۔ نوٹ کریں کہ نتیجے میں کالم ٹائپ ٹائم ڈیلٹا کا ہے ، جو دو تاریخ کے وقت کی اقدار کے درمیان مدت یا فرق کی نمائندگی کرتا ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں اسٹاک مارکیٹ کا ڈیٹا ہوتا ہے۔اسٹاک قیمت کی نقل و حرکت پر آپ خبروں کے جذبات کے اثرات کا تجزیہ کیسے کریں گے؟",
        "Answer": "کم سے کم میکس اسکیلنگ کا استعمال کرتے ہوئے ڈیٹا فریم میں عددی کالم کو معمول پر لانے کے ل you ، آپ اسکلرن.پروسیسنگ ماڈیول سے من میکس اسکیلر کلاس استعمال کرسکتے ہیں۔یہاں ایک مثال کوڈ ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور PDFROM SKLEREN.Preprocessing درآمد Minmaxscaler# مثال Dataframedf = pd.dataframe ({'اقدار': [10 ، 20 ، 30 ، 40 ، 50]})# MinMaxScaler آبجیکٹسکلر = MinMaxcaler = MinMaxscaler آبجیکٹسکلر = MinMaxsscaler بنائیںکم سے کم میکس اسکیلنگ ڈی ایف ['عام اقدار'] = اسکیلر.فٹ_ٹرانسفارم (ڈی ایف [['اقدار']]) پرنٹ (ڈی ایف) کا استعمال کرتے ہوئے 'اقدار' کالم کو عام کریں (ڈی ایف) پرنٹ (ڈی ایف) اس مثال میں ، ہمارے پاس ایک ڈیٹا فریم ہے جس کا نام ڈی ایف ہے جس کا نام ایک عددی کالم ہے 'اقدار '۔ہم ایک من میکس اسکیلر آبجیکٹ تیار کرتے ہیں اور پھر اسے کم سے کم میکس اسکیلنگ کا اطلاق کرکے 'اقدار' کالم کو معمول پر لانے کے لئے استعمال کرتے ہیں۔ اسکیلر کا FIT_TRANSFORM () طریقہ استعمال کیا جاتا ہے تاکہ 'اقدار' کالم کی کم سے کم اور زیادہ سے زیادہ اقدار کی گنتی کی جاسکے اور اقدار کی پیمائش کی جاسکے۔حد تک [0 ، 1]۔عام اقدار کو ڈیٹا فریم میں 'نارملائزڈ ویلیوز' نامی ایک نئے کالم میں تفویض کیا جاتا ہے۔ آؤٹ پٹ یہ ہوگا: ریاضی کا کوڈ کوڈ اقدار کو معمول پر مبنی اقدار 0 0.001 20 0.252 30 0.503 40 0.754 50 1.00 HERE ، 'عام اقدار' کالم میں عام اقدار پر مشتمل ہے۔من میکس اسکیلنگ کا استعمال کرتے ہوئے 'اقدار' کالم کا۔اقدار کو متناسب طور پر 0 اور 1 کے درمیان اصل کالم کی کم سے کم اور زیادہ سے زیادہ اقدار کی بنیاد پر اسکیل کیا جاتا ہے۔ نوٹ کریں کہ من میکس اسکیلر 2D سرنی نما آبجیکٹ پر کام کرتا ہے ، لہذا ہم صرف DF کی بجائے DF [['اقدار']] سے گزرتے ہیں۔'اقدار'] اس بات کو یقینی بنانے کے لئے کہ اس کو 2D سرنی سمجھا جائے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں رئیل اسٹیٹ پراپرٹیز کے بارے میں معلومات موجود ہیں۔آپ جغرافیائی تصور کی تکنیکوں کا استعمال کرتے ہوئے جائیداد کی قیمتوں کی مقامی تقسیم کا تجزیہ کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم میں کالم کی کفایت شعاری اوسط (EMA) کا حساب لگانے کے لئے ، آپ پانڈوں میں EWM () کا طریقہ استعمال کرسکتے ہیں۔EWM () طریقہ کار کالم میں اقدار پر کفایت شعاری وزن کا اطلاق کرتا ہے ، جس سے حالیہ اقدار کو زیادہ وزن ملتا ہے۔یہاں ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'اقدار': [10 ، 20 ، 30 ، 40 ، 50]})# اسپین کے ساتھ 'اقدار' کالم کی اوسطا اوسط اوسط کا حساب لگائیں =2df ['ema'] = df ['values']. EWM (SPAN = 2 ، ایڈجسٹ = غلط)ہم 'اقدار' کالم پر EWM () کے طریقہ کار کا استعمال کرتے ہیں جس میں 2 پر مقرر کردہ اسپین پیرامیٹر 2 پر سیٹ ہوتا ہے۔تعصب کے لئے ایڈجسٹ نہیں کیا جاتا ہے۔اگر آپ اسے سچ پر مرتب کرتے ہیں تو ، EMA میں پہلی قدر ایک سادہ حرکت پذیر اوسط ہوگی۔ حساب کتاب کی جانے والی اوسط قدر اوسط اقدار کو ڈیٹا فریم میں 'EMA' نامی ایک نئے کالم میں تفویض کیا گیا ہے۔10.0000001 20 16.6666672 30 25.0000003 40 33.3333334 50 42.500000"
    },
    {
        "Question": "آپ کو ای کامرس کمپنی کے لئے کسٹمر ٹرانزیکشن ڈیٹا پر مشتمل ڈیٹاسیٹ دیا جاتا ہے۔کسٹمر آرڈرز میں کثرت سے شریک ہونے والی اشیاء کی نشاندہی کرنے کے لئے آپ مارکیٹ کی ٹوکری کا تجزیہ کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم میں کالم سے اعلی اقدار کے ساتھ اوپر کی ن قطاریں نکالنے کے ل you ، آپ پانڈوں میں nlargest () طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'اقدار': [10 ، 20 ، 30 ، 40 ، 50]})# 'اقدار' میں اعلی ترین اقدار کے ساتھ اوپر 3 قطاریں نکالیں۔کالم = 3 ٹاپ_ن_روز = df.nlarget (n ، 'اقدار') پرنٹ (ٹاپ_ن_رو) اس مثال میں ، ہمارے پاس 'اقدار' کے نام سے کالم کے ساتھ ڈی ایف نامی ایک ڈیٹا فریم ہے۔ہم 'اقدار' کالم میں اعلی ترین اقدار کے ساتھ اوپر کی N قطاریں نکالنے کے لئے ڈیٹا فریم پر NLARGET () کا طریقہ استعمال کرتے ہیں۔ن پیرامیٹر نکالنے کے لئے قطاروں کی تعداد کی وضاحت کرتا ہے۔ آؤٹ پٹ یہ ہوگا: ریاضی کا کوڈ ویلیو 4 503 402 30 اگر ، ٹاپ_ن_رو ڈیٹا فریم میں 'اقدار' کالم میں اعلی ترین اقدار کے ساتھ ٹاپ 3 قطاریں شامل ہیں۔ آپ N کی قدر کو ایڈجسٹ کرسکتے ہیں۔آپ کی ضرورت کی بنیاد پر مختلف تعداد میں قطاروں کو نکالنے کے لئے متغیر۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں مریضوں کے میڈیکل ریکارڈ ہوتے ہیں۔کسی خاص بیماری کے ممکنہ خطرے کے عوامل کو ننگا کرنے کے ل the آپ اعداد و شمار میں نمونوں اور رجحانات کی نشاندہی کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم میں ایک سے زیادہ بائنری کالموں میں دوٹوک اقدار کے کالم کو تبدیل کرنے کے ل you ، آپ پانڈوں سے get_dmumies () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن اصل کالم میں ہر انوکھی قدر کے لئے نئے بائنری کالم تخلیق کرتا ہے۔یہاں ایک مثال کا کوڈ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹا فریمڈف = pd.dataframe ({'زمرہ': ['A' ، 'B' ، 'A' ، 'C' ، 'B']})# کنورٹ 'زمرہ'ایک سے زیادہ بائنری کالم بائنری_کولمز میں کالم = PD.GET_DUMMIES (DF [' زمرہ '])# بائنری کالموں کو اصل ڈیٹا فریمڈف = PD.CONCAT ([DF ، بائنری_کولمز] ، محور = 1) پرنٹ (DF) کے ساتھ جوڑیں ، اس مثال میں ،ہمارے پاس ڈی ایف نامی ایک ڈیٹا فریم ہے جس کا نام 'زمرہ' ہے جس میں زمرہ دار اقدار ہیں۔ہم 'زمرہ' کالم پر گیٹ_ڈمیز () فنکشن کو متعدد بائنری کالموں میں تبدیل کرنے کے لئے استعمال کرتے ہیں۔ گیٹ_ڈمیز () فنکشن بائنری کالموں کے ساتھ ایک نیا ڈیٹا فریم تشکیل دیتا ہے ، جہاں اصل 'زمرہ' کالم میں ہر انوکھی قیمت کو الگ الگ نمائندگی کیا جاتا ہے۔بائنری کالم۔کالم کے نام خود بخود منفرد اقدار کی بنیاد پر تیار ہوجاتے ہیں۔ ہم پھر کالموں (محور = 1) کے ساتھ اصل ڈیٹا فریم ڈی ایف کے ساتھ بائنری کالموں کو جوڑنے کے لئے pd.concat () فنکشن کا استعمال کرتے ہیں۔ آؤٹ پٹ ہوں گے: CSScopy کوڈ زمرہ A BC0 A 1 0 01 B 0 1 02 A 1 0 03 C 0 0 14 B 0 1 0 یہاں ، نئے بائنری کالم 'A' ، 'B' ، اور 'C' کو ڈیٹا فریم میں شامل کیا گیا ہے ، جو اصل 'زمرہ' کی نمائندگی کرتے ہیں۔کالمہر صف کی اس کیٹیگری پر مبنی بائنری کالم میں 1 کی قدر ہوتی ہے جس کا تعلق اس سے ہوتا ہے۔ نوٹ کریں کہ اصل 'زمرہ' کالم اب بھی ڈیٹا فریم میں موجود ہے ، اور اس کے ساتھ ہی نئے بائنری کالم شامل ہیں۔اگر آپ اصل کالم کو ہٹانا چاہتے ہیں تو ، آپ بائنری کالم بنانے کے بعد اسے چھوڑنے کے لئے ڈراپ () فنکشن کا استعمال کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا گیا ہے جس میں سوشل میڈیا پوسٹس ہیں۔صارفین میں سب سے زیادہ زیر بحث موضوعات کی نشاندہی کرنے کے لئے آپ کس طرح ٹاپک ماڈلنگ انجام دیں گے؟",
        "Answer": "ڈیٹا فریم میں فارورڈ فلنگ (یا فارورڈ فلنگ) کے ذریعہ گمشدہ اقدار کو سنبھالنے کے ل you ، آپ 'ایف فل' پر سیٹ طریقہ پیرامیٹر کے ساتھ فلنا () طریقہ استعمال کرسکتے ہیں۔یہ طریقہ پچھلی صف سے حالیہ غیر نول قدر کے ساتھ گمشدہ اقدار کو پُر کرتا ہے۔یہاں ایک مثال کا کوڈ ہے: پائیتھون کوپی کوڈیمپورٹ پانڈاس بطور پیڈیمپورٹ نیمپی کے طور پر این پی# مثال کے طور پر NP# مثال کے طور پر گمشدہ اقدار کے ساتھ ڈیٹا فریم = pd.dataframe ({'اقدار': [1 ، np.nan ، 3 ، np.nan ، 5]})# فارورڈ لاپتہ لاپتہویلیوز ڈی ایف ['اقدار'] = ڈی ایف ['اقدار']۔ فلنا (طریقہ = 'فیل') پرنٹ (ڈی ایف) پرنٹ (ڈی ایف) اس مثال کے طور پر ، ہمارے پاس ڈی ایف نامی ایک ڈیٹا فریم ہے جس میں 'اقدار' کے نام سے ایک کالم ہے جس میں نان کی نمائندگی کی گئی ہے۔ہم 'اقدار' کالم پر فلنا () طریقہ استعمال کرتے ہیں اور طریقہ کار پیرامیٹر کو 'FFLE' پر سیٹ کرتے ہیں ، جس سے فارورڈ فلنگ کی نشاندہی ہوتی ہے۔ فلنا () طریقہ 'اقدار' کالم میں گمشدہ اقدار کو حالیہ غیر نول قدر کے ساتھ بدل دیتا ہے۔پچھلی قطار سے۔ آؤٹ پٹ یہ ہوگا: ریاضی کا کوڈ ویلیو 0 1.01 1.02 3.03 3.04 5.0.0 ہر ایک کی گمشدہ اقدار کو پچھلی صف سے حالیہ غیر نول قدر سے بھرا ہوا ہے۔قطار 1 اور 3 میں NAN اقدار کو پچھلی قطار سے قیمت 1 کے ساتھ تبدیل کیا گیا ہے ، اور قطار 4 میں NAN قیمت کو پچھلی قطار سے قیمت 3 کے ساتھ تبدیل کیا گیا ہے۔ نوٹ کریں کہ فارورڈ فلنگ یہ فرض کرتا ہے کہ گمشدہ اقدار کو پُر کرنا چاہئےسب سے حالیہ غیر نول قدر۔یہ طریقہ موزوں ہے جب گمشدہ اقدار کو کالم میں سابقہ اقدار کے ذریعہ معقول حد تک قریب کیا جاسکتا ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں آن لائن خوردہ ڈیٹا ہوتا ہے۔صارفین کے مختلف گروہوں کی خریداری کے طرز عمل کی بنیاد پر آپ کی شناخت کے ل you آپ کسٹمر سیگمنٹیشن کا تجزیہ کیسے کریں گے؟",
        "Answer": "باقاعدہ اظہار (REGEX) میچ کے نتیجے پر مبنی ڈیٹا فریم میں ایک نیا کالم بنانے کے ل you ، آپ پانڈوں میں str.extract () کا طریقہ استعمال کرسکتے ہیں۔یہ طریقہ اسٹرنگ کالم میں ریجیکس پیٹرن کا پہلا میچ نکالتا ہے اور نکالا ہوا اقدار کے ساتھ ایک نیا کالم بناتا ہے۔یہاں ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe (text 'متن': ['ایپل ایک پھل ہے' ، 'کیلا ایک پھل ہے' ، 'سنتری نہیں ہے']})# ایکسٹریکٹریجیکس کا استعمال کرتے ہوئے پھلوں کے نام اور ایک نیا کالم ڈی ایف بنائیں ['پھل'] = ڈی ایف ['متن']اس مثال کے طور پر ، ہمارے پاس ڈی ایف نامی ایک ڈیٹا فریم ہے جس میں 'ٹیکسٹ' نامی کالم ہے جس میں ٹیکسٹ ڈور شامل ہیں۔ہم 'ٹیکسٹ' کالم پر str.extract () کا طریقہ استعمال کرتے ہیں اور ریجیکس پیٹرن r '(\\ b [a-z-z]+\\ b) فراہم کرتے ہیں' قوسین کے اندر۔ ریجیکس پیٹرن (\\ b [a-za-z]+\\ b) ایک یا زیادہ حرفی حرفوں کو اپنی گرفت میں لے رہا ہے جس کے چاروں طرف لفظ کی حدود (\\ B) سے گھرا ہوا ہے ، اس کے بعد لفظ \"IS\" ہے۔قوسین نمونہ کے حصے کو نکالنے کے لئے اشارہ کرتے ہیں۔آؤٹ پٹ یہ ہوگا: vbnetcopy کوڈ ٹیکسٹ فروٹ ایپل ایک پھل ہے ایپل 1 کیلے ایک پھل کیلے ہے 2 سنتری نانیہیر نہیں ہے ، 'پھل' کالم ریجیکس میچ کے نتیجے پر مبنی بنایا گیا ہے۔پھلوں کے نام 'ایپل' اور 'کیلے' کو 'متن' کالم میں اسی طرح کے تار سے نکالا جاتا ہے۔تیسری قطار پیٹرن سے مماثل نہیں ہے ، لہذا اس کی 'پھل' کالم میں نان کی قیمت ہے۔ نوٹ کریں کہ str.extract () طریقہ صرف پہلا میچ واپس کرتا ہے۔اگر آپ کے متعدد میچ ہیں اور ان سب کو الگ الگ کالموں میں نکالنا چاہتے ہیں تو ، آپ اس کے بجائے str.extractall () کا طریقہ استعمال کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں IOT آلات سے سینسر ڈیٹا ہوتا ہے۔آپ ممکنہ خرابی یا آؤٹ لیئرز کی نشاندہی کرنے کے لئے اعداد و شمار میں عدم تضادات کا تجزیہ اور ان کا پتہ کیسے لگائیں گے؟",
        "Answer": "کسی ڈیٹا فریم میں کالم میں کسی قدر کے واقعات کی مجموعی گنتی کا حساب لگانے کے ل you ، آپ مشروط بیان کے ساتھ ساتھ پانڈوں میں کمم () طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'زمرہ': ['A' ، 'A' ، 'B' ، 'A' ، 'C' ، 'B']})# 'A' میں 'A' زمرہ 'کالم ڈی ایف [' مجموعی گنتی '] = (DF [' زمرہ '] ==' A ') کے واقعات کی مجموعی گنتی کا حساب لگائیں۔ اس مثال میں ، ہمارے پاس پرنٹ () پرنٹ (DF)۔ڈیٹا فریم نے ڈی ایف کا نام ایک کالم کے ساتھ رکھا ہے جس کا نام 'زمرہ' ہے جس میں زمرہ دار اقدار ہیں۔ہم 'زمرہ' کالم میں 'A' کی قیمت 'A' کے واقعات کی مجموعی گنتی کا حساب لگانا چاہتے ہیں۔ اظہار (DF ['زمرہ'] == 'A') ایک بولین ماسک بناتا ہے جو قطاروں کے لئے سچ ہے جہاں قدر میں ہے'زمرہ' کالم 'A' اور غلط ہے۔اس سے ماسک میں حقیقی اقدار کی مجموعی رقم کا حساب کتاب ہوتا ہے ، جس سے ہمیں 'زمرہ' کالم میں 'A' کے واقعات کی مجموعی گنتی کو مؤثر طریقے سے شمار کیا جاتا ہے۔ ہم 'مجموعی گنتی' کے نام سے ایک نئے کالم کو نتیجہ تفویض کرتے ہیں۔: CSSCOPY کوڈ زمرہ مجموعی COUNT0 A 11 A 22 B 23 A 34 C 35 B 3 ، 'مجموعی گنتی' کالم تیار کیا گیا ہے ، جس میں 'زمرہ' کالم میں 'A' کی وقوع پذیر گنتی کو ظاہر کیا گیا ہے۔'A' کے ساتھ ہر قطار میں گنتی میں اضافہ ہوتا ہے۔ نوٹ کریں کہ cumsum () طریقہ 1 اور غلط کے طور پر درست سلوک کرتا ہے ، جس سے ہمیں مجموعی رقم لے کر ہونے والے واقعات کو مؤثر طریقے سے گننے کی اجازت ملتی ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا گیا ہے جس میں ویب کلک اسٹریم ڈیٹا ہے۔سب سے مشہور ویب صفحات اور صارف نیویگیشن پیٹرن کی شناخت کے ل you آپ صارف کے طرز عمل کا تجزیہ کیسے کریں گے؟",
        "Answer": "ڈور کے کالم کو ڈیٹا فریم میں ایک واضح ڈیٹا کی قسم میں تبدیل کرنے کے ل you ، آپ پانڈوں میں ایسٹائپ () کا طریقہ استعمال کرسکتے ہیں اور ڈیٹا کی قسم کو 'زمرہ' کے بطور بیان کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹا فریمڈف = pd.dataframe ({'زمرہ': ['A' ، 'B' ، 'A' ، 'C' ، 'B']})# کنورٹ 'زمرہ'کالم ٹو بلیڈوریٹک ڈیٹا ٹائپڈف [' زمرہ '] = ڈی ایف [' زمرہ ']۔ ایسٹائپ (' زمرہ ') پرنٹ (ڈی ایف [' زمرہ ']'زمرہ' جس میں ڈور شامل ہیں۔ہم 'زمرہ' کالم کو ایک واضح اعداد و شمار کی قسم میں تبدیل کرنا چاہتے ہیں۔ ہم 'زمرہ' کالم پر ASTYPE () طریقہ استعمال کریں اور ڈیٹا کی قسم 'زمرہ' کو دلیل کے طور پر فراہم کریں۔یہ کالم کو ایک واضح اعداد و شمار کی قسم میں تبدیل کرتا ہے۔ آؤٹ پٹ یہ ہوگا: کاپی کوڈ کیٹیگری ہیر ، 'زمرہ' کالم کو ایک واضح اعداد و شمار کی قسم میں تبدیل کیا جاتا ہے ، اور ڈی ایف ['زمرہ']۔ ڈی ٹائپ ریٹرنس 'زمرہ' اس بات کی نشاندہی کرتا ہے کہ کالم کا ہے کہ کالم ہےواضح اعداد و شمار کی قسم۔ پانڈاس میں زمرہ دار ڈیٹا کی قسم میموری اور کارکردگی کے فوائد فراہم کرتی ہے ، خاص طور پر جب کالم میں محدود تعداد میں انوکھی اقدار ہوتی ہیں اور وہ بار بار ہوتا ہے۔یہ کچھ آپریشنز میں موثر اسٹوریج اور تیز تر کمپیوٹیشن کی بھی اجازت دیتا ہے۔ نوٹ کریں کہ کالم کو ڈیٹا کی قسم میں تبدیل کرنا مفید ہے جب کالم الگ الگ اقدار کے ایک محدود سیٹ کی نمائندگی کرتا ہے۔اگر کالم میں بڑی تعداد میں انوکھی اقدار موجود ہیں یا اگر اقدار میں اعلی کارڈنلٹی ہے تو ، اسے زمرہ دار ڈیٹا کی قسم میں تبدیل کرنے کے لئے موزوں نہیں ہوگا۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں موسم کا ڈیٹا ہوتا ہے۔موسمی رجحانات اور بے ضابطگیوں کی نشاندہی کرنے کے لئے آپ موسم کے نمونوں کا تجزیہ اور تصور کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم میں دو کالموں کے مابین کوسائن مماثلت کا حساب لگانے کے ل you ، آپ اسکائیلن ڈاٹ میٹرکس.پیئر ویز ماڈیول سے اسکائیکیٹ لرن میں کوسائن_سمیریٹی فنکشن استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور Pdfrom اسکلیئرن۔ میٹرکس۔، 8]})# 'کالم 1' اور 'کالم 2' اسیمیلیٹی = cosine_simarity (df ['کالم 1'] کے درمیان کوسائن مماثلت کا حساب لگائیں۔ ویلیوز۔ ریشپ (1 ، -1) ، ڈی ایف ['کالم 2']۔ ویلیوز۔ ریشپ (1، -1)) [0] [0] پرنٹ (مماثلت) اس مثال میں ، ہمارے پاس ڈی ایف نامی ڈیٹا فریم ہے جس میں دو کالم ، 'کالم 1' اور 'کالم 2' ہے ، جس میں عددی اقدار ہیں۔ہم ان دو کالموں کے مابین کوسائن مماثلت کا حساب لگانا چاہتے ہیں۔ کوسائن_سیمیلیٹی فنکشن ان پٹ کے طور پر دو صفوں کو لیتا ہے اور ان کے مابین کوسائن مماثلت کو لوٹاتا ہے۔ہم 'کالم 1' اور 'کالم 2' کی اقدار کو فنکشن میں الگ الگ صفوں کے طور پر منتقل کرتے ہیں۔ نوٹ کریں کہ ان پٹ صفوں کو ایک ہی شکل کی ضرورت ہے ، لہذا ہم صفوں کو شکل میں تبدیل کرنے کے لئے دوبارہ شکل () کا طریقہ استعمال کرتے ہیں (1 ، - -1) ، جو کالموں کی متحرک تعداد کے ساتھ ایک ہی صف کی نمائندگی کرتا ہے۔ آؤٹ پٹ یہ ہوگا: کاپی کوڈ 0.9999999999999999999998 ہر وقت ، 'کالم 1' اور 'کالم 2' کے مابین مماثلت کا استعمال کوسائن مماثلت کا استعمال کرتے ہوئے کیا جاتا ہے۔اس کا نتیجہ -1 اور 1 کے درمیان ایک قدر ہے ، جہاں 1 کامل مماثلت کی نشاندہی کرتا ہے۔ اس بات کا یقین کریں کہ Cosine_simarity فنکشن کو استعمال کرنے کے لئے اسکیکیٹ لرن انسٹال (PIP انسٹال اسکیکیٹ لرن) ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر منور ڈیٹا ہوتا ہے۔آپ مشین لرننگ کی تکنیکوں کا استعمال کرتے ہوئے کسٹمر کے منتر کا تجزیہ اور پیش گوئی کریں گے؟",
        "Answer": "ڈیٹا فریم میں پسماندہ فلنگ (یا بیک فلنگ) کے ذریعہ گمشدہ اقدار کو سنبھالنے کے ل you ، آپ 'BFILL' پر سیٹ طریقہ پیرامیٹر کے ساتھ فلنا () طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹا فریمڈف = PD.Dataframe ({'A': [1 ، 2 ، NP.NAN ، 4 ، NP.NAN ، 6]})# بیک فل گمشٹ ویلیو ڈی ایف_ فلنا۔ڈیٹا فریم اور طریقہ کار پیرامیٹر کو 'بیفل' پر سیٹ کریں ، جس سے پسماندہ بھرنے کی نشاندہی ہوتی ہے۔یہ طریقہ کالم میں اگلی دستیاب قیمت کے ساتھ گمشدہ اقدار کی جگہ لے لیتا ہے۔ آؤٹ پٹ یہ ہوگا: CSSCOPY کوڈ A0 1.01 2.02 4.03 4.04 6.05 6.0 6.0 6.0 6.0 6.0 کالم 'A' میں گمشدہ اقدار اگلی دستیاب قیمت کے ساتھ بیک فل ہیں۔قطاروں 2 اور 4 میں NP.NAN اقدار کو بالترتیب 4.0 اور 6.0 کی اقدار کے ساتھ تبدیل کیا گیا ہے۔ نوٹ کریں کہ پسماندہ بھرنے کا طریقہ ('BFILL') بعد کی قطار سے اگلی دستیاب قیمت کے ساتھ گمشدہ اقدار کو بھرتا ہے۔اگر گمشدہ قیمت کسی کالم کی آخری قطار میں ہے تو ، یہ NP.nan کی حیثیت سے باقی ہے کیونکہ اس سے بھرنے کے لئے کوئی قطار موجود نہیں ہے۔ اس بات کی یقین دہانی کرائی گئی ہے کہ آپ کی نمائندگی کرنے کے لئے NP.NAN استعمال کرنے کے لئے NP.NAN استعمال کرنے کے لئے NAPY لائبریری درآمد (NP کے طور پر NP) ہے۔گمشدہ اقدار۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں سوشل نیٹ ورک کا ڈیٹا ہوتا ہے۔آپ نیٹ ورک کے ڈھانچے کا تجزیہ کیسے کریں گے اور بااثر نوڈس یا برادریوں کی شناخت کیسے کریں گے؟",
        "Answer": "کسی دوسرے کالم کے عہدے پر مبنی ڈیٹا فریم میں ایک نیا کالم بنانے کے ل you ، آپ پانڈوں میں رینک () فنکشن استعمال کرسکتے ہیں۔یہاں ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'اقدار': [10 ، 20 ، 30 ، 40 ، 50]})# 'اقدار' کالم ڈی ایف کی درجہ بندی پر مبنی ایک نیا کالم بنائیں۔['رینک'] = DF ['اقدار']۔ رینک () پرنٹ (DF) اس مثال میں ، ہمارے پاس ایک ڈیٹا فریم ہے جس کا نام DF ہے جس میں ایک کالم 'اقدار' ہے جس میں عددی اقدار ہیں۔ہم 'اقدار' کالم میں اقدار کے عہدے پر مبنی 'رینک' کے نام سے ایک نیا کالم بنانا چاہتے ہیں۔ ہم 'اقدار' کالم پر رینک () فنکشن کا استعمال کرتے ہیں ، جو چڑھتے ہوئے ترتیب میں ہر قدر کو صفوں کو تفویض کرتا ہے۔پہلے سے طے شدہ طور پر ، رینک () فنکشن اوسط درجہ کو بندھے ہوئے اقدار کے لئے تفویض کرکے تعلقات کو سنبھالتا ہے۔ آؤٹ پٹ یہ ہوگا: ریاضی کا کوڈ کوڈ ویلیوز رینک 0 1.01 20 2.02 30 3.03 4.0 4.04 50 5.0 ہائر ، 'رینک' کالم پر مبنی بنایا گیا ہے۔'اقدار' کالم میں اقدار کا درجہ۔درجہ 1 سے سب سے چھوٹی قیمت کے لئے شروع ہوتا ہے اور اس کے بعد کی ہر قیمت کے لئے 1 سے اضافہ ہوتا ہے۔ نوٹ کریں کہ رینک () فنکشن تعلقات کو سنبھالنے کے ل different مختلف درجہ بندی کے طریقے اور اختیارات مہیا کرتا ہے ، آپ مزید معلومات کے لئے پانڈاس دستاویزات کا حوالہ دے سکتے ہیں (پانڈاس.ڈیٹافریم۔رینک) .ایسو ، اگر آپ نزولی ترتیب میں درجہ کا حساب لگانا چاہتے ہیں تو ، آپ چڑھتے ہوئے = غلط کو درجہ () فنکشن میں منتقل کرسکتے ہیں ، جیسے اس طرح: ڈی ایف ['رینک'] = ڈی ایف ['اقدار']۔ رینک (چڑھنے =جھوٹا)۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں ملازمین کا ڈیٹا ہوتا ہے۔ملازمین کے کاروبار میں شراکت کرنے والے عوامل کی نشاندہی کرنے کے لئے آپ ملازمین کی عدم استحکام کا تجزیہ کیسے کریں گے؟",
        "Answer": "کسی ڈیٹا فریم میں کالم کی مجموعی فیصد کا حساب لگانے کے ل you ، آپ پانڈوں میں کمم () اور رقم () افعال استعمال کرسکتے ہیں۔یہاں ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'اقدار': [10 ، 20 ، 30 ، 40 ، 50]})# مجموعی فیصد ['مجموعی فیصد'] = DF ['مجموعی فیصد'] کا حساب لگائیں۔'اقدار']. cumsum () / df ['values']. SUM () * 100 پرنٹ (DF) اس مثال میں ، ہمارے پاس ایک کالم 'اقدار' کے ساتھ DF نامی ڈیٹا فریم ہے جس میں عددی اقدار ہیں۔ہم 'اقدار' کالم میں اقدار کی مجموعی فیصد کا حساب لگانا چاہتے ہیں۔ ہم 'اقدار' کالم کے مجموعی رقم کا حساب لگانے کے لئے کمم () فنکشن کا استعمال کرتے ہیں۔اس کے بعد ، ہم مجموعی فیصد حاصل کرنے کے لئے 'اقدار' کالم کی کل رقم کے ذریعہ مجموعی رقم کو تقسیم کرتے ہیں۔'مجموعی فیصد' کالم تخلیق کیا گیا ہے اور اس میں 'اقدار' کالم میں اقدار کی مجموعی فیصد پر مشتمل ہے۔مجموعی فیصد پہلی قیمت کے لئے 10.0 ٪ سے شروع ہوتا ہے اور اس کے بعد کی ہر قیمت کے لئے متعلقہ فیصد سے بڑھتا ہے۔ نوٹ کریں کہ اگر مجموعی فیصد ابتدائی رقم سے زیادہ ہے تو مجموعی فیصد 100 ٪ سے تجاوز کرسکتا ہے۔اگر آپ مجموعی فیصد کو زیادہ سے زیادہ 100 ٪ تک محدود رکھنا چاہتے ہیں تو ، آپ ڈی ایف ['مجموعی فیصد'] = DF ['اقدار'] استعمال کرسکتے ہیں۔ cumsum (). کلپ (اوپری = 100) / df ['اقدار'].sum () * 100 اسے محدود کرنے کے لئے."
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر سپورٹ ڈیٹا ہوتا ہے۔عام مسائل کی نشاندہی کرکے اور ردعمل کے اوقات کو بہتر بنانے کے ذریعہ آپ کسٹمر سپورٹ آپریشنوں کا تجزیہ اور ان کو کس طرح بہتر بنائیں گے؟",
        "Answer": "ڈیٹا فریم میں دو کالموں کے مابین فرق کا حساب لگانے اور نتیجہ کی بنیاد پر ایک نیا کالم بنانے کے ل you ، آپ پانڈوں میں ریاضی کے گھٹاؤ کے عمل کو استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'کالم 1': [10 ، 20 ، 30 ، 40 ، 50] ، 'کالم 2': [5 ، 8 ، 15 ، 25 ، 30]})# 'کالم 1' اور 'کالم 2' ڈی ایف ['فرق'] = ڈی ایف ['کالم 1'] - ڈی ایف ['کالم 2'] پرنٹ (ڈی ایف) کے درمیان فرق کا حساب لگائیں اس مثال میں ، ہمارے پاس دو کے ساتھ ڈی ایف نامی ڈیٹا فریم ہے۔کالم 'کالم 1' اور 'کالم 2' جس میں عددی اقدار ہیں۔ہم 'کالم 1' اور 'کالم 2' میں اقدار کے مابین فرق کا حساب لگانا چاہتے ہیں اور نتیجہ پر مبنی 'فرق' کے نام سے ایک نیا کالم بنانا چاہتے ہیں۔ ہم حساب کتاب کرنے کے لئے ریاضی کے گھٹاؤ آپریشن (-) کا استعمال کرتے ہوئے 'کالم 1' سے 'کالم 2' کو گھٹائیں۔فرق.نتیجے میں اقدار کو 'فرق' کالم پر تفویض کیا گیا ہے۔ آؤٹ پٹ یہ ہوگا: کاپی کوڈ کالم 1 کالم 2 فرق 0 5 5 51 20 8 122 30 15 153 40 25 154 50 30 20 20 ہر ، فرق کے درمیان فرق کی بنیاد پر 'فرق' کالم تخلیق کیا گیا ہے۔'کالم 1' اور 'کالم 2' میں اقدار کو نوٹ کریں کہ کالموں کو گھٹائے جانے والے کالموں کی ایک ہی لمبائی ہونی چاہئے ، اور گمشدہ اقدار (NAN) نتیجہ میں پھیل جائیں گی اگر اس سے متعلقہ اقدار میں سے کوئی بھی کسی بھی کالم میں غائب ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں مالی لین دین ہوتا ہے۔آپ بے ضابطگی کا پتہ لگانے والے الگورتھم کا استعمال کرتے ہوئے جعلی لین دین کا تجزیہ اور ان کا پتہ کیسے لگائیں گے؟",
        "Answer": "کسی کالم میں گمشدہ اقدار کی تعداد کی بنیاد پر ڈیٹا فریم میں قطاروں کو فلٹر کرنے کے ل you ، آپ پانڈوں میں isnull () اور SUM () افعال استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'کالم 1': [10 ، 20 ، کوئی بھی نہیں ، 40 ، کوئی نہیں] ، 'کالم 2': [5 ، کوئی بھی نہیں ، 15 ، کوئی بھی نہیں ، 30]}) # کالم 1'n_missing_values = 1 میں گمشدہ اقدار کی تعداد پر مبنی فلٹر قطاریں # گمشدہ اقدار کی مطلوبہ تعداد کی وضاحت کریں۔فلٹرڈ_ ڈی ایف) اس مثال میں ، ہمارے پاس ڈی ایف نامی ڈیٹا فریم ہے جس میں دو کالم 'کالم 1' اور 'کالم 2' ہے۔ہم 'کالم 1' میں گمشدہ اقدار کی تعداد کی بنیاد پر قطاروں کو فلٹر کرنا چاہتے ہیں ، ہم یہ چیک کرنے کے لئے isnull () فنکشن کا استعمال کرتے ہیں کہ 'کالم 1' میں کون سی قدریں غائب ہیں (NAN)۔یہ بولین ماسک لوٹاتا ہے جہاں حقیقی گمشدہ اقدار کی نمائندگی کرتا ہے۔اس کے بعد ، ہم 'کالم 1'. نیکسٹ میں گمشدہ اقدار کی تعداد کو گننے کے لئے بولین ماسک پر رقم () فنکشن کا استعمال کرتے ہیں ، ہم متغیر N_Missing_values کا استعمال کرتے ہوئے گمشدہ اقدار کی مطلوبہ تعداد کی وضاحت کرتے ہیں۔اس معاملے میں ، ہم اسے 1. فائنل طور پر مرتب کرتے ہیں ، ہم DF ['کالم 1'] کی حالت کا استعمال کرتے ہوئے ڈیٹا فریم DF کو فلٹر کرتے ہیں۔ isnull (). رقم () == n_misseing_values۔یہ حالت چیک کرتی ہے کہ آیا 'کالم 1' میں گمشدہ اقدار کی تعداد N_Missing_values میں مخصوص مطلوبہ نمبر سے مماثل ہے۔اس حالت کو مطمئن کرنے والی قطاروں کو صرف فلٹر_ڈف میں منتخب اور ذخیرہ کیا گیا ہے۔ آؤٹ پٹ یہ ہوگا: RCOPY کوڈ کالم 1 کالم 1 کالم 21 20.0 NAN 30.0 HERE ، 'کالم 1' میں گمشدہ اقدار کی مطلوبہ تعداد والی قطاریں فلٹر اور فلٹرڈ_ ڈی ایف میں ظاہر ہوتی ہیں۔آپ کالم میں گمشدہ اقدار کی مختلف تعداد کی بنیاد پر قطار کو فلٹر کرنے کے لئے N_Missing_values کی قدر کو ایڈجسٹ کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں ایپ کے استعمال کا ڈیٹا ہوتا ہے۔ایپ کی کامیابی میں معاون عوامل کی نشاندہی کرنے کے لئے آپ صارف کی مصروفیت اور برقرار رکھنے کا تجزیہ کیسے کریں گے؟",
        "Answer": "ڈیٹ ٹائم اقدار کے کالم کو ہفتے کے دن میں ڈیٹا فریم میں تبدیل کرنے کے ل you ، آپ ڈے_ نام () فنکشن کے ساتھ ساتھ پانڈوں میں ڈی ٹی ایکسیسر کا استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'تاریخ': ['2023-07-01' ، '2023-07-02' ، '2023-07-03' ، '2023'-07-04 '] ،' ویلیو ': [10 ، 20 ، 30 ، 40]})#' تاریخ 'کالم کو ڈیٹیمیڈف میں تبدیل کریں [' تاریخ '] = pd.to_datetime (df [' تاریخ '])# ایکسٹریکٹ ڈے'تاریخ' کالم ڈی ایف ['ڈے او ایف ویک'] = ڈی ایف ['تاریخ'] سے ہفتہ کی۔ dt.day_name () پرنٹ (DF) اس مثال میں ، ہمارے پاس DF نامی ایک ڈیٹا فریم ہے جس میں دو کالم 'تاریخ' اور 'قدر' ہیں۔'تاریخ' کالم میں تاریخ کی اقدار 'YYYY-MM-DD' کی شکل میں ڈور کے طور پر ہوتی ہیں۔ہم 'تاریخ' کالم کو ڈیٹ ٹائم فارمیٹ میں تبدیل کرنا چاہتے ہیں اور ہفتے کے دن کو نکالنا چاہتے ہیں۔ اس سے پہلے ، ہم 'تاریخ' کالم کو ڈیٹ ٹائم فارمیٹ میں تبدیل کرنے کے لئے PD.TO_DATIME () فنکشن کا استعمال کرتے ہیں۔ پھر ہم 'تاریخ' تک رسائی حاصل کرتے ہیں۔ڈی ایف ['تاریخ'] کا استعمال کرتے ہوئے کالم اور ڈیٹ ٹائم پراپرٹیز تک رسائی کے ل d ڈی ٹی ایکسیسر کا اطلاق کریں۔ہم ہفتہ کے دن کو سٹرنگ کے طور پر نکالنے کے لئے ڈے_ نام () فنکشن کا استعمال کرتے ہیں ، ہم ہفتہ کے اقدار کو ایک نئے کالم 'ڈے آف ویک' کو ڈی ایف ['ڈے اوف ویک'] = .... آؤٹ پٹ کا استعمال کرتے ہوئے تفویض کرتے ہیں۔یہ ہوگا: ریاضی کا کوڈ کی تاریخ کی قیمت ڈے آف ویک 0 2023-07-01 10 ہفتہ 1 2023-07-02 20 اتوار 2 2023-07-03 30 سوموار 323-07-04 40 منگل ہیئر ، 'تاریخ' کالم تاریخ کے وقت کی شکل میں تبدیل کیا گیا ہے اور ''۔ڈے آف ویک 'کالم ہر تاریخ کے مطابق ہفتے کے دن پر مشتمل ہے۔ نوٹ: ڈے_ نام () فنکشن اس دن کا پورا نام واپس کرتا ہے (جیسے ،' پیر '،' منگل ')۔اگر آپ مختص نام (جیسے ، 'پیر' ، 'منگل') چاہتے ہیں تو ، آپ ڈے_ نام () فنکشن کو اس طرح استعمال کرسکتے ہیں ، جیسے اس کی طرح: df ['dayofweek'] = df ['تاریخ']۔dt.strfume ('٪ a')۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں مصنوعات کی فروخت کا ڈیٹا ہوتا ہے۔ٹائم سیریز تجزیہ کی تکنیکوں کا استعمال کرتے ہوئے آپ مستقبل کی فروخت کا تجزیہ اور پیش گوئی کیسے کریں گے؟",
        "Answer": "وزن کے طور پر کسی دوسرے کالم کا استعمال کرتے ہوئے ایک ڈیٹا فریم میں متعدد کالموں میں اقدار کے وزن والے رقم کا حساب لگانے کے ل you ، آپ پانڈوں میں ضرب () اور رقم () افعال استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹا فریمڈف = PD.Dataframe ({'A': [10 ، 20 ، 30] ، 'B': [5 ، 6 ، 7] ، 'C': [0.1 ،0.2 ، 0.3] ، 'وزن': [0.3 ، 0.5 ، 0.2]})# کالموں میں 'A' ، 'B' ، اور 'C' میں 'وزن' کالم ویٹ_سم = (DF [['a کا استعمال کرتے ہوئے اقدار کے وزن کا حساب لگائیں۔'،' B '،' C ']].، 'بی' ، 'سی' ، اور 'وزن'۔کالم 'A' ، 'B' ، اور 'C' میں اقدار پر مشتمل ہے ، اور 'وزن' کالم میں ہر قدر سے وابستہ وزن شامل ہوتا ہے۔ وزن والے رقم کا حساب لگانے کے لئے ، ہم پہلے کالموں کو 'A' ، 'B' منتخب کرتے ہیں ،اور 'C' DF کا استعمال کرتے ہوئے [['a' ، 'B' ، 'C']]۔اس کے بعد ، ہم 'وزن' کے کالم کے ساتھ ملٹی پلائی () فنکشن کو عنصر کے مطابق ہر قیمت کو اس کے اسی وزن سے ضرب دیتے ہیں۔محور = 0 پیرامیٹر یہ واضح کرتا ہے کہ ضرب قطار کے لحاظ سے کی جانی چاہئے۔ Next ، ہم وزن والے اقدار کے مجموعہ کا حساب لگانے کے لئے رقم () فنکشن کا استعمال کرتے ہیں۔پہلے سے طے شدہ طور پر ، سم () کالم وار رقم انجام دیتا ہے ، لہذا یہ ہر کالم کے لئے اقدار کا حساب دیتا ہے۔ آؤٹ پٹ یہ ہوگا: CSSCOPY CODEA 19.0B 8.9C 0.22dType: فلوٹ 64 ہائر ، کالم 'A' میں اقدار کا وزن والا مجموعہ 'A' ، 'بی '، اور' سی 'کا حساب' وزن 'کالم سے وزن کا استعمال کرتے ہوئے کیا جاتا ہے۔نتیجہ پانڈاس سیریز آبجیکٹ کے طور پر ظاہر ہوتا ہے ، جہاں انڈیکس کالم کے ناموں کی نمائندگی کرتا ہے اور اقدار وزن والے رقم کی نمائندگی کرتے ہیں۔ آپ کالم کے ناموں کو ایڈجسٹ کرسکتے ہیں یا ڈیٹا فریم میں کالموں کے مختلف سیٹوں کے لئے وزن والے رقم کا حساب لگانے کے لئے مزید کالم شامل کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں سوشل میڈیا پر اثر انداز ہوتا ہے۔آپ ان کی رسائ اور مشغولیت کی پیمائش کی بنیاد پر اثر انداز کرنے والوں کا تجزیہ اور درجہ بندی کیسے کریں گے؟",
        "Answer": "کسی حالت کی بنیاد پر ڈیٹا فریم کے کالم میں اقدار کو تبدیل کرنے کے ل you ، آپ پانڈوں میں ایل او سی ایکسیسر کو قطاروں کے سب سیٹ کو منتخب کرنے کے لئے استعمال کرسکتے ہیں جو حالت کو پورا کرتے ہیں اور پھر مطلوبہ کالم کو نئی اقدار تفویض کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'A': [10 ، 20 ، 30 ، 40 ، 50]})# کالم میں اقدار کو تبدیل کریں 'A' پر مبنی کنڈیشن ڈی ایف۔ ایل او سی۔DF ['a']> 30 ، 'a'] = 0 پرنٹ (DF) اس مثال میں ، ہمارے پاس ایک ڈیٹا فریم ہے جس کا نام DF ہے جس میں کالم 'A' ہے جس میں عددی اقدار ہیں۔ہم 'A' کالم میں اقدار کو تبدیل کرنا چاہتے ہیں جو 30 سے زیادہ ایک نئی قیمت کے ساتھ ہیں ، اس معاملے میں ، 0. یہ کریں ، ہم لوک رساس کو قطار کے سب سیٹ کو منتخب کرنے کے لئے استعمال کرتے ہیں جو DF کی حالت کو پورا کرتے ہیں ['a']> 30. LOC کی پہلی دلیل قطار کے انتخاب کی حالت کی وضاحت کرتی ہے ، اور دوسری دلیل کالم (زبانیں) کو اپ ڈیٹ کرنے کی وضاحت کرتی ہے۔اس معاملے میں ، ہم قطاریں منتخب کر رہے ہیں جہاں 'A' 30 سے زیادہ ہے ، اور خود 'A' کالم کو اپ ڈیٹ کر رہے ہیں۔ ہم پھر منتخب کردہ قطار کو 0 کو DF.LOC [DF ['A' پر تفویض کرکے منتخب کریں۔]> 30 ، 'a']۔ آؤٹ پٹ یہ ہوگا: CSSCOPY کوڈ A0 101 202 303 04 0 جب ، 'A' کالم میں جو اقدار 30 سے زیادہ ہیں ان کی جگہ 0. 0. کے ساتھ تبدیل کردی گئی ہے۔آپ کی مخصوص ضروریات کے مطابق قدر کریں۔"
    },
    {
        "Question": "آپ کو ویب سائٹ ٹریفک ڈیٹا پر مشتمل ڈیٹاسیٹ دیا جاتا ہے۔رکاوٹوں اور صارف کے تجربے کے مسائل کی نشاندہی کرکے آپ ویب سائٹ کی کارکردگی کا تجزیہ اور ان کو کس طرح بہتر بنائیں گے؟",
        "Answer": "ڈیٹا فریم میں متعدد کالموں کے ذریعہ گروپ کردہ کالم میں اقدار کے جوڑے کا حساب لگانے کے ل you ، آپ پانڈوں میں گروپ بائی () فنکشن استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹا فریمڈف = pd.dataframe ({'A': ['x' ، 'x' ، 'Y' ، 'z'] ، 'B': [['A' ، 'B' ، 'A' ، 'B' ، 'A'] ، 'C': [10 ، 20 ، 30 ، 40 ، 50]})# کالم 'C' میں اقدار کی رقم کا حساب کتاب کریں۔کالم 'a' اور 'b'sum_by_groups = df.groupby ([' a '،' b ']) [' c ']'A' ، 'B' ، اور 'C'۔ہم کالم 'سی' میں اقدار کے جوڑے کا حساب کتاب کالم 'اے' اور 'بی' کے ذریعہ کرنا چاہتے ہیں۔ ایسا کرنے کے ل we ، ہم گروپ بائی () فنکشن استعمال کرتے ہیں اور کالموں کو 'A' اور 'B' کو گروپ بندی کی چابیاں کے طور پر فراہم کرتے ہیں۔ایک فہرست میں ['a' ، 'B']۔اس کے بعد کالم 'C' کا انتخاب مربع بریکٹ ['C'] کا استعمال کرتے ہوئے کیا جاتا ہے اس بات کی نشاندہی کرنے کے لئے کہ ہم ہر گروپ کے لئے کالم 'C' میں اقدار کے جوڑے کا حساب لگانا چاہتے ہیں۔ہر گروپ کے لئے کالم 'سی' میں اقدار۔ آؤٹ پٹ یہ ہوگا: CSSCOPY CODEA BX A 10 B 20Y A 30 B 40Z A 50Name: C ، DTYPE: INT64HERE ، کالم 'C' میں اقدار کا مجموعہ ہر انوکھے امتزاج کے لئے حساب کیا جاتا ہےکالم 'A' اور 'B' میں اقدار کی۔اس کا نتیجہ پانڈاس سیریز آبجیکٹ کے طور پر ظاہر ہوتا ہے ، جہاں انڈیکس کالم 'A' اور 'B' میں اقدار کے انوکھے امتزاج کی نمائندگی کرتا ہے ، اور اقدار ہر گروپ کے لئے کالم 'C' میں اقدار کی رقم کی نمائندگی کرتی ہیں۔کالم کے نام یا ڈیٹا فریم میں کالموں کے مختلف امتزاج کے ذریعہ گروپ میں مزید کالم شامل کریں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر سروے کے ردعمل ہوتے ہیں۔بہتری کے لئے علاقوں کی نشاندہی کرنے کے لئے آپ کسٹمر آراء کا تجزیہ اور خلاصہ کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم کو ایس کیو ایلائٹ ڈیٹا بیس ٹیبل میں تبدیل کرنے کے ل you ، آپ پانڈوں کے ذریعہ فراہم کردہ ٹو_ ایس کیو ایل () فنکشن استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور Pdimport sqlite3# مثال dataframedf = pd.dataframe ({'نام': ['جان' ، 'ایلس' ، 'باب'] ، 'عمر': [25 ، 30 ، 35] ،'سٹی': ['نیو یارک' ، 'لندن' ، 'پیرس']})# ایک SQLITE ڈیٹا بیس کنکشن کنکون = sqlite3.connect ('myDatabase.db' ')# ڈیٹا فریم کو ایک SQLite table.to_sql (' myTable 'میں تبدیل کریں۔.ہم اس ڈیٹا فریم کو SQLITE ڈیٹا بیس ٹیبل میں تبدیل کرنا چاہتے ہیں۔ ایسا کرنے کے ل we ، ہم سب سے پہلے SQLite3.connect () کا استعمال کرتے ہوئے SQLITE ڈیٹا بیس سے رابطہ قائم کرتے ہیں اور ڈیٹا بیس فائل کے راستے کی وضاحت کرتے ہیں۔اس مثال میں ، ہم فائل کا نام 'myDatabase.db'.next استعمال کر رہے ہیں ، ہم ڈیٹا فریم کو SQLite ٹیبل میں تبدیل کرنے کے لئے TO_SQL () فنکشن کا استعمال کرتے ہیں۔TO_SQL () کی پہلی دلیل اس ٹیبل کا نام ہے جسے ہم بنانا چاہتے ہیں (اس مثال میں 'مائی ٹیبل')۔دوسری دلیل SQLITE ڈیٹا بیس کنکشن ہے (اس معاملے میں کون)۔IF_EXISTS پیرامیٹر کو 'تبدیل' کرنے کے لئے سیٹ کیا گیا ہے ، جس کا مطلب ہے کہ اگر ٹیبل پہلے سے موجود ہے تو ، اسے ڈیٹا فریم کی بنیاد پر نئی ٹیبل کے ساتھ تبدیل کیا جائے گا۔انڈیکس پیرامیٹر ڈیٹا فریم انڈیکس کو ڈیٹا بیس ٹیبل میں ایک علیحدہ کالم کے طور پر محفوظ کرنے سے خارج کرنے کے لئے غلط پر سیٹ کیا گیا ہے۔.db 'تخلیق کیا جائے گا ، اور ڈیٹا فریم ڈی ایف کو اس ڈیٹا بیس کے اندر' مائی ٹیبل 'نامی ٹیبل میں تبدیل کیا جائے گا۔ آپ اپنی ضروریات کے مطابق ڈیٹا بیس فائل کا نام ، ٹیبل نام اور دیگر پیرامیٹرز کو ایڈجسٹ کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر ڈیموگرافک ڈیٹا ہوتا ہے۔آپ مخصوص صارفین کے طبقات کو نشانہ بنانے کے لئے آبادیاتی رجحانات کا تجزیہ اور تصور کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم میں کالم کے مجموعی لاگ ریٹرن کا حساب لگانے کے ل you ، آپ نمی اور پانڈاس لائبریریوں کا استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: Pythoncopy کوڈیمپورٹ پانڈاس بطور Pdimport numpy بطور NP# مثال کے طور پر dataframedf = pd.dataframe ({'تاریخ': ['2021-01-01' ، '2021-01-02' ، '2021-01-03'.'قیمت']. شفٹ (1))# مجموعی لاگ-ریٹورن ڈی ایف ['cumulative_log_return'] = df ['log_return']. cumsum () پرنٹ (df) کا حساب لگائیں ، اس مثال میں ، ہمارے پاس دو کالموں کے ساتھ ایک ڈیٹا فریم ہے۔، 'تاریخ' اور 'قیمت'۔ہم 'پرائس' کالم کے مجموعی لاگ ریٹرن کا حساب لگانا چاہتے ہیں۔ لاگ ریٹرن کا حساب لگانے کے لئے ، ہم 'قیمت' کالم اور اس کی پچھلی قیمت کے مابین تناسب کے قدرتی لوگرتھم کو لینے کے لئے NP.log () فنکشن کا استعمال کرتے ہیں۔ڈی ایف ['قیمت'] کے ذریعہ حاصل کیا گیا۔ شفٹ (1)۔شفٹ (1) فنکشن موجودہ قیمت کے ساتھ موجودہ قیمت کو سیدھ میں کرنے کے لئے 'قیمت' کالم کو ایک صف میں بدل دیتا ہے۔ Next ، ہم Cumsum () فنکشن کا استعمال کرتے ہوئے مجموعی لاگ ریٹرن کا حساب لگاتے ہیں ، جو لاگ کی مجموعی رقم کا حساب لگاتا ہے۔اقدار کی واپسی۔Log_return cumulative_log_return0 2021-01-01 100 نان نان 1 2021-01-02 110 0.095310 0.0953102 2021-01-03 105 -0.0473 0.0477383 2021-04 120 0.135 ہر ایک کے لئے لاگ ان ریٹرن اقداردن ، اور 'cumulative_log_return' کالم میں ہر دن تک لاگت کی واپسی کی اقدار کا مجموعی مجموعہ ہوتا ہے۔ آپ اپنی مخصوص ضروریات کو پورا کرنے کے لئے کالم کے ناموں یا حساب کتاب کی منطق کو ایڈجسٹ کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں آن لائن اشتہار مہم کا ڈیٹا ہوتا ہے۔موثر ہدف سازی کی حکمت عملیوں کی نشاندہی کرکے آپ AD کی کارکردگی کا تجزیہ اور ان کو کس طرح بہتر بنائیں گے؟",
        "Answer": "ڈیٹا فریم میں انٹرپولیٹ کرکے گمشدہ اقدار کو سنبھالنے کے ل you ، آپ پانڈوں کے ذریعہ فراہم کردہ انٹرپولیٹ () فنکشن استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PDTHONCOPY کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹا فریم کے ساتھ گمشدہ اقدار کے ساتھ = pd.dataframe ({'A': [1 ، 2 ، np.nan ، 4 ، 5] ، 'B': [10 ، NP.nan، NP.Nan ، 40 ، 50]})# انٹرپولیٹ گمشدہ قدروں کو ڈی ایف_ٹرپولیٹڈ = ڈی ایف۔ انٹرپولیٹ () پرنٹ (ڈی ایف_ٹرنپولیٹڈ) اس مثال میں ، ہمارے پاس دو کالموں کے ساتھ ڈی ایف نامی ایک ڈیٹا فریم ہے ، جس میں کچھ لاپتہ ہے ، جس میں کچھ لاپتہ ہے۔NP.NAN کے ذریعہ نمائندگی کی گئی اقدار۔ گمشدہ اقدار کو انٹرپولیٹ کرنے کے ل we ، ہم انٹرپولیٹ () فنکشن کا استعمال کرتے ہیں ، جو آس پاس کے ڈیٹا پوائنٹس کی بنیاد پر انٹرپولیٹڈ اقدار کے ساتھ گمشدہ اقدار کو بھرتا ہے۔پہلے سے طے شدہ طور پر ، یہ لکیری انٹرپولیشن انجام دیتا ہے۔ نتیجے میں ڈیٹا فریم ، DF_INTERPolated ، انٹرپولیٹڈ اقدار کی جگہ لینے والی گمشدہ اقدار پر مشتمل ہوگا: CSSCOPY کوڈ A B0 1.0 10.01 2.0 20.02 3.0 30.03 4.0 40.04 5.0 50.0AS ، آپ کالموں میں گمشدہ قدریں دیکھ سکتے ہیں۔'اور' B 'کی جگہ دستیاب ڈیٹا پوائنٹس کی بنیاد پر انٹرپولیٹڈ اقدار کی جگہ لی جاتی ہے۔ آپ انٹرپولیٹ () فنکشن کو اضافی دلائل فراہم کرکے انٹرپولیشن کے طریقہ کار کو اپنی مرضی کے مطابق بنا سکتے ہیں۔مثال کے طور پر ، آپ مختلف رکاوٹ کے طریقوں جیسے 'لکیری' ، 'قریب ترین' ، 'سلائنر' ، 'چوکور' ، وغیرہ جیسے طریقہ کار پیرامیٹر کی وضاحت کرکے استعمال کرسکتے ہیں۔مزید برآں ، آپ اپنے مخصوص ڈیٹا فریم اور انٹرپولیشن کی ضروریات کے مطابق کوڈ کو ایڈجسٹ کرنے کے لئے حد_ ڈائریکشن اور حد_یریہ پیرامیٹرز کا استعمال کرتے ہوئے انٹرپولیشن کی سمت کو کنٹرول کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں پروڈکٹ ریویو ڈیٹا ہوتا ہے۔ممکنہ مصنوعات کی طاقتوں اور کمزوریوں کی نشاندہی کرنے کے لئے آپ جذبات کی تقسیم کا تجزیہ اور تصور کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم میں ایک نیا کالم بنانے کے ل two ، دو ڈیٹ ٹائم کالموں کے مابین فرق کی بنیاد پر ، آپ دو کالموں کے درمیان - گھٹاؤ آپریٹر استعمال کرسکتے ہیں۔یہاں ایک مثال کوڈ ہے: PDTHONCOPY کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹا ٹائم کالم ایس ڈی ایف = pd.dataframe ({'اسٹارٹ_ڈیٹ': ['2022-01-01' ، '2022-02-01' ، '2022-03-01' '] ، 'end_date': ['2022-01-15' ، '2022-02-20' ، '2022-03-10']})# کالموں کو ڈیٹ ٹائم ٹائپڈف میں تبدیل کریں ['اسٹارٹ_ڈیٹ'] = pd.to_datetime (df۔'] پرنٹ (ڈی ایف) اس مثال میں ، ہمارے پاس ڈی ایف نامی ایک ڈیٹا فریم ہے جس میں دو ڈیٹ ٹائم کالم ہیں:' اسٹارٹ_ڈیٹ 'اور' اینڈ_ڈیٹ'.فیرسٹ ، ہم کالموں کو PD.TO_DATETIME () فنکشن. نیکسٹ کا استعمال کرتے ہوئے ڈیٹ ٹائم ٹائپ میں تبدیل کرتے ہیں۔'end_date' اور 'start_date' کالموں کے مابین فرق کو گھٹا کر ان کے فرق کا حساب لگائیں ، اور نتیجہ کو ایک نئے کالم 'date_differences' پر تفویض کریں۔ نتیجے میں ڈیٹا فریم ، ڈی ایف ، اصل کالموں کے ساتھ ساتھ نئے 'ڈیٹ_ ڈیڈیفینس' کالم پر مشتمل ہوگا:Yamlcopy کوڈ start_date end_diference0 2022-01-01 2022-01-15 14 دن 1 2022-02-01 2022-02-20 19 دن 2022-03-01 2022-03-10 9 دن آپ دیکھ سکتے ہیں ، 'تاریخ_ڈیفینس' کالممتعلقہ 'end_date' اور 'start_date' اقدار کے درمیان فرق ظاہر کرتا ہے ، جس کی نمائندگی ٹائم ڈیلٹا آبجیکٹ کے طور پر کی جاتی ہے۔ آپ ضرورت پڑنے پر 'تاریخ_ڈیفینس' کالم کو مزید جوڑ توڑ کرسکتے ہیں۔مثال کے طور پر ، آپ dt.days وصف کا استعمال کرتے ہوئے دن کی تعداد نکال سکتے ہیں یا ٹائم ڈیلٹا اقدار کو وقت کے ایک مخصوص یونٹ میں تبدیل کرسکتے ہیں۔ کوڈ کو اپنے مخصوص ڈیٹا فریم اور کالم ناموں کے مطابق ڈھالنے کے لئے مفت۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں صحت کی دیکھ بھال کے دعوے کا ڈیٹا ہوتا ہے۔آپ ڈیٹا مائننگ کی تکنیکوں کا استعمال کرتے ہوئے جعلی دعوؤں کے نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم کے کالم میں منفرد اقدار کی فریکوئینسی گنتی کا حساب لگانے کے ل you ، آپ پانڈوں کے ذریعہ فراہم کردہ ویلیو_کونٹ () فنکشن استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹا فریمڈف = pd.dataframe ({'زمرہ': ['a' ، 'b' ، 'A' ، 'C' ، 'B' ، 'A']})# 'زمرہ' کالم فریکوینسی_کاؤنٹ = ڈی ایف ['زمرہ'] میں منفرد اقدار کی فریکوئینسی گنتی کا حساب لگائیں۔ ویلیو_کاؤنٹس () پرنٹ (فریکوینسی_کاؤنٹ) اس مثال میں ، ہمارے پاس ایک ڈیٹا فریم ہے جس کا نام ڈی ایف ہے جس میں 'زمرہ' پر مشتمل ہے جس میں 'زمرہ' ہے۔'زمرہ' کالم میں منفرد اقدار کی فریکوئینسی گنتی کا حساب لگائیں ، ہم کالم پر ویلیو_کونٹ () فنکشن کا استعمال کرتے ہیں۔نتیجہ متغیر فریکوینسی_کاؤنٹ کو تفویض کیا گیا ہے۔ آؤٹ پٹ ان کے متعلقہ شمار کے ساتھ 'زمرہ' کالم میں انوکھی اقدار کو ظاہر کرے گا: CSSCOPY CODEA 3B 2C 1Name: زمرہ ، DTYPE: INT64AS آپ دیکھ سکتے ہیں ، آؤٹ پٹ انوکھی اقدار کو ظاہر کرتا ہے '۔'،' بی '، اور' سی '' زمرہ 'کالم اور ان سے متعلقہ تعدد میں۔مثال کے طور پر ، فریکوینسی_کاؤنٹ ['A'] آپ کو اپنے مخصوص ڈیٹا فریم اور کالم نام کے مطابق کوڈ میں ترمیم کرنے کے لئے 'A'.feel کی قیمت کے لئے گنتی فراہم کرے گا۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں سوشل میڈیا پر اثر انداز ہوتا ہے۔آپ ان کے مواد کے زمرے اور سامعین کے اعدادوشمار کی بنیاد پر اثر و رسوخ کا تجزیہ اور درجہ بندی کیسے کریں گے؟",
        "Answer": "ڈیٹا ٹائم آبجیکٹ میں ڈور کے کالم کو ڈیٹا فریم میں تبدیل کرنے کے ل you ، آپ PD.TO_DATETIME () فنکشن کو پانڈوں کے ذریعہ فراہم کردہ فنکشن استعمال کرسکتے ہیں۔یہ فنکشن فارمیٹ پیرامیٹر کی وضاحت کرکے مختلف تاریخ کے فارمیٹس کو سنبھال سکتا ہے۔یہاں ایک مثال کا کوڈ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# مثال کے طور پر تاریخ کالم ڈی ایف = pd.dataframe ({'تاریخ': ['2022-01-01' ، '02/01/2022 '،' 2022-03-15 '.، غلطیاں = 'پروسرس') پرنٹ (ڈی ایف) اس مثال میں ، ہمارے پاس ڈی ایف نامی ایک ڈیٹا فریم ہے جس میں 'تاریخ' نامی کالم ہے جس میں مختلف شکلوں میں تاریخ کی قدر ہوتی ہے۔ 'تاریخ' کالم کو ڈیٹ ٹائم آبجیکٹ میں تبدیل کرنے کے لئے ، ہم PD استعمال کرتے ہیں۔کالم پر .to_datetime () فنکشن۔ہم 'Yyyy-mm-DD' کے متوقع فارمیٹ کی نشاندہی کرنے کے لئے '٪ y- ٪ m- ٪ d' کے طور پر فارمیٹ پیرامیٹر کی وضاحت کرتے ہیں۔غلطیاں = 'پرورس' پیرامیٹر کو کسی بھی اقدار کو سنبھالنے کے لئے استعمال کیا جاتا ہے جسے تبدیل نہیں کیا جاسکتا ہے اور انہیں NAT (ایک وقت نہیں) قدر کے طور پر سیٹ کیا جاسکتا ہے۔ نتیجے میں ڈیٹا فریم ، ڈی ایف ، 'تاریخ' کالم میں تبدیل شدہ ڈیٹ ٹائم آبجیکٹ پر مشتمل ہوگا: یامل کوپی کوڈDATE0 2022-01-011 2022-02-012 2022-03-153 2022-04-15AS آپ دیکھ سکتے ہیں ، 'تاریخ' کالم مختلف تاریخ کی شکلوں سے قطع نظر ، 'تاریخ' کالم کو ڈیٹ ٹائم آبجیکٹ میں تبدیل کردیا جاتا ہے۔ اگر 'تاریخ میں کوئی قیمت ہے۔'کالم کو مخصوص شکل کی بنیاد پر ڈیٹ ٹائم آبجیکٹ میں تبدیل نہیں کیا جاسکتا ، اسے NAT کے ساتھ تبدیل کیا جائے گا۔ آپ اپنی تاریخوں کے مخصوص فارمیٹ سے ملنے کے لئے فارمیٹ پیرامیٹر کو ایڈجسٹ کرسکتے ہیں۔دستیاب فارمیٹ کوڈز کے لئے Strftime ہدایت نامہ (https://docs.python.org/3/library/datetime.html#strfume-and-strptime-format-codes) پر ازگر دستاویزات کا حوالہ دیں۔اپنے ڈیٹا فریم اور کالم کا نام فٹ کریں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر براؤزنگ کا ڈیٹا ہوتا ہے۔آپ صارف کی ترجیحات اور طرز عمل کی بنیاد پر ویب سائٹ کے مواد کا تجزیہ اور ذاتی نوعیت کا تجزیہ کریں گے؟",
        "Answer": "ڈیٹا فریم کے کالم میں لگاتار قطاروں کے مابین فیصد کی تبدیلی کا حساب لگانے کے لئے ، آپ پانڈوں کے ذریعہ فراہم کردہ PCT_CHANGE () فنکشن استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# مثال کے طور پر PD# فریم کالم ڈی ایف = PD.Dataframe ({'اقدار': [10 ، 20 ، 15 ، 25 ، 30]})# میں مسلسل قطار کے درمیان فیصد کی تبدیلی کا حساب لگائیں '۔اقدار 'کالم ڈی ایف [' فیصد تبدیلی ']] = ڈی ایف [' اقدار ']'اقدار' کالم میں لگاتار قطاروں کے مابین تبدیل کریں ، ہم کالم پر PCT_CHANGE () فنکشن استعمال کرتے ہیں۔فیصد کی تبدیلی کو حاصل کرنے کے لئے نتیجہ 100 سے ضرب ہے۔ہم ڈیٹا فریم میں 'فیصد کی تبدیلی' کے نام سے ایک نئے کالم میں حساب کتاب کی فیصد کی تبدیلی کو تفویض کرتے ہیں۔ نتیجے میں ڈیٹا فریم ، ڈی ایف ، اصل 'اقدار' کالم کے ساتھ ساتھ حساب کتاب میں بھی ہوگا: ریاضی کا کوڈ ویلیوز فیصد فیصد تبدیلی 0 NAN1 20 100.000000215 -25.0000003 25 66.6666674 30 20.00000000 آپ دیکھ سکتے ہیں ، 'فیصد تبدیلی' کالم 'اقدار' کالم میں لگاتار قطاروں کے مابین فیصد کی تبدیلی کی نمائندگی کرتا ہے۔پہلی صف کی نان کی قیمت ہے کیونکہ فیصد کی تبدیلی کا حساب لگانے کے لئے پچھلی قطار نہیں ہے۔ آپ اپنے مخصوص ڈیٹا فریم اور کالم نام کے مطابق کوڈ میں ترمیم کرسکتے ہیں۔ نوٹ: پی سی ٹی_چینج () فنکشن موجودہ قطار کی بنیاد پر فیصد کی تبدیلی کا حساب لگاتا ہے۔قدر اور پچھلی صف کی قیمت۔اگر آپ مختلف کالم یا مخصوص صف کے وقفوں کی بنیاد پر فیصد کی تبدیلی کا حساب لگانا چاہتے ہیں تو ، آپ اس کے مطابق کوڈ کو ایڈجسٹ کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں ٹریفک حادثے کا ڈیٹا ہوتا ہے۔آپ ان عوامل کا تجزیہ اور شناخت کیسے کریں گے جو حادثات میں معاون ہیں اور احتیاطی تدابیر کی تجویز پیش کرتے ہیں؟",
        "Answer": "کسی ڈیٹا فریم میں کسی کالم کے وزن والے وسط کا حساب لگانے کے ل another ، کسی دوسرے کالم کو وزن کے طور پر استعمال کرتے ہوئے ، آپ پانڈوں کے ساتھ مل کر نپی لائبریری کا استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: پائیتھون کوپی کوڈیمپورٹ پانڈاس بطور پی ڈیمپورٹ نیمپی کے طور پر NP# مثال کے طور پر کالم 'ویلیوز' اور 'ویٹ' ڈی ایف = پی ڈی اے ڈی اے ایف آر اے ایم ({'اقدار': [10 ، 20 ، 15 ، 25 ، 30] ، 'وزن کے ساتھ ڈیٹا فریم': [0.2 ، 0.3 ، 0.1 ، 0.2 ، 0.2]})# وزن والے اوسط ویٹڈ_میان = np.average (df [' values '] ، وزن = df [' وزن ']) پرنٹ (\"وزن کا مطلب:\" ، وزن والے_میان کا حساب لگائیں) اس مثال میں ، ہمارے پاس ڈی ایف نامی ایک ڈیٹا فریم ہے جس میں دو کالم ہیں: 'اقدار' اور 'وزن'۔'اقدار' کالم میں عددی اقدار پر مشتمل ہے ، اور 'وزن' کالم میں ہر قدر کے ل the اسی وزن پر مشتمل ہوتا ہے۔ وزن کے معنی کا حساب لگانے کے ل we ، ہم np.vverage () فنکشن کو numpy سے استعمال کرتے ہیں۔ہم 'اقدار' کالم کو اوسطا values اقدار اور 'وزن' کالم کو اسی طرح کے وزن کے طور پر منتقل کرتے ہیں۔نتیجہ متغیر ویٹڈ_میان کو تفویض کیا گیا ہے۔وزن کے حساب سے حساب کتاب کو صحیح طریقے سے انجام دیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں ایئر لائن فلائٹ ڈیٹا ہوتا ہے۔تاخیر کو کم سے کم کرنے اور وقتی کارکردگی کو بہتر بنانے کے ل you آپ فلائٹ شیڈولنگ کا تجزیہ اور بہتر بنائیں گے؟",
        "Answer": "ایکسپلوریٹری ڈیٹا انیلیسیس (ای ڈی اے) ڈیٹاسیٹ میں خصوصیات اور نمونوں کی جانچ اور سمجھنے کا عمل ہے۔اس میں بنیادی ڈھانچے ، تعلقات اور رجحانات کو ننگا کرنے کے لئے اعداد و شمار کی ضعف اور اعداد و شمار کی کھوج شامل ہے۔ ای ڈی اے کے بنیادی اہداف یہ ہیں: ڈیٹا کی تفہیم: ای ڈی اے ڈیٹاسیٹ کی بہتر تفہیم حاصل کرنے میں مدد کرتا ہے ، بشمول اس کے متغیرات ، ان کی تقسیم اور اس کے مابین ممکنہ تعلقات شامل ہیں۔انہیںیہ ڈیٹا کے معیار ، تکمیل اور ممکنہ امور کے بارے میں بصیرت فراہم کرتا ہے۔ ڈیٹا کی صفائی اور پری پروسیسنگ: ای ڈی اے ڈیٹاسیٹ میں گمشدہ اقدار ، آؤٹ لیئرز یا تضادات کی نشاندہی کرنے میں مدد کرتا ہے۔ان مسائل کا پتہ لگانے اور ان کا ازالہ کرنے سے ، ای ڈی اے مزید تجزیہ کے ل the اعداد و شمار کے معیار اور وشوسنییتا کو بہتر بنانے میں معاون ہے۔یہ اعداد و شمار میں ممکنہ ارتباط ، انحصار ، یا گروہ بندی کی نشاندہی کرنے میں مدد کرتا ہے ، جو مزید تجزیہ اور ماڈلنگ کے فیصلوں کی رہنمائی کرسکتا ہے۔ فیچر کا انتخاب اور انجینئرنگ: ای ڈی اے تجزیہ کے ل relevant متعلقہ خصوصیات یا متغیرات کے انتخاب میں مدد کرتا ہے۔متغیر کے تعلقات اور تقسیم کو سمجھنے سے ، ای ڈی اے فیچر انجینئرنگ کے عمل کی رہنمائی کرسکتا ہے ، جہاں موجودہ چیزوں سے نئی معنی خیز خصوصیات پیدا کی جاتی ہیں۔ insights اور مفروضہ نسل: EDA اکثر تحقیقی سوالات اور مفروضوں کی تشکیل کا باعث بنتا ہے۔اعداد و شمار کو ضعف اور اعدادوشمار سے تلاش کرکے ، تجزیہ کار اعداد و شمار میں تعلقات یا نمونوں کے بارے میں نظریات اور مفروضے پیدا کرسکتے ہیں ، جن کی مزید جانچ اور توثیق کی جاسکتی ہے۔یہ ڈیٹا کے مسائل کی نشاندہی کرنے ، ڈیٹا کی خصوصیات کو سمجھنے ، نمونوں اور تعلقات کو دریافت کرنے اور مزید تفتیش کے ل ins بصیرت پیدا کرنے میں مدد کرتا ہے۔ای ڈی اے ڈیٹا کے تجزیہ کاروں کو باخبر فیصلے کرنے اور اعداد و شمار سے معنی خیز بصیرت حاصل کرنے کے قابل بناتا ہے ، جس سے بالآخر زیادہ درست اور قابل اعتماد نتائج برآمد ہوتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر فیڈ بیک ڈیٹا ہوتا ہے۔قدرتی زبان پروسیسنگ کی تکنیک کا استعمال کرتے ہوئے آپ آراء کے عنوانات کا تجزیہ اور درجہ بندی کیسے کریں گے؟",
        "Answer": "ازگر میں ریسرچ ڈیٹا انیلیسیس (ای ڈی اے) انجام دینے کے ل you ، آپ کو عام طور پر متعدد لائبریریوں کو درآمد کرنے کی ضرورت ہوتی ہے جو ڈیٹا میں ہیرا پھیری ، تصور اور اعداد و شمار کے تجزیے کے ل various مختلف افعال اور اوزار مہیا کرتے ہیں۔ازگر میں ای ڈی اے کے لئے عام طور پر استعمال ہونے والی لائبریریوں میں شامل ہیں: پانڈاس: ڈیٹا فریم اور سیریز جیسے ڈیٹا ڈھانچے کے ساتھ کام کرنے کے لئے پانڈاس لائبریری درآمد کریں ، جو ڈیٹا تجزیہ کے کاموں میں بڑے پیمانے پر استعمال ہوتے ہیں۔پانڈاس ڈیٹا کی ہیرا پھیری ، صفائی ستھرائی ، اور تبدیلی کے لئے فنکشنلیاں مہیا کرتا ہے۔ پیتھون کوپی کوڈیمپورٹ پانڈاس کو بطور PDNUMPY: عددی صفوں کے ساتھ کام کرنے کے لئے نیپی لائبریری درآمد کریں اور اعداد و شمار پر ریاضی کی کارروائیوں کو انجام دیں۔موثر ڈیٹا پروسیسنگ کے لئے پانڈوں کے ساتھ اکثر نمی کا استعمال کیا جاتا ہے۔میٹپلوٹلیب مختلف قسم کے پلاٹنگ افعال اور تخصیص کے اختیارات فراہم کرتا ہے۔سمندری بورن ضعف دلکش اور معلوماتی پلاٹ بنانے کے لئے اعلی سطحی افعال مہیا کرتا ہے۔یہ قیاس آرائیوں کی جانچ ، تقسیم ، اور زیادہ سے زیادہ کے لئے اعداد و شمار کے افعال اور ٹولز کی ایک رینج پیش کرتا ہے۔پلاٹ سے آپ کو انٹرایکٹو پلاٹ ، چارٹ ، اور ڈیش بورڈز بنانے کی اجازت دیتا ہے جو ویب ایپلی کیشنز میں شیئر اور سرایت کرسکتے ہیں۔اسکیکیٹ لرن ڈیٹا پری پروسیسنگ ، فیچر نکالنے ، اور نگرانی/غیر نگرانی سیکھنے کے لئے افعال مہیا کرتا ہے۔اپنے تجزیہ کے مخصوص کاموں اور ضروریات پر منحصر ہے ، آپ کو اضافی لائبریریوں یا ماڈیولز کو درآمد کرنے کی ضرورت پڑسکتی ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں آن لائن گیمنگ ڈیٹا ہوتا ہے۔آپ کھلاڑیوں کے طرز عمل اور منگنی میٹرکس کا استعمال کرتے ہوئے پلیئر من گھڑت کا تجزیہ اور پیش گوئی کریں گے؟",
        "Answer": "ایکسپلوریٹری ڈیٹا انیلیسیس (ای ڈی اے) کے لئے ڈیٹاسیٹ کو پانڈاس ڈیٹا فریم میں لوڈ کرنے کے ل you ، آپ پانڈوں کے ذریعہ فراہم کردہ مختلف افعال استعمال کرسکتے ہیں۔فنکشن کا انتخاب آپ کے ڈیٹاسیٹ کی فائل فارمیٹ پر منحصر ہے۔ڈیٹاسیٹس کی مختلف اقسام کو لوڈ کرنے کے کچھ عام طریقے یہ ہیں: CSV (کوما سے الگ شدہ اقدار) فائل: CSV فائل کو ڈیٹا فیم میں لوڈ کرنے کے لئے READ_CSV () فنکشن کا استعمال کریں۔.read_csv ('path_to_file.csv') ایکسل فائل: ایک ایکسیل فائل کو ڈیٹا فیم میں ایکسل فائل کو لوڈ کرنے کے لئے پڑھیں_سسل () فنکشن کا استعمال کریں۔JSON (جاوا اسکرپٹ آبجیکٹ نوٹیشن) فائل: JSON فائل کو ڈیٹا فیم میں لوڈ کرنے کے لئے ریڈ_جسن () فنکشن کا استعمال کریں۔READ_SQL () ایک SQL ڈیٹا بیس کے استفسار سے ڈیٹا کو ڈیٹا فریم میں لوڈ کرنے کے لئے فنکشن۔'ٹیبل_ نام'ڈف = PD.READ_SQL (استفسار ، کون) سے منتخب کریں * دیگر فائل فارمیٹس: پانڈاس مختلف دیگر فائل فارمیٹس جیسے ایچ ڈی ایف ، پارکیٹ ، پنکھ وغیرہ سے ڈیٹا لوڈ کرنے کی حمایت کرتا ہے۔ ڈیٹا کو لوڈ کرنے کے لئے مخصوص افعال کے لئے پانڈاس دستاویزات کا حوالہ دیں۔ان فارمیٹوں سے۔ ڈیٹاسیٹ کو ڈیٹا فریم میں لوڈ کرنے کے بعد ، آپ ای ڈی اے کے مختلف کام انجام دے سکتے ہیں ، جیسے اعداد و شمار کا معائنہ کرنا ، کالم کے اعدادوشمار کی کھوج ، ڈیٹا کو تصور کرنا ، اور بہت کچھ۔"
    },
    {
        "Question": "یقینا!امیدوار کے ریسرچ ڈیٹا تجزیہ (ای ڈی اے) کی مہارت کو جانچنے کے لئے 100 مزید تخلیقی سوالات یہ ہیں:",
        "Answer": "پانڈوں میں ڈیٹا فریم کے طول و عرض (قطار اور کالم) کی جانچ پڑتال کے ل you ، آپ شکل وصف کو استعمال کرسکتے ہیں۔شکل وصف ایک ٹپل لوٹاتا ہے جو فارم (قطاریں ، کالم) میں ڈیٹا فریم کے طول و عرض کی نمائندگی کرتا ہے۔یہاں ایک مثال یہ ہے: PD## AS PD# کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس ایک نمونہ بنائیں ڈیٹافریمیٹا = {'نام': ['جان' ، 'ایما' ، 'پیٹر'] ، 'عمر': [25 ، 28 ، 30] ، 'شہر':۔ڈی ایف میں 3 قطاریں اور 3 کالم ہیں۔آؤٹ پٹ (3 ، 3) اشارہ کرتا ہے کہ ڈیٹا فریم میں 3 قطاریں اور 3 کالم ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں سوشل میڈیا صارف کا ڈیٹا ہوتا ہے۔صارف کے طرز عمل اور منگنی میٹرکس میں نمونوں کا استعمال کرتے ہوئے آپ جعلی یا بوٹ اکاؤنٹس کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "پانڈاس ایک مشہور اوپن سورس ازگر لائبریری ہے جو ڈیٹا میں ہیرا پھیری اور تجزیہ کے لئے استعمال ہوتی ہے۔یہ ساختی اعداد و شمار ، جیسے ٹیبلر ڈیٹا ، ٹائم سیریز ، اور بہت کچھ کے ساتھ موثر انداز میں کام کرنے کے لئے ڈیٹا ڈھانچے اور افعال فراہم کرتا ہے۔پانڈاس نمی کے سب سے اوپر تعمیر کیا گیا ہے ، جو عددی کمپیوٹنگ کے لئے ایک اور طاقتور ازگر لائبریری ہے۔ یہاں پانڈوں کی کچھ اہم خصوصیات ہیں: ڈیٹا ڈھانچے: پانڈاس سیریز اور ڈیٹا فریم نامی دو بنیادی ڈیٹا ڈھانچے متعارف کراتا ہے۔ایک سلسلہ ایک جہتی لیبل لگا ہوا سرنی ہے جو کسی بھی ڈیٹا کی قسم کو تھامنے کے قابل ہے ، اور ڈیٹا فریم دو جہتی لیبل لگا ہوا ڈیٹا ڈھانچہ ہے جس میں ممکنہ طور پر مختلف اقسام کے کالم ہیں۔یہ ڈھانچے اعداد و شمار کو ذخیرہ کرنے ، جوڑ توڑ اور تجزیہ کرنے میں آسان بناتے ہیں۔ ڈیٹا ہیرا پھیری: پانڈاس ڈیٹا کو جوڑ توڑ کرنے کے لئے وسیع پیمانے پر افعال اور طریقوں کو فراہم کرتا ہے۔آپ ان افعال کا استعمال کرتے ہوئے اپنے ڈیٹا پر مختلف آپریشنز کو فلٹر ، ترتیب ، مجموعی ، نئی شکل دے سکتے ہیں اور انجام دے سکتے ہیں۔یہ ایک سے زیادہ ڈیٹا فریموں پر ضم ، شامل ہونے ، اور محور سازی کی بھی اجازت دیتا ہے۔ ڈیٹا کی صفائی: پانڈاس گمشدہ ڈیٹا کو سنبھالنے اور ڈیٹا کی صفائی کے کاموں کو انجام دینے کے ل tools ٹولز پیش کرتا ہے۔آپ گمشدہ اقدار کا پتہ لگاسکتے ہیں اور ان کو دور کرسکتے ہیں ، ان کو مناسب اقدار سے تبدیل کرسکتے ہیں ، یا مختلف طریقوں کا استعمال کرتے ہوئے گمشدہ ڈیٹا کو انٹرپولیٹ کرسکتے ہیں۔ ڈیٹا ان پٹ/آؤٹ پٹ: پانڈاس مختلف فائل فارمیٹس ، جیسے سی ایس وی ، ایکسل ، ایس کیو ایل ڈیٹا بیس ، اور سے ڈیٹا پڑھنے اور لکھنے کی حمایت کرتا ہے۔مزید.یہ مختلف ذرائع سے ڈیٹا درآمد کرنے ، اس پر کارروائی کرنے اور نتائج برآمد کرنے کے افعال مہیا کرتا ہے۔ ٹائم سیریز کا تجزیہ: پانڈوں میں ٹائم سیریز کے اعداد و شمار کے ساتھ کام کرنے کی وسیع صلاحیتیں ہیں۔یہ تاریخ/وقت کی اشاریہ سازی ، دوبارہ ترتیب دینے ، تعدد تبادلوں ، وقت کی تبدیلی اور بہت کچھ کے لئے فعالیت فراہم کرتا ہے۔یہ خصوصیات خاص طور پر وقت پر منحصر اعداد و شمار کا تجزیہ کرنے میں مفید ہیں۔ دیگر لائبریریوں کے ساتھ انضمام: پانڈاس دیگر مشہور ازگر لائبریریوں ، جیسے نومی ، میٹپلوٹلیب اور ایس سی آئی پی آئی کے ساتھ اچھی طرح سے مربوط ہوتا ہے۔یہ بغیر کسی رکاوٹ کے انضمام اور باہمی تعاون کی اجازت دیتا ہے ، جس سے آپ کو اپنے ڈیٹا تجزیہ میں مختلف لائبریریوں کی طاقت کا فائدہ اٹھانے کے قابل بناتا ہے۔یہ ڈیٹا ہیرا پھیری اور تجزیہ کے لئے ایک طاقتور اور موثر فریم ورک مہیا کرتا ہے ، جس سے یہ بہت سے ڈیٹا پیشہ ور افراد اور محققین کے لئے انتخاب کا انتخاب ہوتا ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر فیڈ بیک ڈیٹا ہوتا ہے۔مصنوعات کی تازہ کاریوں یا مارکیٹنگ کی مہمات کے اثرات کی نشاندہی کرنے کے ل time آپ وقت کے ساتھ جذبات کے رجحانات کا تجزیہ اور تصور کیسے کریں گے؟",
        "Answer": "پانڈاس ایک طاقتور اوپن سورس ازگر لائبریری ہے جو ڈیٹا تجزیہ اور ہیرا پھیری میں بڑے پیمانے پر استعمال ہوتی ہے۔یہ استعمال میں آسانی سے ڈیٹا ڈھانچے اور ڈیٹا تجزیہ کے ٹولز مہیا کرتا ہے ، جس سے یہ ساختہ اعداد و شمار کے ساتھ کام کرنے کے لئے ایک مقبول انتخاب ہوتا ہے۔ یہاں کچھ وجوہات ہیں کہ پانڈوں کو ڈیٹا تجزیہ میں وسیع پیمانے پر استعمال کیا جاتا ہے: ڈیٹا ڈھانچے: پانڈاس دو اہم ڈیٹا ڈھانچے ، سیریز اور متعارف کراتے ہیں۔ڈیٹا فریم۔ایک سلسلہ ایک جہتی لیبل لگا ہوا صف ہے جو کسی بھی ڈیٹا کی قسم کا انعقاد کرسکتا ہے ، جبکہ ڈیٹا فریم دو جہتی لیبل لگا ہوا ڈیٹا ڈھانچہ ہے جس میں ممکنہ طور پر مختلف اقسام کے کالم ہیں۔یہ ڈھانچے ڈیٹا کو ذخیرہ کرنے ، جوڑ توڑ اور تجزیہ کرنے کا ایک آسان اور موثر طریقہ مہیا کرتے ہیں۔ ڈیٹا ہیرا پھیری: پانڈاس ڈیٹا ہیرا پھیری کے لئے وسیع پیمانے پر افعال اور طریقوں کی پیش کش کرتا ہے۔آپ سادہ اور بدیہی نحو کا استعمال کرتے ہوئے فلٹر ، ترتیب ، گروپ ، مجموعی ، محور ، اور اعداد و شمار کو تبدیل کرسکتے ہیں۔یہ کاروائیاں آپ کو تجزیہ کے ل data ڈیٹا صاف کرنے ، تبدیل کرنے اور تیار کرنے کی اجازت دیتی ہیں۔ ڈیٹا ہینڈلنگ کو یاد کرتے ہوئے: حقیقی دنیا کے اعداد و شمار میں اکثر گمشدہ اقدار شامل ہوتی ہیں۔پانڈاس گمشدہ ڈیٹا کو سنبھالنے کے ل tools ٹولز مہیا کرتا ہے ، جس سے آپ مختلف حکمت عملیوں کی بنیاد پر گمشدہ اقدار کا پتہ لگانے ، ہٹانے یا بھرنے کی اجازت دیتے ہیں۔اس لچک سے یہ یقینی بنانے میں مدد ملتی ہے کہ گمشدہ ڈیٹا تجزیہ کے عمل میں مداخلت نہیں کرتا ہے۔ ڈیٹا انضمام: پانڈاس بغیر کسی رکاوٹ کے بغیر ازدواجی طور پر دیگر لائبریریوں کے ساتھ مربوط ہوتا ہے ، جیسے ازگر ڈیٹا ماحولیاتی نظام ، جیسے نمی ، میٹپلوٹلیب اور اسکیپی۔یہ انضمام آپ کو متعدد لائبریریوں کی طاقت کو یکجا کرنے کی اجازت دیتا ہے تاکہ اعداد و شمار کے تجزیہ کے پیچیدہ کاموں کو موثر انداز میں انجام دیا جاسکے۔مثال کے طور پر ، آپ آسانی سے نمی کا استعمال کرتے ہوئے ریاضی کی کارروائیوں کا اطلاق کرسکتے ہیں ، میٹپلوٹلیب کا استعمال کرتے ہوئے ڈیٹا کو تصور کرسکتے ہیں ، اور پانڈوں کے ساتھ ساتھ ایس سی آئی پی وائی کا استعمال کرتے ہوئے اعداد و شمار کا تجزیہ کرسکتے ہیں۔ ٹائم سیریز تجزیہ: پانڈاس کو ٹائم سیریز کے اعداد و شمار کے تجزیے کے لئے وسیع پیمانے پر مدد حاصل ہے۔یہ وقت پر منحصر اعداد و شمار کو سنبھالنے کے لئے خصوصی اعداد و شمار کے ڈھانچے اور افعال مہیا کرتا ہے ، جس میں تاریخ/وقت کی اشاریہ سازی ، دوبارہ ترتیب دینے ، وقت کی شفٹنگ ، اور تعدد کی تبدیلی شامل ہے۔یہ خصوصیات دنیاوی اجزاء کے ساتھ اعداد و شمار کا تجزیہ کرنے کے لئے خاص طور پر قابل قدر ہیں۔ ڈیٹا I/O: پانڈاس مختلف فائل فارمیٹس سے/پڑھنے اور لکھنے کی سہولت فراہم کرتا ہے ، بشمول CSV ، ایکسل ، ایس کیو ایل ڈیٹا بیس ، اور بہت کچھ۔یہ مختلف ذرائع سے ڈیٹا درآمد کرنے ، اس پر کارروائی کرنے اور نتائج برآمد کرنے کے لئے آسان افعال فراہم کرتا ہے۔اس لچک سے مختلف فائل فارمیٹس کے اعداد و شمار کے ساتھ کام کرنا آسان ہوجاتا ہے اور بیرونی اعداد و شمار کے ذرائع کے ساتھ مربوط ہوتا ہے۔ اوور ، پانڈاس موثر اعداد و شمار کے ڈھانچے ، طاقتور ہیرا پھیری کی صلاحیتوں ، اور دیگر لائبریریوں کے ساتھ ہموار انضمام کی فراہمی کے ذریعہ ڈیٹا تجزیہ کے ورک فلو کو آسان اور تیز کرتا ہے۔اس کے صارف دوست انٹرفیس اور وسیع فعالیت نے اسے ازگر میں ڈیٹا تجزیہ کے کاموں کے لئے جانے والی لائبریری بنا دیا ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں آن لائن گیمنگ ڈیٹا ہوتا ہے۔آپ میچ میکنگ الگورتھم کو بہتر بنانے کے لئے کھلاڑیوں کی مہارت کی سطح اور کارکردگی کے رجحانات کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "ازگر میں پانڈاس لائبریری درآمد کرنے کے ل you ، آپ درآمد کی مطلوبہ الفاظ کو استعمال کرسکتے ہیں جس کے بعد لائبریری کا نام \"پانڈاس\" ہے۔یہ نحو ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاشوور ، یہ ایک عام رواج ہے کہ پانڈوں کو عرف کے ساتھ درآمد کیا جائے تاکہ آپ کے کوڈ میں لائبریری کا حوالہ دینا آسان ہوجائے۔پانڈوں کے لئے استعمال ہونے والا سب سے عام عرف \"PD\" ہے۔یہاں آپ عرف کے ساتھ پانڈوں کو درآمد کرسکتے ہیں: پائیتھون کوپی کوڈیمپورٹ پانڈاس اس درآمدی بیان کے ساتھ ، آپ \"PD\" عرف کا استعمال کرتے ہوئے پانڈاس افعال اور کلاسوں تک رسائی حاصل کرسکتے ہیں۔مثال کے طور پر ، ڈیٹا فریم بنانے کے ل you ، آپ PD.Dataframe () استعمال کرسکتے ہیں ، اور CSV فائل کو پڑھنے کے ل you ، آپ PD.read_csv () استعمال کرسکتے ہیں۔ یہ نوٹ کرنا ضروری ہے کہ آپ کو آپ کے سامنے آپ کے ازگر ماحول میں پانڈاس انسٹال کرنے کی ضرورت ہے۔اسے درآمد کرسکتا ہے۔آپ اپنے ٹرمینل یا کمانڈ پرامپٹ میں مندرجہ ذیل کمانڈ چلا کر PIP پیکیج مینیجر کا استعمال کرتے ہوئے پانڈوں کو انسٹال کرسکتے ہیں: کاپی کوڈپپ انسٹال پانڈاس پانڈا انسٹال ہے ، آپ اسے اپنے ازگر اسکرپٹ یا انٹرایکٹو سیشن میں درآمد کرسکتے ہیں اور ڈیٹا تجزیہ کے کاموں کے لئے اس کی فعالیت کو استعمال کرنا شروع کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا گیا ہے جس میں کسٹمر کی خریداری کی تاریخ ہے۔آپ محصول کو بڑھانے کے ل cross فروخت اور بڑھتی ہوئی مواقع کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "پانڈوں میں ، آپ pd.dataframe () فنکشن کا استعمال کرتے ہوئے لغت سے ڈیٹا فریم تشکیل دے سکتے ہیں۔لغت کی چابیاں کالم کے ناموں کے طور پر استعمال ہوں گی ، اور اقدار کو متعلقہ کالموں کے اعداد و شمار کے طور پر استعمال کیا جائے گا۔یہاں ایک مثال یہ ہے: Pdthoncopy کوڈیمپورٹ پانڈاس بطور PD# ایک ڈکشنری ڈیٹا بنائیں = {'نام': ['جان' ، 'ایملی' ، 'ریان' ، 'لنڈا'] ، 'عمر': [28 ، 35 ، 42 ، 50].کوڈ کا نام عمر سٹی 0 جان 28 نیو یارک 1 ایملی 35 شکاگو 2 ریان 42 لاس اینجلس 3 لنڈا 50 سان فرانسسکوئن اس مثال کے طور پر ، لغت کے اعداد و شمار میں تین چابیاں ('نام' ، 'عمر' ، 'شہر') اور ان کی متعلقہ اقدار شامل ہیں۔اس کے بعد pd.dataframe () فنکشن کو لغت سے ڈیٹا فریم DF بنانے کے لئے استعمال کیا جاتا ہے۔ ڈکشنری میں ایک کلید ڈیٹا فریم میں ایک کالم بن جاتی ہے ، اور اس سے وابستہ اقدار ان کالموں میں ڈیٹا بن جاتی ہیں۔ڈیٹا فریم میں کالموں کا آرڈر لغت میں چابیاں کے ترتیب سے مماثل ہوگا۔ہر کالم کی اقدار کو ان کی اشاریہ پوزیشن کی بنیاد پر منسلک کیا جائے گا۔ آپ اپنے ڈیٹا پر ڈیٹا تجزیہ کے کاموں کو انجام دینے کے لئے مختلف پانڈاس افعال اور طریقوں کا استعمال کرتے ہوئے ڈیٹا فریم تک رسائی حاصل کرسکتے ہیں اور ان میں ہیرا پھیری کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں مریضوں کی صحت کے ریکارڈ موجود ہیں۔صحت کی دیکھ بھال کے معیار کو بہتر بنانے کے ل you آپ طبی علاج اور نتائج کے نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "پانڈوں میں ڈیٹا فریم کی شکل کی جانچ پڑتال کے ل you ، آپ شکل وصف کو استعمال کرسکتے ہیں۔شکل وصف ایک ٹپل لوٹاتا ہے جو ڈیٹا فریم کے طول و عرض کی نمائندگی کرتا ہے۔ٹپل کا پہلا عنصر قطاروں کی تعداد کی نمائندگی کرتا ہے ، اور دوسرا عنصر کالموں کی تعداد کی نمائندگی کرتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان' ، 'لنڈا'] ، 'عمر': [28 ، 35 ، 42 ، 50].(4 ، 3) اس مثال میں ، شکل وصف کو ڈیٹا فریم ڈی ایف پر کہا جاتا ہے۔آؤٹ پٹ (4 ، 3) اس بات کی نشاندہی کرتا ہے کہ ڈیٹا فریم میں 4 قطاریں اور 3 کالم ہیں۔ ڈیٹا فریم کی شکل کی جانچ پڑتال کے ذریعہ ، آپ جلدی سے اس کے سائز اور طول و عرض کا تعین کرسکتے ہیں ، جو آپ کے ڈیٹا کی ساخت اور دائرہ کار کو سمجھنے کے لئے مفید ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں مالی لین دین کا ڈیٹا ہوتا ہے۔نیٹ ورک تجزیہ کی تکنیکوں کا استعمال کرتے ہوئے آپ جعلی نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "پانڈوں میں ڈیٹا فریم کی پہلی N قطاروں تک رسائی حاصل کرنے کے ل you ، آپ ہیڈ () کا طریقہ استعمال کرسکتے ہیں۔ہیڈ () کا طریقہ ایک نیا ڈیٹا فریم واپس کرتا ہے جس میں اصل ڈیٹا فریم کے آغاز سے قطاروں کی مخصوص تعداد پر مشتمل ہے۔پہلے سے طے شدہ طور پر ، اگر کوئی پیرامیٹر فراہم نہیں کیا جاتا ہے تو یہ پہلی 5 قطاریں لوٹاتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT پانڈاس PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان' ، 'لنڈا' ، 'ڈیوڈ'] ، 'عمر': [28 ، 35 ،42 ، 50 ، 45] ، 'شہر': ['نیویارک' ، 'شکاگو' ، 'لاس اینجلس' ، 'سان فرانسسکو' ، 'سیئٹل' ، 'سیئٹل']} df = pd.dataframe (ڈیٹا)# پہلے 3 Rowsfirst_three_rows تک رسائی حاصل کریں= df.head (3)# رزلٹ پرنٹ (First_there_rows) آؤٹ پٹ ڈسپلے کریں: SQLCOPY کوڈ نام کی عمر سٹی 0 جان 28 نیو یارک 1 ایملی 35 شکاگو 2 ریان 42 لاس اینجنسن اس مثال کے طور پر ، ہیڈ (3) کا طریقہ ڈیٹا فریم ڈی ایف پر بلایا گیا ہے تاکہ اسے بازیافت کیا جاسکے۔پہلی 3 قطاریں۔نتیجہ فرسٹ_تھری_روز ڈیٹا فریم میں محفوظ ہے۔فرسٹ_تھری_رو پرنٹنگ مطلوبہ آؤٹ پٹ کو دکھاتا ہے۔ آپ کسی بھی مثبت عدد این کی وضاحت کرسکتے ہیں تاکہ ڈیٹا فریم کی پہلی این قطاروں تک رسائی حاصل کرنے کے لئے سر () کے طریقہ کار کی دلیل کے طور پر۔اس سے آپ کو اعداد و شمار کے سبسیٹ کو جلدی سے جانچنے اور اس کی ساخت اور اقدار کا احساس حاصل کرنے کی سہولت ملتی ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں ملازمت کے درخواست دہندگان کا ڈیٹا ہوتا ہے۔آپ کس طرح ان عوامل کا تجزیہ اور شناخت کریں گے جو بھرتی کی حکمت عملیوں کو بہتر بنانے کے لئے ملازمت کی کامیاب جگہوں میں معاون ہیں؟",
        "Answer": "پانڈوں میں ڈیٹا فریم سے مخصوص کالموں کو منتخب کرنے کے ل you ، آپ کالم کے ناموں یا LOC یا ILOC رسار کے ساتھ انڈیکسنگ استعمال کرسکتے ہیں۔یہاں کچھ نقطہ نظر ہیں: کالم کے ناموں کے ساتھ اشاریہ سازی: آپ مربع بریکٹ [] استعمال کرسکتے ہیں اور انڈیکس کے طور پر کالم کے ناموں کی فہرست فراہم کرسکتے ہیں۔یہ صرف منتخب کالموں کے ساتھ ایک نیا ڈیٹا فریم واپس کرے گا۔یہاں ایک مثال یہ ہے: Pdthoncopy کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'شہر': [[[شہر ': [[28 ، 35 ، 42]'نیو یارک' ، 'شکاگو' ، 'لاس اینجلس']} df = pd.dataframe (ڈیٹا)# مخصوص کالم سلیکٹڈ_کولمز = ڈی ایف [['نام' ، 'شہر']]# کو منتخب کریں (منتخب_کولمز) آؤٹ پٹ ڈسپلے کریں: SQLCOPY: SQLCOPYکوڈ کا نام سٹی 0 جان نیو یارک 1 ایملی شکاگو 2 ریان لاس اینجلیسیسنگ ایل او سی ایکسیسر: لوک ایکسیسر لیبل پر مبنی انڈیکسنگ کی اجازت دیتا ہے ، جہاں آپ دونوں قطار اور کالم لیبل کی وضاحت کرسکتے ہیں۔مخصوص کالموں کو منتخب کرنے کے ل you ، آپ بڑی آنت کے ساتھ LOC استعمال کرسکتے ہیں: تمام قطاریں منتخب کرنے اور کالم کے ناموں کو بطور فہرست بیان کرنے کے لئے۔یہاں ایک مثال یہ ہے: Pdthoncopy کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'شہر': [[[شہر ': [[28 ، 35 ، 42]'نیو یارک' ، 'شکاگو' ، 'لاس اینجلس']} df = pd.dataframe (ڈیٹا)# locedected_colums = df.loc [: ، ['نام' ، 'شہر'] کا استعمال کرتے ہوئے مخصوص کالم منتخب کریں۔.مخصوص کالموں کو منتخب کرنے کے ل you ، آپ ILOC کو ایک بڑی آنت کے ساتھ استعمال کرسکتے ہیں: تمام قطاریں منتخب کرنے اور کالم پوزیشنوں کو عدد کی فہرست کے طور پر بیان کرنے کے لئے۔یہاں ایک مثال یہ ہے: Pdthoncopy کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'شہر': [[[شہر ': [[28 ، 35 ، 42]'نیو یارک' ، 'شکاگو' ، 'لاس اینجلس']} df = pd.dataframe (ڈیٹا)# ilocselectect_colums = df.iloc کا استعمال کرتے ہوئے مخصوص کالم منتخب کریں [: ، [0 ، 2]]# نتائج پرنٹ (منتخب_کالم) آؤٹ پٹ ڈسپلے کریں: SQLCOPY کوڈ کا نام سٹی 0 جان نیو یارک 1 ایملی شکاگو 2 ریان لاس اینجلیسن تینوں نقطہ نظر ، آپ ڈیٹا فریم سے مخصوص کالموں کو منتخب کرنے کے لئے کالم ناموں یا کالم پوزیشنوں کی فہرست فراہم کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں سوشل میڈیا پر اثر انداز ہوتا ہے۔آپ ان کے تاریخی اعداد و شمار کی بنیاد پر اثر و رسوخ کی کارکردگی کی پیمائش کا تجزیہ اور پیش گوئی کیسے کریں گے؟",
        "Answer": "پانڈوں کی حالت پر مبنی ڈیٹا فریم میں قطاروں کو فلٹر کرنے کے ل you ، آپ بولین انڈیکسنگ کا استعمال کرسکتے ہیں۔بولین انڈیکسنگ آپ کو بولین ماسک بنانے کی اجازت دیتی ہے جو ایک مخصوص حالت کی بنیاد پر قطاریں منتخب کرتی ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان' ، 'لنڈا'] ، 'عمر': [28 ، 35 ، 42 ، 50].> 30]# فلٹرڈ ڈیٹا فیم پرنٹ (فلٹرڈ_ ڈی ایف) آؤٹ پٹ ڈسپلے کریں: کاپی کوڈ نام کی عمر سٹی 1 ایملی 35 شکاگو 2 ریان 42 لاس اینجلس 3 لنڈا 50 سان فرانسسکوئن اس مثال کے طور پر ، حالت ڈی ایف ['عمر']> 30 ایک بولین ماسک بناتا ہے جو سچائی کا اندازہ کرتا ہے۔قطاروں کے لئے جہاں 'عمر' کالم کی قیمت 30 سے زیادہ ہے اور دوسری صورت میں غلط ہے۔مربع بریکٹ کے اندر اس بولین ماسک کا استعمال کرتے ہوئے [] ڈیٹا فریم کو فلٹر کرتا ہے ، صرف وہ قطاریں واپس کرتے ہیں جو حالت کو پورا کرتی ہیں۔ آپ مختلف معیاروں کی بنیاد پر قطار کو فلٹر کرنے کے لئے حالت کو اپنی مرضی کے مطابق بنا سکتے ہیں۔مثال کے طور پر ، آپ ڈیٹا فریم میں دوسرے کالموں کی بنیاد پر متعدد شرائط یا فلٹر قطار کو یکجا کرنے کے لئے منطقی آپریٹرز (اور کے لئے اور ، |شرائط ، آپ کو آسانی سے پیچیدہ ڈیٹا فلٹرنگ کے کام انجام دینے کی اجازت دیتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر کی شکایت کا ڈیٹا ہوتا ہے۔مصنوعات یا خدمات میں بہتری کو ترجیح دینے کے ل you آپ عام درد کے نکات کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "پانڈوں میں ڈیٹا فریم میں کالموں کا نام تبدیل کرنے کے ل you ، آپ نام () کا طریقہ استعمال کرسکتے ہیں۔نام تبدیل کرنے کا طریقہ آپ کو ایک لغت فراہم کرنے کی اجازت دیتا ہے جہاں کلیدیں موجودہ کالم کے نام ہیں اور اقدار نئے کالم کے نام ہیں۔یہاں ایک مثال یہ ہے: Pdthoncopy کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'شہر': [[[شہر ': [[28 ، 35 ، 42]'نیو یارک' ، 'شکاگو' ، 'لاس اینجلس']} df = pd.dataframe (ڈیٹا)# نام کالمزنیو_کولوم_نیمز = {'نام': 'مکمل نام' ، 'عمر': 'عمر' ، 'شہر': 'مقام '} df = df.rename (کالم = new_column_names)# نامزد کالم پرنٹ (ڈی ایف) آؤٹ پٹ کے ساتھ ڈیٹا فریم ڈسپلے کریں: SQLCOPY کوڈ مکمل نام عمر کی عمر 0کالم پیرامیٹر کے ساتھ نئے_ کالم_ ناموں کی لغت کے ساتھ ڈیٹا فریم ڈی ایف پر بلایا جاتا ہے۔لغت موجودہ کالم کے ناموں کی میپنگ کو مطلوبہ نئے کالم کے ناموں کی وضاحت کرتی ہے۔ نام () کے طریقہ کار کا نتیجہ ڈیٹا فریم (DF = df.rename (کالم = new_column_names)) پر تفویض کرتے ہوئے ، اصل ڈیٹا فریم کے ساتھ ترمیم کی گئی ہے۔نئے کالم کے نام۔ آپ اپنے مطلوبہ کالم نام کی تبدیلیوں سے ملنے کے لئے نئے_ کالم_ نام کی لغت میں ترمیم کرسکتے ہیں۔نوٹ کریں کہ آپ کو صرف ان کالموں کو شامل کرنے کی ضرورت ہے جن کا نام آپ لغت میں نامزد کرنا چاہتے ہیں ، کسی بھی کالموں کو چھوڑ کر جسے آپ تبدیل کرنا چاہتے ہیں۔ نام تبدیل کرنے کے طریقہ کار کا استعمال کرتے ہوئے ، آپ کالموں کو آسانی سے کسی ڈیٹا فریم میں نام تبدیل کرسکتے ہیں تاکہ ان کو مزید وضاحتی یا سیدھ میں لائیں۔اپنے تجزیہ کی ضروریات کے ساتھ۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں آن لائن پروڈکٹ کے جائزے ہوتے ہیں۔مصنوعات کی ترقی کی رہنمائی کے ل you آپ کس طرح بااثر مصنوعات کی خصوصیات اور جذبات کا تجزیہ اور شناخت کریں گے؟",
        "Answer": "پانڈوں میں ڈیٹا فریم سے کالم چھوڑنے کے ل you ، آپ ڈراپ () کا طریقہ استعمال کرسکتے ہیں۔ڈراپ () کا طریقہ آپ کو ان کے ناموں یا پوزیشنوں کی وضاحت کرکے ایک یا زیادہ کالموں کو ہٹانے کی اجازت دیتا ہے۔یہاں کچھ نقطہ نظر ہیں: نام کے لحاظ سے کالم ڈراپ کریں: آپ متعلقہ کالموں کو ہٹانے کے لئے ڈراپ () کے طریقہ کار میں ایک ہی کالم کا نام یا کالم کے ناموں کی فہرست فراہم کرسکتے ہیں۔یہاں ایک مثال یہ ہے: Pdthoncopy کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'شہر': [[[شہر ': [[28 ، 35 ، 42]'نیو یارک' ، 'شکاگو' ، 'لاس اینجلس']} df = pd.dataframe (ڈیٹا)# ایک ہی کالم ڈی ایف = df.drop ('عمر' ، محور = 1)# ڈراپ ایک سے زیادہ کالم ایس ڈی ایف = df.drop (ڈراپ کریں (۔کالم کے نام 'عمر' ، 'نام' ، اور 'سٹی' کے ساتھ ڈیٹا فریم ڈی ایف پر۔محور = 1 پیرامیٹر یہ واضح کرتا ہے کہ کالم گرائے جائیں۔نتیجے میں ڈیٹا فریم میں کوئی کالم نہیں ہوتا ہے۔یہاں ایک مثال یہ ہے: Pdthoncopy کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'شہر': [[[شہر ': [[28 ، 35 ، 42]'نیو یارک' ، 'شکاگو' ، 'لاس اینجلس']} df = pd.dataframe (ڈیٹا)# کالم بذریعہ پوزیشن ڈی ایف = df.drop (df.columons [[1 ، 2]] ، محور = 1)# ڈسپلےنتیجے میں ڈیٹا فریم پرنٹ (ڈی ایف) آؤٹ پٹ: کاپی کوڈ کا نام 0 جان 1 ایملی 2 ریانین اس مثال کے طور پر ، ڈراپ () کا طریقہ ڈیٹا فریم ڈی ایف پر کال کالم پیرامیٹر کے ساتھ کیا جاتا ہے جس میں DF.COLLUMS [[1 ، 2]] پر سیٹ کیا جاتا ہے۔یہ کالم 1 اور 2 (کالم 'عمر' اور 'شہر') پر کالموں کو گراتا ہے۔نتیجے میں ڈیٹا فریم صرف 'نام' کالم برقرار رکھتا ہے۔ مناسب پیرامیٹرز کے ساتھ ڈراپ () کے طریقہ کار کا استعمال کرتے ہوئے ، آپ کالموں کو ڈیٹا فریم سے ہٹا سکتے ہیں اور ان کالموں کے بغیر ایک نیا ڈیٹا فریم حاصل کرسکتے ہیں۔یاد رکھیں کہ نتیجہ کو ڈیٹا فریم یا کسی نئے متغیر کو ترمیم شدہ ڈیٹا فریم پر قبضہ کرنے کے لئے واپس تفویض کریں۔"
    },
    {
        "Question": "آپ کو ای کامرس سیلز ڈیٹا پر مشتمل ایک ڈیٹاسیٹ دیا جاتا ہے۔انوینٹری مینجمنٹ کو بہتر بنانے کے ل you آپ موسمی طلب کے نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم میں گمشدہ اقدار کو سنبھالنا ڈیٹا تجزیہ اور پری پروسیسنگ کا ایک اہم قدم ہے۔پانڈاس گمشدہ اقدار کو مؤثر طریقے سے سنبھالنے کے لئے متعدد طریقے مہیا کرتا ہے۔یہاں کچھ عام تکنیکیں ہیں: گمشدہ اقدار کی جانچ پڑتال: آپ ڈیٹا فریم میں گمشدہ اقدار کی نشاندہی کرنے کے لئے isnull () طریقہ استعمال کرسکتے ہیں۔یہ اصل کی طرح ایک ہی شکل کا ڈیٹا فریم لوٹاتا ہے ، جہاں ہر قدر درست ہے اگر اصل ڈیٹا فریم میں متعلقہ قیمت غائب ہے ، اور دوسری صورت میں غلط ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# گمشدہ قدروں کے ساتھ ایک ڈیٹا فریم بنائیں = {'نام': ['جان' ، 'ایملی' ، کوئی بھی نہیں ، 'لنڈا'] ، 'عمر': [28 ، کوئی نہیں ، 42 ، 50] ، 'سٹی': ['نیویارک' ، 'شکاگو' ، 'لاس اینجلس' ، کوئی بھی نہیں]} df = pd.dataframe (ڈیٹا)# گمشدہ valuessissing_values = df.isnull ()# گمشدہ ویلیو پرنٹ کے ساتھ ڈیٹا فریم ڈسپلے کریں.نتیجے میں ڈیٹا فریم ، لاپتہ_والیوس ، ہر سیل میں گمشدہ اقدار (سچ) یا نان مسنگ اقدار (غلط) کی موجودگی کی نشاندہی کرتا ہے۔ گمشدہ اقدار کو گھومنا: آپ قطاروں یا کالموں کو ہٹانے کے لئے ڈراپنا () کا طریقہ استعمال کرسکتے ہیں جس میں گمشدہ اقدار ہیں۔پہلے سے طے شدہ طور پر ، ڈراپنا () کم از کم ایک گمشدہ قیمت پر مشتمل کسی بھی قطار کو گراتا ہے۔اس کے بجائے کالم چھوڑنے کے لئے آپ محور پیرامیٹر کی بھی وضاحت کرسکتے ہیں۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# گمشدہ قدروں کے ساتھ ایک ڈیٹا فریم بنائیں = {'نام': ['جان' ، 'ایملی' ، کوئی بھی نہیں ، 'لنڈا'] ، 'عمر': [28 ، کوئی نہیں ، 42 ، 50] ، 'سٹی': ['نیو یارک' ، 'شکاگو' ، 'لاس اینجلس' ، کوئی بھی نہیں]} df = pd.dataframe (ڈیٹا)# گمشدہ قدروں کے ساتھ قطرہ قطرہ= df.dropna (محور = 1)# نتیجے میں ڈیٹا فیمس پرنٹ (df_dropped_rows) پرنٹ (df_dropped_colums) آؤٹ پٹ کو ڈسپلے کریں: SQLCOPY کوڈ کا نام عمر سٹی 0 جان 28.0 نیو یارکلیس کوپی کوڈپٹائی ڈیٹا فیمکولومز: [0 ، 1 ، 2 ، 3 ، 3 ، 3 ، 1 ، 2 ، 3 ، 3مثال کے طور پر ، ڈراپنا () دو بار استعمال کیا جاتا ہے: ایک بار محور پیرامیٹر (پہلے سے طے شدہ سلوک قطاروں میں کمی کرتا ہے) کی وضاحت کیے بغیر ، اور ایک بار کالموں کو چھوڑنے کے لئے محور = 1 کے ساتھ۔نتیجے میں ڈیٹا فیمز ، DF_DROPPED_ROWS اور DF_DROPPED_COLUMNS ، کوئی گمشدہ اقدار پر مشتمل نہیں ہیں۔ گمشدہ اقدار کو پورا کرنا: آپ گمشدہ اقدار کو مخصوص اقدار کے ساتھ تبدیل کرنے کے لئے فلنا () کا طریقہ استعمال کرسکتے ہیں۔مثال کے طور پر ، آپ گمشدہ اقدار کو مستقل قیمت ، کالم کے وسط یا وسط ، یا آگے/پسماندہ بھرنے سے بھر سکتے ہیں۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# گمشدہ قدروں کے ساتھ ایک ڈیٹا فریم بنائیں = {'نام': ['جان' ، 'ایملی' ، کوئی بھی نہیں ، 'لنڈا'] ، 'عمر': [28 ، کوئی نہیں ، 42 ، 50] ، 'شہر': ['نیویارک' ، 'شکاگو' ، 'لاس اینجلس"
    },
    {
        "Question": "آپ کو ٹریفک سینسر ڈیٹا پر مشتمل ڈیٹاسیٹ دیا جاتا ہے۔نقل و حمل کے راستوں اور نظام الاوقات کو بہتر بنانے کے ل you آپ ٹریفک کی بھیڑ کے نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "پانڈوں میں ڈیٹا فریم میں عددی کالموں کے لئے وضاحتی اعدادوشمار کی گنتی کرنے کے ل you ، آپ بیان () طریقہ استعمال کرسکتے ہیں۔بیان () طریقہ ہر عددی کالم کے لئے مختلف سمری اعدادوشمار تیار کرتا ہے ، جس میں گنتی ، مطلب ، معیاری انحراف ، کم سے کم ، کوارٹائل اور زیادہ سے زیادہ شامل ہیں۔یہاں ایک مثال یہ ہے: پی ڈی کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس PD# عددی کالم کے ساتھ ایک ڈیٹا فریم بنائیں = {'نام': ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'تنخواہ': [50000 ، 70000 ، 60000]} df = pd.dataframe (ڈیٹا)# کمپیوٹ وضاحتی اعدادوشمار کے اعدادوشمار = df.describe ()# وضاحتی اعدادوشمار پرنٹ (اعدادوشمار) آؤٹ پٹ: شیل کاپی کوڈ عمر سیلاری اکاؤنٹ 3.000000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000MEAN 35.0000meanکم سے کم 28.000000 50000.00000025 ٪ 31.500000 55000.00000050 ٪ 35.000000 60000.00000075 ٪ 38.500000 65000.000000max 42.000000000000000000 اس مثال کے طور پر ، بیان () کا طریقہ ڈیٹا فریم ڈی ایف پر بلایا گیا ہے۔نتیجے میں ڈیٹا فریم ، اعداد و شمار ، ہر عددی کالم کے لئے وضاحتی اعدادوشمار پر مشتمل ہیں۔اعدادوشمار میں گنتی (غیر مسنگ اقدار کی تعداد) ، مطلب ، معیاری انحراف ، کم سے کم قیمت ، کوارٹائل (25 ویں ، 50 ویں ، اور 75 ویں فیصد) ، اور زیادہ سے زیادہ قیمت شامل ہیں۔ بیان () طریقہ کا استعمال کرتے ہوئے ، آپ جلدی سے ایک جائزہ حاصل کرسکتے ہیں۔آپ کے ڈیٹا فریم میں عددی کالموں کی مرکزی رجحان ، بازی اور تقسیم کا۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر براؤزنگ کا ڈیٹا ہوتا ہے۔صارف کی ترجیحات اور طرز عمل کی بنیاد پر آپ ویب سائٹ کی سفارشات کا تجزیہ اور ذاتی نوعیت کا تجزیہ کریں گے؟",
        "Answer": "پانڈوں میں ، گروپ بائی () فنکشن ڈیٹا فریم پر گروپ بندی کی کارروائیوں کو انجام دینے کے لئے استعمال ہوتا ہے۔گروپ بائی () فنکشن آپ کو ایک یا زیادہ کالموں کی بنیاد پر گروپوں میں ڈیٹا فریم تقسیم کرنے کی اجازت دیتا ہے ، اور پھر ہر گروپ میں مجموعی یا تبدیلی کے افعال کا اطلاق کرتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان' ، 'ایملی' ، 'جان'] ، 'شہر': ['نیو یارک'.اور کمپیوٹ کا مطلب تنخواہ گروپ = df.groupby ('name')۔ مطلب ()# گروپڈ ڈیٹا فریم پرنٹ (گروپڈ) آؤٹ پٹ کو ڈسپلے کریں: مارک ڈاون کاپی کوڈ سیلری نام ایملی 65000 جان 57500ryan 55000in اس مثال کے طور پر ، گروپ بائی () فنکشن کو ڈیٹا فیم ڈی ایف پر بلایا گیا ہے۔کالم کا نام 'نام'۔یہ 'نام' کالم میں انوکھی اقدار کے ذریعہ ڈیٹا فریم کو گروپ کرتا ہے۔اس کے نتیجے میں شے ، گروپڈ ، ایک نیا ڈیٹا فریم ہے جہاں قطار کو الگ الگ ناموں کے ذریعہ گروپ کیا جاتا ہے ، اور ہر گروپ کی اوسط تنخواہ کی گنتی کی جاتی ہے۔ آپ گروپ بائی () فنکشن میں کالم کے ناموں کی فہرست فراہم کرکے متعدد کالموں کے ذریعہ بھی گروپ کرسکتے ہیں۔مثال کے طور پر: پائیتھون کوپی کوڈگروپڈ = df.groupby (['نام' ، 'شہر'])نام اور شہر۔ ایک بار آپ نے ڈیٹا فریم کو گروپ کیا ہے ، آپ گروپوں پر مختلف اجتماعی افعال کا اطلاق کرسکتے ہیں ، جیسے مطلب () ، رقم () ، گنتی () ، منٹ () ، زیادہ سے زیادہ () ، وغیرہ۔یا ہر گروپ پر دوسرے حسابات انجام دیں۔ گروپنگ پانڈوں میں ایک طاقتور آپریشن ہے جو آپ کو مختلف زمروں یا کالموں کے امتزاج پر مبنی ڈیٹا کا تجزیہ اور خلاصہ کرنے کی سہولت دیتا ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر سپورٹ چیٹ لاگز ہوتے ہیں۔عام مسائل کی نشاندہی کرکے اور ردعمل کے اوقات کو بہتر بنانے کے ذریعہ آپ کس طرح گاہکوں کے اطمینان کا تجزیہ اور بہتر بنائیں گے؟",
        "Answer": "پانڈوں میں ڈیٹا فریم کے ہر عنصر پر کسی فنکشن کو لاگو کرنے کے ل you ، آپ اطلاق () طریقہ استعمال کرسکتے ہیں۔اطلاق () طریقہ آپ کو کسی ڈیٹا فریم کی قطار یا کالموں کے ساتھ کسی فنکشن کا اطلاق کرنے کی اجازت دیتا ہے ، یا یہاں تک کہ ہر فرد عنصر پر بھی۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'تنخواہ': [[[28 ، 35 ، 42]50000 ، 60000 ، 55000]} df = pd.dataframe (ڈیٹا)# ڈیف ڈبل_ ویلیو (x) کو لاگو کرنے کے لئے کسی فنکشن کی وضاحت کریں: 2 * x واپس لوٹائیں۔.پہلے سے طے شدہ طور پر ، درخواست دیں () ہر کالم پر فنکشن کا اطلاق کرتے ہیں ، ہر کالم کو سیریز کے طور پر علاج کرتے ہیں۔فنکشن ڈبل_ویلیو ہر عنصر کی قدر کو دوگنا کرنے کے لئے بیان کیا گیا ہے۔نتیجے میں ڈیٹا فریم ، DF_APPLIED ، میں اصل ڈیٹا فریم کے عناصر پر مشتمل ہوتا ہے جس کا اطلاق ہوتا ہے۔ اگر آپ قطاروں کے ساتھ کسی فنکشن کا اطلاق کرنا چاہتے ہیں تو ، آپ محور = 1 کو لاگو () طریقہ میں ترتیب دے سکتے ہیں ().کہ آپ جو فنکشن لگاتے ہیں وہ ایک بلٹ ان فنکشن ، لیمبڈا فنکشن ، یا صارف کی وضاحت شدہ فنکشن ہوسکتا ہے۔اطلاق () طریقہ ڈیٹا فریم عناصر پر افعال کو لاگو کرنے میں لچک فراہم کرتا ہے ، جس سے آپ اپنے ڈیٹا پر اپنی مرضی کے مطابق آپریشن اور تبدیلیوں کو انجام دینے کی اجازت دیتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں ہوٹل کی بکنگ کا ڈیٹا ہوتا ہے۔محصول اور وسائل کے مختص کو بہتر بنانے کے ل you آپ کس طرح تجزیہ کریں گے اور بکنگ منسوخی کی پیش گوئی کریں گے؟",
        "Answer": "پانڈوں میں ایک یا زیادہ کالموں کے ذریعہ ڈیٹا فریم کو ترتیب دینے کے ل you ، آپ ترتیب_اولیوز () کا طریقہ استعمال کرسکتے ہیں۔ترتیب_اولیوز () کا طریقہ آپ کو ایک یا زیادہ کالموں کو ترتیب دینے اور ترتیب دینے کے آرڈر (چڑھنے یا اترنے) کی وضاحت کرنے کی اجازت دیتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان' ، 'لنڈا'] ، 'عمر': [28 ، 35 ، 42 ، 50]..پہلے سے طے شدہ طور پر ، ترتیب_والیوز () مخصوص کالم کی بنیاد پر چڑھائی کے آرڈر میں ڈیٹا فریم کو ترتیب دیتا ہے۔نتیجے میں ڈیٹا فریم ، چھانٹیا_ڈیف ، 'تنخواہ' کالم کے ذریعہ چڑھائی ترتیب میں ترتیب دیا گیا ہے۔ ڈیٹا فریم کو نزولی ترتیب میں ترتیب دینے کے ل you ، آپ چڑھتے ہوئے = غلط کو ترتیب_اولیوز () کے طریقہ کار میں منتقل کرسکتے ہیں: پائیٹون کوپی کوڈسورٹڈ_ڈیف = ڈی ایف.سورٹ_والیس ('تنخواہ' ، 'تنخواہ'چڑھائی = غلط) آپ ترتیب_ ویلیوز () کے طریقہ کار کو کالم کے ناموں کی فہرست فراہم کرکے متعدد کالموں کے ذریعہ بھی ترتیب دے سکتے ہیں: پائیتھون کوپی کوڈسورٹڈ_ڈیف = ڈی ایف.سورٹ_والیوز (['نام' ، 'عمر']) اس سے پہلے ڈیٹا فریم کو ترتیب دیتا ہے '۔نام 'کالم اور پھر' عمر 'کالم کے ذریعہ ، دونوں چڑھائی کے حکم میں۔ ترتیب_اولیوز () کے طریقہ کار کا استعمال کرتے ہوئے ، آپ ایک یا زیادہ کالموں کی بنیاد پر کسی مخصوص ترتیب میں کسی ڈیٹا فریم کی قطار کا بندوبست کرسکتے ہیں۔ترتیب شدہ ڈیٹا فریم کو کسی نئے متغیر میں محفوظ کیا جاسکتا ہے یا اصل ڈیٹا فریم کو واپس تفویض کیا جاسکتا ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں سوشل نیٹ ورک کا ڈیٹا ہوتا ہے۔آپ نیٹ ورک کے مرکزیت کے اقدامات پر مبنی بااثر صارفین یا برادریوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "پانڈوں میں ، آپ انضمام () فنکشن کا استعمال کرتے ہوئے دو ڈیٹا فریموں کو ضم یا شامل کرسکتے ہیں۔انضمام () فنکشن ایک عام کالم یا انڈیکس کی بنیاد پر دو یا زیادہ ڈیٹا فریموں سے قطاروں کو جوڑتا ہے۔یہ کئی قسم کے شامل ہونے کی فراہمی کرتا ہے ، جیسے اندرونی شمولیت ، بائیں شمولیت ، دائیں شمولیت ، اور بیرونی شمولیت۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT پانڈاس PD# پہلے ڈیٹا فریمیٹا 1 = {'ID' بنائیں: [1 ، 2 ، 3 ، 4] ، 'نام': ['جان' ، 'ایملی' ، 'ریان' ، 'لنڈا'] ، 'عمر': [28 ، 35 ، 42 ، 50]} df1 = pd.dataframe (ڈیٹا 1)# دوسرا ڈیٹا فریمیٹا 2 = {'id' بنائیں: [2 ، 3 ، 5] ، 'تنخواہ': [60000 ،55000 ، 65000] ، 'شہر': ['شکاگو' ، 'نیو یارک' ، 'لاس اینجلس']} DF2 = pd.dataframe (ڈیٹا 2)# 'ID' کالم میجرڈ_ڈیف = PD.Merge (DF1 پر مبنی ڈیٹا فیمز کو ضم کریں.فنکشن کو ڈیٹا فریمز DF1 اور DF2 پر بلایا جاتا ہے ، جس میں 'ID' کالم کو ضم کرنے کے لئے عام کالم کے طور پر بیان کیا جاتا ہے۔کس طرح = 'اندرونی' پیرامیٹر ایک اندرونی شمولیت کی وضاحت کرتا ہے ، جس کے نتیجے میں صرف عام قطاریں مربوط ڈیٹا فریم میں شامل ہوتی ہیں۔نتیجے میں ڈیٹا فریم ، ضم شدہ_ڈی ایف ، 'ID' کالم پر مبنی دونوں ڈیٹا فریموں کے ضم شدہ ڈیٹا پر مشتمل ہے۔ آپ پیرامیٹر کو تبدیل کرکے دوسری قسم کے شامل بھی کرسکتے ہیں۔مثال کے طور پر ، کس طرح = 'بائیں' بائیں بازو کو انجام دیتا ہے ، کس طرح = 'دائیں' دائیں شمولیت کو انجام دیتا ہے ، اور کس طرح = 'بیرونی' بیرونی شمولیت کو انجام دیتا ہے۔پیرامیٹر پرمثال کے طور پر: پائیتھون کوپی کوڈیمرجڈ_ ڈی ایف = پی ڈی.مریج (ڈی ایف 1 ، ڈی ایف 2 ، آن = ['آئی ڈی' ، 'سٹی'] ، کیسے = 'اندرونی') یہ 'ID' اور 'سٹی' کالم دونوں پر اندرونی شمولیت کا مظاہرہ کرتا ہے۔/ڈیٹا فریموں میں شامل ہونا آپ کو مشترکہ اقدار کی بنیاد پر مختلف ذرائع سے ڈیٹا اکٹھا کرنے کی اجازت دیتا ہے ، جس سے آپ کو مزید تجزیہ یا پروسیسنگ کے لئے ایک مستحکم ڈیٹاسیٹ بنانے کے قابل بناتا ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں ویدر سینسر کا ڈیٹا ہوتا ہے۔موسم کی پیش گوئی اور منصوبہ بندی کی حمایت کرنے کے لئے آپ موسم کے نمونوں کا تجزیہ اور پیش گوئی کیسے کریں گے؟",
        "Answer": "پانڈوں میں ، آپ محور () یا پیوٹ_ٹیبل () فنکشن کا استعمال کرتے ہوئے ڈیٹا فریم کو محور کرسکتے ہیں۔جب آپ کسی ایک کالم میں اقدار کی بنیاد پر ڈیٹا فریم کو نئی شکل دینا چاہتے ہیں تو محور () فنکشن کا استعمال کیا جاتا ہے ، جبکہ جب آپ محور کے دوران اعداد و شمار کو جمع کرنا چاہتے ہیں تو پیوٹ_ٹیبل () فنکشن استعمال کیا جاتا ہے۔یہاں محور () کے استعمال کی ایک مثال ہے: PD## کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس ایک ڈیٹا فریمیٹا = {'تاریخ' بنائیں: ['2021-01-01' ، '2021-01-02' ، '2021-01' ، '2021-01' ، '2021-01-02 '] ،' شہر ': [' نیویارک '،' نیو یارک '،' لاس اینجلس '،' لاس اینجلس '] ،' درجہ حرارت ': [32 ، 30 ، 75 ، 77] ،' نمی': [80 ، 85 ، 45 ، 50]} df = pd.dataframe (ڈیٹا)#' سٹی 'کالم پییووٹڈ_ڈیف = df.pivot (انڈیکس =' تاریخ '، کالم =' شہر '، اقدار = پر مبنی ڈیٹا فریم پر محور'درجہ حرارت')# ڈسپلے ڈسپلےڈ ڈیٹا فیم پرنٹ (Pivoted_DF) آؤٹ پٹ: SQLCOPY Codecity لاس اینجلس نیو یارک ڈیٹ 2021-01-01 75 322021-01-02 77 30in اس مثال کے طور پر ، Pivot () فنکشن کو ڈیٹا فیم DF پر بلایا جاتا ہے 'کے ساتھ' 'تاریخ 'کالم انڈیکس کے طور پر مخصوص ،' سٹی 'کالم کالم کے طور پر مخصوص کیا گیا ہے ، اور' درجہ حرارت 'کالم اقدار کے طور پر مخصوص ہے۔نتیجے میں ڈیٹا فریم ، Pivoted_DF ، کو 'سٹی' کالم میں منفرد اقدار کی بنیاد پر تبدیل کیا جاتا ہے ، جس میں 'تاریخ' کالم کے ساتھ انڈیکس اور محور اقدار اسی درجہ حرارت کی حیثیت رکھتے ہیں۔ اگر آپ ایک سے زیادہ کالموں کی بنیاد پر محور کرنا چاہتے ہیں یا جمع کرنا چاہتے ہیں یا جمع کرنا چاہتے ہیں۔محور کے دوران ، آپ Pivot_table () فنکشن استعمال کرسکتے ہیں۔یہاں ایک مثال ہے: پائیٹون کوپی کوڈپیووٹ_ٹیبل = df.pivot_table (انڈیکس = 'تاریخ' ، کالم = 'شہر' ، اقدار = 'درجہ حرارت' ، Aggfunc = 'مطلب') یہ مثال ہر شہر اور تاریخ کے امتزاج کے اوسط درجہ حرارت کا حساب لگاتی ہے۔ڈیٹا فریم آپ کو اعداد و شمار کی ساخت کو تبدیل کرنے کی اجازت دیتا ہے ، جس سے تجزیہ کرنا یا مختلف شکل میں پیش کرنا آسان ہوجاتا ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں طلباء کی کارکردگی کا ڈیٹا ہوتا ہے۔آپ ان عوامل کا تجزیہ اور ان کی نشاندہی کیسے کریں گے جو تعلیمی پروگراموں کو بہتر بنانے کے لئے تعلیمی کامیابی میں معاون ہیں؟",
        "Answer": "پانڈوں میں ، آپ اسٹیک () اور غیر اسٹیک () طریقوں کا استعمال کرتے ہوئے ڈیٹا فریم میں کالموں کو اسٹیک یا اسٹیک کرسکتے ہیں۔ان طریقوں کا استعمال اعداد و شمار کو نئی شکل دینے کے لئے کیا جاتا ہے ، وسیع شکل (ایک سے زیادہ کالموں کے ساتھ) اور لمبی شکل (ایک ہی کالم کے ساتھ) کے درمیان تبدیل ہوتا ہے۔اسٹیک () اور اسٹیک () کے استعمال کی ایک مثال یہ ہے: PD## کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس ایک ڈیٹا فریمیٹا = {'نام': ['جان' ، 'ایملی' ، 'ریان'] ، 'ریاضی': [90 ، 85، 92] ، 'سائنس': [88 ، 93 ، 91] ، 'انگریزی': [86 ، 89 ، 90]} df = pd.dataframe (ڈیٹا)# کالموں کو ایک کثیر سطح کے انڈیکس اسٹیکڈ_ڈیف = ڈی ایف بنانے کے لئے کالموں کو اسٹیک کریں۔Set_index ('نام')۔ اسٹیک ()# اسٹیکڈ ڈیٹا فیم پرنٹ (اسٹیکڈ_ ڈی ایف) آؤٹ پٹ کو ڈسپلے کریں: گوکوپی کوڈ نام جان ریاضی 90 سائنس 88 انگریزی 88 انگریزی 85 سائنس 85 سائنس 93 انگریزی 89ryan ریاضی 92 سائنس 91 انگریزی 91 انگریزی 90dtype: INT64IN اس مثال ، اسٹیک () اسٹیک ()'نام' کالم کو انڈیکس کے طور پر ترتیب دینے کے بعد ڈیٹا فریم DF پر طریقہ کار طلب کیا جاتا ہے۔یہ باقی کالموں کو عمودی طور پر ڈھیر کرتا ہے ، اور دوسرے درجے کے طور پر اصل کالم ناموں کے ساتھ ملٹی لیول انڈیکس تیار کرتا ہے۔نتیجے میں ڈیٹا فریم ، اسٹیکڈ_ ڈی ایف میں ، اسٹیکڈ ویلیوز کے ساتھ ایک ہی کالم ہے۔ ڈیٹا کو غیر اسٹیک کرنے اور اسے اصل شکل میں دوبارہ تشکیل دینے کے ل you ، آپ اسٹیک () طریقہ استعمال کرسکتے ہیں: پائیٹون کوپی کوڈن اسٹیکڈ_ڈیف = اسٹیکڈ_ڈیف.ان اسٹیک ()# غیر اسٹیک ڈیٹا فیم پرنٹ ڈسپلے کریں.اس سے اعداد و شمار کو غیر اسٹیک کرتا ہے ، اور اسے ایک سے زیادہ کالموں کے ساتھ اصل وسیع فارمیٹ میں تبدیل کرتا ہے۔ اسٹیک () اور اسٹیک () کا استعمال کرتے ہوئے ، آپ وسیع اور لمبی شکلوں کے مابین ڈیٹا فریم کو نئی شکل دے سکتے ہیں ، جو تجزیہ یا اعداد و شمار کی کچھ اقسام کے لئے کارآمد ثابت ہوسکتا ہے۔تبدیلیاں"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کریڈٹ کارڈ ٹرانزیکشن ڈیٹا ہوتا ہے۔آپ بے ضابطگی کا پتہ لگانے والے الگورتھم کا استعمال کرتے ہوئے جعلی نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم کو ایک نمی سرنی میں تبدیل کرنے کے ل you ، آپ ڈیٹا فریم کی اقدار کی وصف کو استعمال کرسکتے ہیں۔اقدار کی وصف ڈیٹا فریم کے ڈیٹا کی ایک نمی سرنی نمائندگی لوٹاتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'تنخواہ': [[[28 ، 35 ، 42]50000 ، 60000 ، 55000]} df = pd.dataframe (ڈیٹا)# ڈیٹا فریم کو ایک numpy arrayarray = df.values میں تبدیل کریں numpy arrayprint (سرنی) آؤٹ پٹ کو ڈسپلے کریں: csscopy کوڈ [['جان' 28 50000] ['ایمل''35 60000] [' ریان '42 55000]] اس مثال میں ، اقدار کی وصف کو ڈیٹا فریم ڈی ایف کو ایک نپی سرنی میں تبدیل کرنے کے لئے استعمال کیا جاتا ہے۔نتیجے میں سرنی متغیر میں ڈیٹا فریم کے اعداد و شمار کو دو جہتی نیپی سرنی فارمیٹ میں شامل کیا گیا ہے۔ نوٹ کریں کہ نمی سرنی میں ایک ڈیٹا کی قسم ہوگی جو ڈیٹا فریم میں تمام مختلف قسم کی اقدار کو ایڈجسٹ کرتی ہے۔اس معاملے میں ، نمی سرنی میں ڈیٹا کی قسم کی چیز ہوتی ہے کیونکہ اس میں تار اور عددی اقدار کا مرکب ہوتا ہے۔اگر ڈیٹا فریم میں موجود تمام کالموں میں ایک ہی ڈیٹا کی قسم ہوتی ہے تو ، نتیجے میں نیپی سرنی میں اس ڈیٹا کی قسم ہوگی۔ ڈیٹا فریم کو نپی سرنی میں تبدیل کرنا مفید ثابت ہوسکتا ہے اگر آپ کو عددی گنتی انجام دینے کی ضرورت ہو یا ڈیٹا پر numpy- مخصوص افعال استعمال کرنے کی ضرورت ہو۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں ملازمین کی کارکردگی کا ڈیٹا ہوتا ہے۔آپ کس طرح ان عوامل کا تجزیہ اور شناخت کریں گے جو پیداواری صلاحیت کو بہتر بنانے کے لئے اعلی کارکردگی کا مظاہرہ کرنے والی ٹیموں میں شراکت کرتے ہیں؟",
        "Answer": "پانڈوں میں ، آپ ریاضی آپریٹرز جیسے +، -، *، /، اور ٪ کا استعمال کرکے کالموں کے مابین ریاضی کی کارروائیوں کو انجام دے سکتے ہیں۔یہ آپریٹرز ڈیٹا فریم کے کالموں پر عنصر کے لحاظ سے کام کرتے ہیں ، کالموں کے متعلقہ عناصر کے مابین آپریشن انجام دیتے ہیں۔یہاں ایک مثال یہ ہے: PD## AS PD# ایک ڈیٹا فریمیٹا = {'A': [1 ، 2 ، 3 ، 4] ، 'B': [5 ، 6 ، 7 ، 8] ، 'C': [9 ، [9 ، بنائیں10 ، 11 ، 12]} df = pd.dataframe (ڈیٹا) # کالم ایس ڈی ایف ['Sum'] = df ['a'] + df ['b'] # اضافی ڈی ایف ['فرق'] = df [کے درمیان ریاضی کی کارروائیوں کو انجام دیں۔'c'] - df ['a'] # گھٹاؤ ondf ['product'] = df ['b'] * df ['c'] # ضرب ['ڈویژن'] = df ['c'] / df ['B '] # ڈویژن ڈی ایف [' ماڈیولس '] = DF [' C '] ٪ DF [' B '] # ماڈیولس # کمپیوٹڈ کالم پرنٹ (DF) آؤٹ پٹ کے ساتھ ڈیٹا فریم ڈسپلے کریں: ریاضی کا کوڈ A B C SUM فرق پروڈکٹ ڈویژن Modulus0 1 5 96 8 45 1.8 41 2 6 10 8 8 60 1.6666667 42 3 7 11 10 8 77 1.571429 43 4 8 12 12 8 96 1.5 4in اس مثال کے طور پر ، ڈیٹا فریم ڈی ایف کے کالموں کے مابین ریاضی کی کارروائی کی جاتی ہے۔اس کے نتیجے میں اقدار ڈیٹا فریم میں نئے کالموں کو تفویض کی گئی ہیں: 'رقم' ، 'فرق' ، 'پروڈکٹ' ، 'ڈویژن' ، اور 'ماڈیولس'۔ریاضی کے آپریٹرز +، -، *، /، اور ٪ کو بالترتیب اضافے ، گھٹاؤ ، ضرب ، تقسیم ، اور ماڈیولس آپریشنز کے لئے استعمال کیا جاتا ہے۔) ، NP.EXP () ، یا NP.SQRT ()۔ریاضی کے کاموں کو نمی افعال کے ساتھ جوڑ کر ، آپ ڈیٹا فریم کالموں پر وسیع پیمانے پر حساب کتاب انجام دے سکتے ہیں۔ ڈیٹا فریم میں کالموں کے مابین ریاضی کی کارروائیوں کو بہتر بناتا ہے تو آپ موجودہ اعداد و شمار کی بنیاد پر نئی بصیرت اور کمپیوٹ سے حاصل کردہ مقدار کو حاصل کرنے کی اجازت دیتا ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا گیا ہے جس میں سوشل میڈیا پوسٹس ہیں۔ٹیکسٹ مائننگ اور ٹاپک ماڈلنگ کی تکنیک کا استعمال کرتے ہوئے آپ رجحانات اور وائرل مواد کا تجزیہ اور ان کا پتہ کیسے لگائیں گے؟",
        "Answer": "موجودہ کالموں پر مبنی ڈیٹا فریم میں نیا کالم بنانے کے ل you ، آپ کسی قدر کو تفویض کرسکتے ہیں یا ڈیٹا فریم کے کالم پر کسی فنکشن کا اطلاق کرسکتے ہیں۔اس کو پورا کرنے کے لئے کچھ طریقے یہ ہیں: براہ راست ایک قدر تفویض کریں: پائیتھون کوپی کوڈڈف ['نیو کالم'] = موجودہ کالموں کے مابین ویلیو پرفارم ریاضی کی کارروائیوں: پائیتھون کوپی کوڈڈف ['نیو کلون'] = ڈی ایف ['کالم 1'] + ڈی ایف ['کالم 2']موجودہ کالموں پر ایک فنکشن کا اطلاق کریں: پائیٹون کوپی کوڈیڈف My_function (قطار): # موجودہ کالموں پر مبنی نئی قدر کی گنتی کرنے کے لئے منطق رزلٹ ڈی ایف ['نیو کلون \"] = df.apply (my_function ، محور = 1) یہاں ایک مثال ہے جو ان نقطہ نظر کو ظاہر کرتی ہے۔پی ڈی کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'تنخواہ': [50000 ، 60000 ،55000]} df = pd.dataframe (ڈیٹا)# ایک نیا کالم ڈی ایف بنانے کے لئے براہ راست ایک قیمت تفویض کریں ['بونس'] = 1000# کالموں کے مابین ریاضی کا آپریشن انجام دیں ایک نیا کالم ڈی ایف بنانے کے لئے ['مکمل طور پر'] = DF ['تنخواہ'] + ڈی ایف ['بونس']# موجودہ کالم ایس ڈی ای ایف ٹیکس_اماؤنٹ (قطار) پر مبنی ایک نیا کالم بنانے کے لئے ایک فنکشن کا اطلاق کریں: اگر قطار ['تنخواہ']> 50000: واپسی قطار ['تنخواہ'] * 0.2 دیگر: واپسی کی قطار ['تنخواہ'] * 0.1df ['ٹیکس'] = df.apply (ٹیکس_اماؤنٹ ، محور = 1)# نئے کالم پرنٹ (ڈی ایف) آؤٹ پٹ کے ساتھ ڈیٹا فریم ڈسپلے کریں: یامل کوپی کوڈ کا نام عمر کی تنخواہ بونس مکمل طور پر ٹیکس 0 جان 28 50000 1000 5000.01ایملی 35 60000 1000 61000 12000.02 ریان 42 55000 1000 56000 11000.0.0 اس مثال کے طور پر ، ایک نیا کالم 'بونس' 1000 کی مستقل قیمت تفویض کرکے تیار کیا گیا ہے۔ 'تنخواہ' کے مابین ریاضی کے عمل کو انجام دے کر ایک اور نیا کالم 'مکمل کالا' تخلیق کیا گیا ہے۔کالم اور 'بونس' کالم۔آخر میں ، محور = 1 کے ساتھ لاگو () طریقہ کار کا استعمال کرتے ہوئے ڈیٹا فریم کی ہر صف میں ٹیکس_اوماؤنٹ () فنکشن کا اطلاق کرکے ایک نیا کالم 'ٹیکس' تشکیل دیا جاتا ہے۔نتیجے میں ڈیٹا فریم ڈی ایف میں نئے بنائے گئے کالموں کے ساتھ اصل کالم شامل ہیں۔ موجودہ کالموں پر مبنی نئے کالم بنانا ، آپ اپنے ڈیٹا فریم میں موجود ڈیٹا سے اضافی بصیرت یا کمپیوٹ حاصل کردہ مقدار حاصل کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر منور ڈیٹا ہوتا ہے۔آپ مشین لرننگ الگورتھم اور کسٹمر کے طرز عمل کے ڈیٹا کا استعمال کرتے ہوئے کسٹمر منور کا تجزیہ اور پیش گوئی کریں گے؟",
        "Answer": "پانڈوں میں ، آپ مختلف طریقوں کا استعمال کرتے ہوئے ڈیٹا فریم میں ڈپلیکیٹ اقدار کو سنبھال سکتے ہیں۔یہاں کچھ عام نقطہ نظر ہیں: ڈپلیکیٹ قطاروں کی نشاندہی کرنا: ڈیٹا فریم میں نقل قطاروں کی جانچ پڑتال کے ل you ، آپ نقل () طریقہ استعمال کرسکتے ہیں۔یہ ایک بولین سیریز کو لوٹاتا ہے جس سے یہ ظاہر ہوتا ہے کہ آیا ہر صف پچھلی قطار کا نقل ہے۔. ڈوپلیکیٹڈ (رکھیں = غلط) ڈپلیکیٹ_ڈیف = ڈی ایف [ڈپلیکیٹ_روز] پرنٹ (ڈپلیکیٹ_ ڈی ایف) ڈپلیکیٹ قطار کو ہٹانا: ڈیٹا فریم سے ڈپلیکیٹ قطار کو ہٹانے کے ل you ، آپ ڈراپ_ڈوپلیکیٹس () طریقہ استعمال کرسکتے ہیں۔پہلے سے طے شدہ طور پر ، یہ ہر نقل کی قطار کی پہلی موجودگی کو برقرار رکھتا ہے اور اس کے بعد کی نقلیں ہٹا دیتا ہے۔سب سیٹ پیرامیٹر کے ساتھ ڈپلیکیٹڈ () اور ڈراپ_ڈوپلیکیٹس () طریقوں۔کالم کے نام یا کالم ناموں کی ایک فہرست پر سب سیٹ سیٹ کریں جس پر آپ ڈپلیکٹس کی جانچ کرنا چاہتے ہیں۔') ڈپلیکیٹ اقدار کی گنتی: کسی کالم میں ہر انوکھی قدر کی موجودگی کو گننے کے ل you ، آپ ویلیو_کاؤنٹس () طریقہ استعمال کرسکتے ہیں۔آپ کی مخصوص ضروریات کے مطابق ڈیٹا فریم۔آپ ڈپلیکیٹ قطاروں کی شناخت اور ڈسپلے کرنے ، ڈپلیکیٹ قطاریں ہٹانے ، یا مخصوص کالموں کی بنیاد پر ڈپلیکیٹس کو سنبھالنے کا انتخاب کرسکتے ہیں۔اعداد و شمار کی سالمیت کو برقرار رکھنے اور درست تجزیہ کو یقینی بنانے کے لئے ڈپلیکیٹ اقدار کو سنبھالنا بہت ضروری ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں ریستوراں کا جائزہ لینے کا ڈیٹا ہوتا ہے۔آپ ان عوامل کا تجزیہ اور شناخت کیسے کریں گے جو ریستوراں میں بہتری کی رہنمائی کے لئے مثبت یا منفی جائزوں میں معاون ہیں؟",
        "Answer": "پانڈوں میں ، آپ ایک ڈیٹا فریم کو وسیع سے لمبی شکل تک اور اس کے برعکس پگھل () اور محور () افعال کا استعمال کرتے ہوئے دوبارہ شکل دے سکتے ہیں۔یہ فنکشن ڈیٹا فریم کو \"انپیوٹس\" \"، متعدد کالموں کو ایک ہی کالم میں تبدیل کرنا اور متغیر ناموں اور اقدار کو ذخیرہ کرنے کے لئے نئے کالم تیار کرنا۔یہاں ایک مثال یہ ہے: PD## PD# کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس ایک وسیع فارمیٹ ڈیٹافریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'ریاضی': [90 ، 85 ، 92] ، 'سائنس': [88 ، 93 ، 91] ،' انگریزی ': [86 ، 89 ، 90]} df_wide = pd.dataframe (ڈیٹا)# ڈیٹا فریم کو وسیع سے طویل فارمیٹڈف_لونگ = pd.melt (df_wide ، id_vars =' نام کی نئی شکل دیں۔'، var_name =' مضمون '، value_name =' اسکور ')# لانگ فارمیٹ ڈیٹا فیم پرنٹ (DF_LONG) آؤٹ پٹ ڈسپلے کریں: مارک ڈاون کاپی کوڈ کا نام سبجیکٹ اسکور 0 جان ریاضی 901 ایملی ریاضی 852 ریان ریاضی 923 جان سائنس 884 ایملی سائنس 935 ریان سائنس 916 جانانگریزی 867 ایملی انگلش 898 ریان انگریزی 90in اس مثال کے طور پر ، پگھل () فنکشن وسیع فارمیٹ ڈیٹا فریم DF_WID پر لاگو ہوتا ہے۔ID_VARS پیرامیٹر کالم (زبانیں) کی وضاحت کرتا ہے جو شناخت کنندگان کے طور پر رہنا چاہئے (اس معاملے میں ، 'نام' کالم)۔var_name پیرامیٹر نئے کالم کا نام بتاتا ہے جو متغیر ناموں (اس معاملے میں ، 'مضمون') کو اسٹور کرے گا۔ویلیو_ نام کا پیرامیٹر نئے کالم کا نام بتاتا ہے جو اقدار کو ذخیرہ کرے گا (اس معاملے میں ، 'اسکور')۔نتیجے میں ڈیٹا فریم DF_LONG طویل شکل میں ہے ، ہر قطار 'نام' ، 'مضمون' ، اور 'اسکور' کے انوکھے امتزاج کی نمائندگی کرتی ہے۔ طویل سے وسیع شکل تک ڈیٹا فریم کو نئی شکل دینے کے ل you ، آپ محور () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن ڈیٹا فریم کو \"محور\" ، ایک کالم سے منفرد اقدار کو متعدد کالموں میں تبدیل کرتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT Pandas As Pd# ایک طویل فارمیٹ ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'جان' ، 'یملی' ، 'ایملی' ، 'ریان' ، 'ریان'] ، 'مضمون': [' ریاضی '،' سائنس '،' ریاضی '،' سائنس '،' ریاضی '،' سائنس '] ،' اسکور ': [90 ، 88 ، 85 ، 93 ، 92 ، 91]} df_long = pd.ڈیٹا فریم (ڈیٹا)# ڈیٹا فریم کو طویل فارمیٹ سے وسیع فارمیٹڈف_ایڈ = df_long.pivot (اشاریہ = 'نام' ، کالم = 'مضمون' ، اقدار = 'اسکور') تک دوبارہ محفوظ کریں# وسیع فارمیٹ ڈیٹا فیم پرنٹ (DF_WIDE) آؤٹ پٹ کو ڈسپلے کریں: کاپی کوڈسوبیکجریاضی سائنس کا نام ایملی 85 93 جان 90 88ryan 92 91 91 اس مثال کے طور پر ، محور () فنکشن طویل فارمیٹ ڈیٹا فریم DF_LONG پر لاگو ہوتا ہے۔انڈیکس پیرامیٹر کالم (زبانیں) کی وضاحت کرتا ہے جو انڈیکس کے طور پر رہنا چاہئے (اس معاملے میں ، 'نام' کالم)۔کالم پیرامیٹر کالم کی وضاحت کرتا ہے جس میں الگ الگ کالموں میں تبدیل ہونے والی انوکھی اقدار پر مشتمل ہے (اس معاملے میں ، 'مضمون' کالم)۔اقدار پیرامیٹر کالم کی وضاحت کرتا ہے جس میں نئے کالموں میں رکھی جانے والی اقدار پر مشتمل ہے (اس معاملے میں ، 'اسکور'"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں گاڑیوں کے سینسر کا ڈیٹا ہوتا ہے۔سڑک کی حفاظت کو بہتر بنانے کے ل you آپ ڈرائیور کے رویے کے نمونوں اور بے ضابطگیوں کا تجزیہ اور ان کا پتہ کیسے لگائیں گے؟",
        "Answer": "پانڈاس ڈیٹا ٹائم ڈیٹا کو موثر انداز میں سنبھالنے کے لئے مختلف فنکشنلیاں مہیا کرتا ہے۔پانڈوں میں ڈیٹ ٹائم ڈیٹا کے ساتھ کام کرنے کے لئے کچھ عام کاروائیاں اور تکنیک یہ ہیں: ڈور کو ڈیٹ ٹائم میں تبدیل کرنا: اگر آپ کا ڈیٹ ٹائم ڈیٹا اسٹرنگ فارمیٹ میں ہے تو ، آپ اسے ڈیٹ ٹائم فارمیٹ میں تبدیل کرنے کے لئے ٹو_ڈیٹ ٹائم () فنکشن کا استعمال کرسکتے ہیں۔فارمیٹ پیرامیٹر کی وضاحت کرکے ، آپ ان پٹ سٹرنگ کی شکل کی وضاحت کرسکتے ہیں۔اجزاء: آپ ڈیٹ ٹائم کالم کے مختلف اجزاء نکال سکتے ہیں ، جیسے سال ، مہینہ ، دن ، گھنٹہ ، منٹ ، اور دوسرا ، ڈی ٹی ایکسیسر ڈاٹ پیتھون کوپی کوڈڈف ['سال'] = ڈی ایف ['تاریخ']۔ dt.yeardf['مہینہ'] = df ['تاریخ']ایک مخصوص تعدد پر مبنی مجموعی یا ڈاون سیمپل ڈیٹا ، جیسے گھنٹہ ، روزانہ ، ماہانہ ، وغیرہ۔ پیتھون کوپی کوڈڈف_ریسمپلڈ = df.resample ('d')۔ رقم () # روزانہ تعدد اور رقم کی قیمتوں میں دوبارہ نمونہ: آپ تاریخوں کو منتقل کرسکتے ہیں۔شفٹ () کے طریقہ کار کا استعمال کرتے ہوئے ایک ڈیٹ ٹائم کالم کو آگے یا پیچھے کی طرف۔یہ وقت کے اختلافات کا حساب لگانے یا پیچھے رہ جانے والے متغیرات بنانے کے ل useful مفید ثابت ہوسکتا ہے۔تاریخ کی حدود ، آپ موازنہ آپریٹرز کے ساتھ بولین انڈیکسنگ کا استعمال کرسکتے ہیں۔آپریٹر کا استعمال کرتے ہوئے۔نتیجہ ایک ٹائم ڈیلٹا آبجیکٹ ہے ، جو دو تاریخوں یا اوقات کے درمیان فرق کی نمائندگی کرتا ہے۔ٹائم زون سے واقف ڈیٹ ٹائم کالموں کو تبدیل کرنے اور ٹائم زون کے تبادلوں کو انجام دینے کے طور پر۔ پیتھون کوپی کوڈڈف ['ڈیٹ ٹائم'] = ڈی ایف ['ڈیٹ ٹائم']['ڈیٹ ٹائم']لائبریری ڈیٹ ٹائم ڈیٹا کو جوڑ توڑ ، تجزیہ کرنے اور دیکھنے کے لئے وسیع صلاحیتوں کو فراہم کرتی ہے ، جس سے آپ کو نفیس کاروائیاں انجام دینے اور وقت پر مبنی ڈیٹاسیٹس سے قیمتی بصیرت حاصل کرنے کے قابل بناتا ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں اسٹاک مارکیٹ کا ڈیٹا ہوتا ہے۔ٹائم سیریز تجزیہ اور مشین سیکھنے کی تکنیک کا استعمال کرتے ہوئے آپ اسٹاک کی قیمت کی نقل و حرکت کا تجزیہ اور پیش گوئی کریں گے؟",
        "Answer": "پانڈوں میں ، آپ متعدد تکنیکوں کا استعمال کرتے ہوئے دوٹوک متغیر کو عددی اقدار میں تبدیل کرسکتے ہیں۔یہاں تین عام طریقے ہیں: لیبل انکوڈنگ: لیبل انکوڈنگ ایک متغیر متغیر میں ہر انوکھے زمرے کو ایک انوکھا عددی لیبل تفویض کرتا ہے۔اسکلرن کی لیبلینکوڈر کلاس۔ پریپروسیسنگ ماڈیول کو لیبل انکوڈنگ کے لئے استعمال کیا جاسکتا ہے۔ایک گرم انکوڈنگ ایک متغیر متغیر میں ہر انوکھے زمرے کے لئے بائنری کالم بناتا ہے۔پانڈاس ایک گرم انکوڈنگ کو انجام دینے کے لئے get_dummies () فنکشن مہیا کرتا ہے۔یہ نقشہ () فنکشن.پیتھون کوپی کوڈ میپنگ = {'زمرہ 1': 0 ، 'زمرہ 2': 1 ، 'زمرہ 3': 2} ڈی ایف ['انکوڈڈ کالم'] = ڈی ایف ['زمرہ دار کالم'] کا استعمال کرتے ہوئے کیا جاسکتا ہے۔ نقشہ (میپنگ (میپنگ (میپنگ (میپنگ) ہر طریقہ کے اپنے فوائد اور تحفظات ہیں۔لیبل انکوڈنگ زمرے کے مابین عام تعلقات کو محفوظ رکھتی ہے لیکن غیر اعلانیہ آرڈینٹی کو متعارف کر سکتی ہے۔ایک گرم انکوڈنگ آرڈینٹی کے مسائل سے گریز کرتی ہے لیکن کالموں کی ایک بڑی تعداد کا باعث بن سکتی ہے۔کسٹم میپنگ آپ کو میپنگ کو واضح طور پر بیان کرنے کی اجازت دیتی ہے لیکن دستی تفصیلات کی ضرورت ہوتی ہے۔ یہ ضروری ہے کہ آپ کے زمرہ جات کی نوعیت اور آپ کے تجزیے کی ضروریات کی بنیاد پر مناسب طریقہ کا انتخاب کریں۔ان عوامل پر غور کریں جیسے منفرد زمروں کی تعداد ، آرڈینٹی کی موجودگی ، اور اس کے بعد کے تجزیہ یا مشین لرننگ ماڈل پر اثرات۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا گیا ہے جس میں سوشل میڈیا ڈیٹا ہے۔سوشل میڈیا مارکیٹنگ کی حکمت عملی کو بہتر بنانے کے ل you آپ صارف کی مصروفیت اور مواد کی مقبولیت کے نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "پانڈوں میں CSV فائل میں ڈیٹا فریم کو بچانے کے ل you ، آپ TO_CSV () طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس بطور PD# ایک ڈیٹا فریمیٹا = {'نام' بنائیں: ['جان' ، 'ایملی' ، 'ریان'] ، 'عمر': [28 ، 35 ، 42] ، 'تنخواہ': [[[28 ، 35 ، 42]50000 ، 60000 ، 55000]} df = pd.dataframe (ڈیٹا)# ڈیٹا فریم کو CSV fiderf.to_csv ('آؤٹ پٹ سی ایس وی' ، انڈیکس = غلط) میں محفوظ کریں ، اس مثال میں ، TO_CSV () کے طریقہ کار کو ڈیٹا فریم پر بلایا گیا ہے۔ڈی ایف۔پہلا پیرامیٹر فائل کا راستہ یا فائل کا نام ہے جہاں آپ CSV فائل کو محفوظ کرنا چاہتے ہیں۔اس معاملے میں ، ہم اسے 'آؤٹ پٹ سی ایس وی' کے طور پر محفوظ کرتے ہیں۔انڈیکس پیرامیٹر کو CSV فائل سے انڈیکس کالم کو خارج کرنے کے لئے غلط پر سیٹ کیا گیا ہے۔پہلے سے طے شدہ طور پر ، کالم کے نام CSV فائل میں پہلی صف کے طور پر شامل کیے جائیں گے۔ اس کوڈ کو چلانے کے بعد ، موجودہ ورکنگ ڈائرکٹری میں 'آؤٹ پٹ سی ایس وی' نامی ایک فائل بنائی جائے گی ، جس میں CSV فارمیٹ میں ڈیٹا فریم کے ڈیٹا پر مشتمل ہے۔آپ اپنی ضروریات کی بنیاد پر اضافی پیرامیٹرز ، جیسے ڈیلیمیٹر ، ہیڈر ، انکوڈنگ ، اور دیگر کی وضاحت کرکے TO_CSV () کے طریقہ کار کو اپنی مرضی کے مطابق بنا سکتے ہیں۔کسی ڈیٹا فریم کو کسی CSV فائل میں محفوظ کرنے کے لئے دستیاب اختیارات کے بارے میں مزید معلومات کے لئے پانڈاس دستاویزات کا حوالہ دیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر سروے کے ردعمل ہوتے ہیں۔آپ کس طرح ان عوامل کا تجزیہ اور شناخت کریں گے جو صارفین کے مجموعی تجربے کو بہتر بنانے کے ل customer صارفین کے اطمینان میں معاون ہیں؟",
        "Answer": "پانڈوں میں ڈیٹا فریم میں سی ایس وی فائل سے ڈیٹا پڑھنے کے ل you ، آپ ریڈ_ سی ایس وی () فنکشن استعمال کرسکتے ہیں۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT Pandas جیسے PD# CSV فائل سے ڈیٹا کو DATAFRAMEDF = PD.READ_CSV ('data.csv') میں پڑھیں اس مثال میں ، READ_CSV () فنکشن کہا جاتا ہے ، اور پہلا پیرامیٹر فائل کا راستہ ہے۔یا CSV فائل کا فائل نام جو آپ پڑھنا چاہتے ہیں۔اس معاملے میں ، ہم فرض کرتے ہیں کہ فائل کا نام 'data.csv'.ped ڈیفالٹ کے ذریعہ رکھا گیا ہے ، Read_csv () فرض کرتا ہے کہ CSV فائل میں کالم کے ناموں کے ساتھ ہیڈر قطار ہے ، اور اس میں اقدار کو الگ کرنے کے لئے کوما (،) کو ڈیمیمیٹر کے طور پر استعمال کیا جاتا ہے۔ہر صف میںاگر آپ کی CSV فائل میں ایک مختلف ڈیمیمیٹر ہے تو ، آپ اسے ڈیمیمیٹر یا ایس ای پی پیرامیٹر کا استعمال کرتے ہوئے ، جیسے pd.read_csv ('data.csv' ، ڈیلیمیٹر = '؛') استعمال کرکے اس کی وضاحت کرسکتے ہیں۔کسی متغیر کو تفویض کریں ، اس معاملے میں ، ڈی ایف۔اس کے بعد آپ پانڈاس کا استعمال کرتے ہوئے ڈیٹا فریم پر مختلف آپریشنز اور تجزیے انجام دے سکتے ہیں۔ اگر سی ایس وی فائل میں کوئی ہیڈر قطار نہیں ہے تو ، آپ ہیڈر پیرامیٹر کو کسی کو بھی سیٹ نہیں کرسکتے ہیں اور بعد میں کالم کے ناموں کو دستی طور پر تفویض کرسکتے ہیں ، یا آپ نام پیرامیٹر کا استعمال کرتے ہوئے کالم کے ناموں کی وضاحت کرسکتے ہیں ، جیسےpd.read_csv ('data.csv' ، ہیڈر = کوئی نہیں ، نام = ['Col1' ، 'Col2' ، 'Col3'])۔ اضافی طور پر ، پانڈاس مختلف CSV فائل فارمیٹس کو سنبھالنے کے لئے بہت سے دوسرے اختیارات فراہم کرتا ہے ، جیسے گمشدہ اقدار کو سنبھالنا۔، کالموں کے لئے ڈیٹا کی اقسام کی وضاحت کرنا ، اور بہت کچھ۔سی ایس وی فائلوں کو ڈیٹا فریم میں پڑھنے کے لئے دستیاب اختیارات کے بارے میں مزید معلومات کے ل You آپ پانڈاس دستاویزات کا حوالہ دے سکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر کلیک اسٹریم ڈیٹا ہوتا ہے۔آپ کلیک اسٹریم نمونوں کی بنیاد پر ویب سائٹ نیویگیشن اور صارف کے تجربے کا تجزیہ اور ان کو کس طرح بہتر بنائیں گے؟",
        "Answer": "ڈیٹا فریم میں آؤٹ لیئرز کو سنبھالنا مختلف تکنیکوں کا استعمال کرتے ہوئے کیا جاسکتا ہے۔یہاں کچھ عام نقطہ نظر ہیں: آؤٹ لیئرز کی نشاندہی کرنا: پہلے ، اپنے ڈیٹا فریم میں آؤٹ لیئرز کی شناخت کرنا ضروری ہے۔آؤٹ لیئرز کا پتہ لگانے کے ل You آپ اعداد و شمار کے طریقوں ، تصور ، یا ڈومین کے علم کا استعمال کرسکتے ہیں۔کچھ عام طریقوں میں شامل ہیں: باکس پلاٹ: باکس پلاٹوں کا استعمال کرتے ہوئے ہر عددی کالم کی تقسیم کا تصور کریں اور وسوسوں سے باہر کسی بھی نکات کو ممکنہ آؤٹ لیئرز کے طور پر شناخت کریں۔ایک زیڈ سکور کسی خاص دہلیز (جیسے ، 3) کے طور پر آؤٹ لیئرز ڈاٹ آئی کیو آر (انٹرکورٹائل رینج) کے اوپر: ہر عددی کالم کے لئے آئی کیو آر کا حساب لگائیں اور کسی خاص حد سے باہر پوائنٹس پر غور کریں (جیسے IQR 1.5 گنا)آؤٹ لیئرز: ایک بار جب آؤٹ لیئرز کی نشاندہی ہوجاتی ہے تو ، آپ ان کو ہٹانے یا اپنے ڈیٹا فریم سے فلٹر کرنے کا انتخاب کرسکتے ہیں۔تاہم ، یہ ضروری ہے کہ آپ اپنے ڈیٹا اور تجزیہ پر آؤٹ لیئرز کو ہٹانے کے اثرات پر غور سے غور کریں۔آؤٹ لیئرز کو ہٹانا قیمتی معلومات کے ضائع ہونے یا آپ کے تجزیے کو تعصب کا باعث بن سکتا ہے۔اگر آپ آؤٹ لیئرز کو ہٹانے کا فیصلہ کرتے ہیں تو ، آپ آؤٹ لیئرز پر مشتمل قطاروں کو فلٹر کرنے کے لئے ڈراپ () طریقہ یا بولین انڈیکسنگ کا استعمال کرسکتے ہیں۔۔اس سے مجموعی تقسیم کو محفوظ رکھتے ہوئے باہر جانے والوں کے اثر و رسوخ کو کم کرنے میں مدد ملتی ہے۔آپ عددی کالم میں آؤٹ لیئرز کو جیتنے کے لئے scipy.stats.mstats.winsore () فنکشن استعمال کرسکتے ہیں۔ڈی ایف ['ونسورائزڈ کالم'] = ونسورائزڈ_ ویلیو اسٹراانسفارمیشن: کچھ معاملات میں ، آپ کے ڈیٹا میں ریاضی کی تبدیلیوں کا اطلاق کرنے سے باہر جانے والوں کے اثرات کو کم کرنے میں مدد مل سکتی ہے۔مثال کے طور پر ، آپ انتہائی اقدار کے اثر و رسوخ کو کم کرنے کے لئے کالم کے لوگرتھم یا مربع روٹ لے سکتے ہیں۔آپ مضبوط اعدادوشمار کے طریقوں کا استعمال کرسکتے ہیں جو باہر جانے والوں کے لئے کم حساس ہیں۔مثال کے طور پر ، آپ وسط کو مرکزی رجحان کی پیمائش کے طور پر استعمال کرسکتے ہیں۔ڈیٹا ، آپ کے تجزیے کا سیاق و سباق ، اور آپ کے منصوبے کے اہداف۔احتیاط کا استعمال کرنا ضروری ہے اور آپ کے ڈیٹا اور اس کے بعد کے تجزیوں پر آؤٹ لیئر ہینڈلنگ تکنیک کے اثرات کا بغور جائزہ لینا ضروری ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں مصنوعات کی فروخت کا ڈیٹا ہوتا ہے۔مارکیٹنگ اور فروخت کی حکمت عملی کی رہنمائی کے ل you آپ کس طرح سب سے زیادہ منافع بخش مصنوعات اور مارکیٹ طبقات کا تجزیہ اور شناخت کریں گے؟",
        "Answer": "پانڈوں میں ، آپ Pivot_table () فنکشن کا استعمال کرتے ہوئے ایک پائیوٹ ٹیبل تشکیل دے سکتے ہیں۔ایک محور ٹیبل آپ کو ایک یا زیادہ کالموں کی بنیاد پر اعداد و شمار کا خلاصہ اور مجموعی ڈیٹا کی اجازت دیتا ہے ، جس سے اعداد و شمار کی کراس ٹیبلولیشن مل جاتی ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD## ایک ڈیٹا فریمیٹا = {'زمرہ' بنائیں: ['a' ، 'b' ، 'a' ، 'b' ، 'a' ، 'b'] ، 'آئٹم': [[['x' ، 'x' ، 'y' ، 'Y' ، 'z' ، 'z'] ، 'قدر': [10 ، 15 ، 20 ، 25 ، 30 ، 35]} df = pd.dataframe (ڈیٹا)# ایک Pivot tablepivot_table = df.pivot_table (index = 'زمرہ' ، کالم = 'آئٹم' ، اقدار = 'ویلیو' ، Aggfunc = 'رقم') بنائیں ، اس مثال میں ، Pivot_table () فنکشن ڈیٹا فریم DF پر بلایا گیا ہے۔انڈیکس پیرامیٹر کالم (زبانیں) کی وضاحت کرتا ہے جس کے نتیجے میں پیوٹ ٹیبل کے اشاریہ کے طور پر استعمال کیا جائے ، کالم پیرامیٹر کالم (زبانیں) کی وضاحت کرتا ہے جو محور کی جدول کے کالموں کے طور پر استعمال ہوتا ہے ، اور اقدار پیرامیٹر کالم کی وضاحت کرتا ہے۔مجموعی اور خلاصہ۔ مذکورہ کوڈ میں ، ہم 'زمرہ' کے ساتھ انڈیکس کے ساتھ ایک محور ٹیبل تیار کرتے ہیں ، کالم کے طور پر 'آئٹم' ، اور اقدار کے طور پر 'قدر' کرتے ہیں۔Aggfunc پیرامیٹر 'رقم' پر سیٹ کیا گیا ہے ، اس بات کا اشارہ ہے کہ محور ٹیبل میں اقدار 'ویلیو' کالم میں متعلقہ اقدار کا مجموعہ ہونی چاہئے۔ نتیجے میں محور ٹیبل میں 'زمرہ' انڈیکس ، 'آئٹم' کے طور پر ہوگا۔کالم ، اور مجموعی اقدار کو ٹیبل کی قدر کے طور پر۔کسی بھی گمشدہ اقدار کو پہلے سے طے شدہ طور پر نان سے بھر دیا جائے گا۔ آپ اضافی پیرامیٹرز کی وضاحت کرکے Pivot_table () فنکشن کو مزید اپنی مرضی کے مطابق بناسکتے ہیں ، جیسے ایک مخصوص قدر کے ساتھ گمشدہ اقدار کو پُر کرنے کے لئے Fil_value ، سبٹوٹل اور گرینڈ کل قطاروں/کالموں کو شامل کرنے کے لئے مارجن ، اور دیگر شامل ہیں۔، آپ کی ضروریات کی بنیاد پر۔محور کی میزیں بنانے کے لئے دستیاب اختیارات کے بارے میں مزید معلومات کے لئے پانڈاس دستاویزات کا حوالہ دیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں صحت کی دیکھ بھال کا ڈیٹا ہوتا ہے۔صحت کی دیکھ بھال کے وسائل کی منصوبہ بندی کی رہنمائی کے ل you آپ مریضوں کے آبادیاتی اعداد و شمار اور طبی حالات میں نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم میں کالموں کے مابین ارتباط کا حساب لگانے کے ل you ، آپ پانڈوں میں کور () کا طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال یہ ہے: PD## AS PD# ایک ڈیٹا فریمیٹا = {'کالم 1': [1 ، 2 ، 3 ، 4 ، 5] ، 'کالم 2': [2 ، 4 ، 6 ، 8 ، 10] ، 'کالم 3' بنائیں۔: [3 ، 6 ، 9 ، 12 ، 15]} df = pd.dataframe (ڈیٹا)# ارتباط میٹرکسکوریلیشن_میٹرکس = df.corr () کا حساب لگائیں اس مثال میں ، کور () طریقہ کو ڈیٹا فریم ڈی ایف پر کہا جاتا ہے۔کور () کا طریقہ ڈیٹا فریم کے کالموں کے مابین جوڑے کے ارتباط کا حساب لگاتا ہے۔ اس کے نتیجے میں ارتباط میٹرکس ایک ڈیٹا فریم ہے جہاں ہر سیل دو کالموں کے مابین ارتباط کے گتانک کی نمائندگی کرتا ہے۔ارتباط کے گتانک کی حد -1 سے 1 تک ہوتی ہے ، جہاں -1 ایک کامل منفی ارتباط کی نشاندہی کرتا ہے ، 1 ایک کامل مثبت ارتباط کی نشاندہی کرتا ہے ، اور 0 کسی بھی ارتباط کی نشاندہی نہیں کرتا ہے۔ پہلے سے طے شدہ ، کور () طریقہ کار پیئرسن ارتباط کے گتانک کا استعمال کرتا ہے ، جو لکیری پیمائش کرتا ہے۔متغیر کے مابین تعلقات۔آپ کور () طریقہ کار کے طریقہ کار پیرامیٹر کا استعمال کرکے مختلف ارتباط کے طریقوں کی وضاحت کرسکتے ہیں۔مثال کے طور پر ، آپ اسپیئر مین کے رینک کے ارتباط کے گتانک یا 'کینڈل' کے لئے 'اسپیئر مین' استعمال کرسکتے ہیں۔کالموں کے ہر جوڑے کے لئے ارتباط کی اقدار۔ آپ 'کالم 1' اور 'کالم 2' کے مابین ارتباط حاصل کرنے کے لئے ارتباط میٹرکس ، جیسے ارتباطی میٹرکس ، جیسے ارتباط_میٹرکس ['کالم 1'] ['کالم 2'] کی نشاندہی کرکے انفرادی ارتباط کی اقدار تک رسائی حاصل کرسکتے ہیں۔CORR () طریقہ ڈیفالٹ کے ذریعہ عددی کالموں کے لئے جوڑے کے ارتباط کا حساب لگاتا ہے۔اگر آپ کے ڈیٹا فریم میں غیر عددی کالم ہیں تو ، آپ کو ارتباط کا حساب لگانے سے پہلے ان کو پریپروسیس یا انکوڈ کرنے کی ضرورت پڑسکتی ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسی ریستوراں کے لئے کسٹمر ریویو ڈیٹا ہوتا ہے۔آپ جائزوں میں سب سے زیادہ مذکورہ پکوان کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "کسی ڈیٹا فریم میں کالم کے مجموعی مجموعہ کا حساب لگانے کے ل you ، آپ پانڈوں میں کمم () طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT پانڈاس PD# ایک ڈیٹا فریمیٹا = {'کالم 1' بنائیں: [1 ، 2 ، 3 ، 4 ، 5]} df = pd.dataframe (اعداد و شمار)# کالم ڈی ایف کے جمع شدہ رقم کا حساب لگائیں ['cumulativesum'] = df [' کالم 1 ']. cumsum () اس مثال میں ، cumsum () کے طریقہ کار کو ڈیٹا فریم DF کے' کالم 1 'کالم پر کہا جاتا ہے۔cumsum () کا طریقہ مخصوص کالم میں اقدار کی مجموعی رقم کا حساب لگاتا ہے۔ اس کے نتیجے میں مجموعی رقم ڈیٹا فریم DF میں 'cumulativesum' نامی ایک نئے کالم کو تفویض کی گئی ہے۔'cumulativesum' کالم میں ہر قدر 'کالم 1' کالم میں موجودہ قدر سمیت تمام سابقہ اقدار کے مجموعہ کی نمائندگی کرتی ہے۔مزید برآں ، پانڈاس دیگر مجموعی کارروائیوں کا حساب لگانے کے لئے اسی طرح کے طریقے مہیا کرتے ہیں ، جیسے کمولیٹو پروڈکٹ کے لئے کمپرڈ () ، کم سے زیادہ کے لئے کماکس () ، اور کم سے کم کے لئے کمین ()۔ڈیٹا فریم کے انڈیکس کا۔اگر آپ ایک مختلف ترتیب میں مجموعی رقم کا حساب لگانا چاہتے ہیں تو ، آپ cumsum () طریقہ کار کو لاگو کرنے سے پہلے ترتیب_ ویلیوز () کے طریقہ کار کا استعمال کرتے ہوئے ڈیٹا فریم کو ترتیب دے سکتے ہیں۔df_sorted ['کالم 1']۔ cumsum () اس سے یہ یقینی بنائے گا کہ کالم میں اقدار کے مطلوبہ ترتیب کی بنیاد پر مجموعی رقم کا حساب لگایا جائے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں مینوفیکچرنگ پلانٹ سے سینسر ڈیٹا ہوتا ہے۔بحالی کے نظام الاوقات کو بہتر بنانے کے ل you آپ سامان کی ناکامی کے نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم میں کالم میں رولنگ ونڈو فنکشن لگانے کے ل you ، آپ پانڈوں میں رولنگ () کا طریقہ استعمال کرسکتے ہیں۔رولنگ () کا طریقہ ایک مخصوص سائز کی رولنگ ونڈو تشکیل دیتا ہے اور آپ کو ونڈو پر مختلف افعال لگانے کی اجازت دیتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT پانڈاس PD# ایک ڈیٹا فریمیٹا = {'کالم 1' بنائیں: [1 ، 2 ، 3 ، 4 ، 5]} DF = PD.Dataframe (ڈیٹا)# رولنگ ونڈو فنکشن ونڈو_سائز = 3DF ['رولنگ مین'] = DF [' کالم 1 ']۔ رولنگ (ونڈو = ونڈو_سائز). مین () اس مثال میں ، رولنگ () کے طریقہ کار کو ڈیٹا فریم ڈی ایف کے' کالم 1 'کالم پر کہا جاتا ہے۔رولنگ () کا طریقہ ایک مخصوص سائز کی رولنگ ونڈو بناتا ہے ، جس کی وضاحت ونڈو پیرامیٹر کے ذریعہ کی جاتی ہے۔اس معاملے میں ، ہم ونڈو_ سائز 3 پر سیٹ کرتے ہیں ، لہذا رولنگ ونڈو میں موجودہ قیمت اور دو سابقہ اقدار شامل ہوں گی۔ رولنگ ونڈو بنانے کے بعد ، ہم ونڈو پر ایک فنکشن کا اطلاق کرسکتے ہیں ، جیسے اس مثال میں () فنکشن۔وسط () فنکشن رولنگ ونڈو میں اقدار کی اوسط قدر کا حساب لگاتا ہے۔ رولنگ ونڈو فنکشن سے نتیجے میں ہونے والی اقدار کو ڈیٹا فریم ڈی ایف میں 'رولنگ مین' کے نام سے ایک نئے کالم میں تفویض کیا جاتا ہے۔'رولنگ مین' کالم میں ہر قدر 'کالم 1' کالم میں متعلقہ ونڈو کی اوسط قدر کی نمائندگی کرتی ہے۔، رولنگ ونڈو کے لئے مطلوبہ حساب کتاب پر منحصر ہے۔مزید برآں ، آپ ونڈو کے سائز کو ایڈجسٹ کرسکتے ہیں اور اپنی ضروریات کی بنیاد پر مختلف افعال کا انتخاب کرسکتے ہیں۔ نوٹ کریں کہ پہلی چند قطاروں کے لئے جہاں مکمل ونڈو بنانے کے ل enough کافی سابقہ اقدار موجود نہیں ہیں ، پانڈاس رولنگ ونڈو کے نتائج کو نان کی اقدار تفویض کریں گے۔آپ رولنگ () کے طریقہ کار میں MIN_PERIODS پیرامیٹر کا استعمال کرسکتے ہیں تاکہ نتائج کا حساب لگانے کے لئے درکار غیر نول اقدار کی کم سے کم تعداد کی وضاحت کی جاسکے۔= 1) .مین () اس بات کو یقینی بنائے گا کہ رولنگ ونڈو فنکشن کا حساب کتاب بھی کم سے کم اقدار والی قطاروں کے لئے کیا جاتا ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں پرواز میں تاخیر کا ڈیٹا ہوتا ہے۔آپ رجعت تجزیہ کا استعمال کرتے ہوئے پرواز میں تاخیر میں معاون ان عوامل کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم میں عددی کالموں کو معمول پر لانے یا معیاری بنانے کے ل you ، آپ اسکلرن.پروسیسنگ ماڈیول میں پری پروسیسنگ افعال استعمال کرسکتے ہیں۔خاص طور پر ، آپ عام ہونے کے لئے من میکس اسکیلر یا معیاری کاری کے لئے اسٹینڈرڈس اسکیلر کا استعمال کرسکتے ہیں۔یہاں ایک ڈیٹا فریم میں عددی کالموں پر معمول کے مطابق اور معیاری کاری کرنے کی ایک مثال ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور PDFROM SKLEREN.Preprocessing درآمد MINMAXCALER ، اسٹینڈرڈس اسکیلر# ایک ڈیٹا فریمیٹا = {'کالم 1' بنائیں: [1 ، 2 ، 3 ، 4 ، 5].DF.COLLUMS)# عددی کالم اسکیلر = اسٹینڈرڈس اسکیلر () df_standardized = pd.dataframe (Scaler.fit_transfor (DF) ، کالم = df.colums) کو معیاری بنائیں ، اس مثال کے طور پر ، منیکس اسکیلر کو عام کرنے کے لئے استعمال کیا جاتا ہے ، اور اسٹینڈرڈسکلر استعمال کیا جاتا ہے ، اور اسٹینڈرڈسکلر استعمال کیا جاتا ہے ، اور اسٹینڈرڈسکلر استعمال کیا جاتا ہے ، اور اسٹینڈرڈسکلر استعمال کیا جاتا ہے۔دونوں اسکیلرز کو شروع کیا جاتا ہے ، اور پھر اسکیلنگ آپریشن کو انجام دینے کے لئے Dataframe DF پر Fit_transform () کے طریقہ کار کو طلب کیا جاتا ہے۔ اس کے نتیجے میں معمول کے مطابق ڈیٹا فریم (DF_Normalized) اور معیاری ڈیٹا فریم (DF_standardized) اصل ڈیٹا فریم (DF) کی طرح کالم ہوتا ہے ، جس میں ، کے ساتھ ، اصل ڈیٹا فریم (DF) کے ساتھ ایک جیسے کالم ہوتے ہیں۔اسکیلنگ کے طریقہ کار کے مطابق تبدیل کی جانے والی عددی اقدار۔ نارملائزیشن ہر کالم میں اقدار کو ایک مخصوص رینج میں ترازو کرتی ہے ، عام طور پر 0 اور 1 کے درمیان۔ یہ اقدار کے مابین رشتہ دار تعلقات کو محفوظ رکھتا ہے۔اس مثال کے طور پر منیماکس اسکیلر فارمولا (x - منٹ) / (زیادہ سے زیادہ - منٹ) کا استعمال کرتے ہوئے اقدار کو ترازو کرتا ہے۔ دوسری طرف ، معیاری کاری ، ہر کالم میں اقدار کو 0 اور معیاری انحراف 1 میں تبدیل کرتی ہے۔وسط کے آس پاس کے اعداد و شمار کو سنبھالتا ہے اور اقدار کے پھیلاؤ کو ایڈجسٹ کرتا ہے۔اس مثال میں اسٹینڈرڈرس اسکیلر فارمولا (x - مطلب) / std کا استعمال کرتے ہوئے اقدار کو معیاری بناتا ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا گیا ہے جس میں سوشل میڈیا ڈیٹا ہے۔آپ مختلف جغرافیائی علاقوں میں جذبات کی تقسیم کا تجزیہ اور تصور کیسے کریں گے؟",
        "Answer": "پانڈوں میں ، آپ ملٹی لیول انڈیکسنگ کو سنبھال سکتے ہیں ، جسے ملٹی انڈیکس کلاس کا استعمال کرتے ہوئے ، ہائیرارکیکل انڈیکسنگ بھی کہا جاتا ہے۔ملٹی لیول انڈیکسنگ آپ کو قطار اور کالم لیبل کی ایک سے زیادہ سطحوں کی اجازت دیتا ہے ، جو متعدد جہتوں کے ساتھ ڈیٹا کو منظم اور رسائی کا ایک طریقہ فراہم کرتا ہے۔ملٹی لیول انڈیکسنگ کے ساتھ ڈیٹا فریم کے ساتھ تخلیق اور کام کرنے کی ایک مثال یہ ہے: پی ڈی کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس PD# ملٹی لیول انڈیکسنگ ڈیٹا = {'لیول 1' کے ساتھ ایک ڈیٹا فریم بنائیں: ['A' ، 'A' ، 'B'، 'بی' ، 'سی' ، 'سی'] ، 'لیول 2': [1 ، 2 ، 1 ، 2 ، 1 ، 1 ، 2] ، 'قدر': [10 ، 20 ، 30 ، 40 ، 50 ، 50 ، 60]}df = pd.dataframe (ڈیٹا) df.set_index (['لیول 1' ، 'لیول 2'] ، ان پلیس = سچ) # ملٹی لیول انڈیکسنگ پرنٹ (df.loc ['a']) کے ساتھ ڈیٹا تک رسائی # لیول 1 لیبل کے ساتھ قطاریں'a'print (df.loc [' a '، 1]) # لیول 1 لیبل' A 'اور لیول 2 لیبل 1 پرنٹ (df.loc [' a ':' b ']) کے ساتھ ایک مخصوص قطار تک رسائی حاصل کریں) # سطح 1 کے ساتھ قطاریںلیبلز 'A' سے 'B'Print (df.loc [(' a '، 1) ،' ویلیو ']) # لیول 1 لیبل' A 'اور لیول 2 لیبل 1 # ری سیٹ کریں ملٹی لیول انڈیکسنگ ڈی ایف۔ ری سیٹ_ انڈیکس کے ساتھ ایک مخصوص سیل تک رسائی حاصل کریں۔ہم 'لیول 1' اور 'لیول 2' کالموں کی بنیاد پر ملٹی لیول انڈیکس کو سیٹ کرنے کے لئے سیٹ_ انڈیکس () کا طریقہ استعمال کرتے ہیں۔ ملٹی لیول انڈیکسنگ کے ساتھ ڈیٹا تک رسائی حاصل کرنے کے ل you ، آپ ایل او سی انڈیکسر استعمال کرسکتے ہیں۔ملٹی لیول انڈیکس لیبلوں کی بنیاد پر قطاروں یا خلیوں کو منتخب کرنے کے ل You آپ ایک ہی لیبل یا لیبلوں کا ایک لیبل لیبل کو منتقل کرسکتے ہیں۔مثال کے طور پر ، df.loc ['a'] 'لیول 1' لیبل 'اے' ، اور df.loc ['A' ، 1] کے ساتھ تمام قطاریں بازیافت کرتا ہے۔'لیول 2' لیبل 1. آپ ملٹی لیول انڈیکس لیبلوں پر مبنی قطاروں کی ایک رینج کو منتخب کرنے کے لئے سلائسنگ کا استعمال بھی کرسکتے ہیں ، جیسے DF.LOC ['A': 'B'] 'لیول 1' لیبل 'کے ساتھ قطاریں بازیافت کرنے کے لئے' A ':' B ']A 'to' B'. کثیر سطح کی اشاریہ سازی کے ساتھ کسی مخصوص سیل تک رسائی حاصل کرنے کے ل you ، آپ قطار اور کالم انڈیکسنگ دونوں کے ل lab لیبلوں کا ایک ٹیوپل پاس کرسکتے ہیں ، جیسے DF.LOC [('a' ، 1) ، 'قدر']۔اگر آپ ملٹی لیول انڈیکسنگ کو دوبارہ ترتیب دینا چاہتے ہیں اور سطح کو باقاعدہ کالموں میں تبدیل کرنا چاہتے ہیں تو ، آپ RESET_INDEX () طریقہ استعمال کرسکتے ہیں۔ ملٹی لیول انڈیکسنگ متعدد جہتوں کے ساتھ ڈیٹا کو منظم اور تجزیہ کرنے کا ایک طاقتور طریقہ فراہم کرتا ہے ، جس سے آپ آپریشن انجام دے سکتے ہیں۔اور انڈیکس میں مخصوص سطحوں یا سطح کے امتزاج پر مبنی انتخاب۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں آن لائن اسٹریمنگ ڈیٹا ہوتا ہے۔آپ مقبول انواع کا تجزیہ اور شناخت کیسے کریں گے اور صارفین کو اسی طرح کے مواد کی سفارش کریں گے؟",
        "Answer": "پانڈوں میں ڈایٹ ٹائم آبجیکٹ میں ڈور کے کالم کو تبدیل کرنے کے ل you ، آپ ٹو_ڈیٹ ٹائم () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن کسی تاریخ یا وقت کی سٹرنگ نمائندگی کو تجزیہ کرتا ہے اور اسے ڈیٹ ٹائم آبجیکٹ میں تبدیل کرتا ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY CODEMPORT پانڈاس PD# STRINGSDATA = {'تاریخ' کے کالم کے ساتھ ایک ڈیٹا فریم بنائیں: ['2021-01-01' ، '2021-02-01' ، '2021-01']}df = pd.dataframe (ڈیٹا)# 'تاریخ' کالم کو ڈیٹ ٹائم آبجیکٹ ڈی ایف میں تبدیل کریں ['تاریخ'] = pd.to_datetime (df ['تاریخ']) اس مثال میں ، ہمارے پاس ایک کالم کے ساتھ ایک ڈیٹا فریم DF ہے 'تاریخ''تاریخوں کی نمائندگی کرنے والے تار پر مشتمل ہے۔اس کالم کو ڈیٹ ٹائم آبجیکٹ میں تبدیل کرنے کے ل we ، ہم ٹو_ڈیٹ ٹائم () فنکشن استعمال کرتے ہیں اور کالم کو 'تاریخ' کو بطور دلیل پاس کرتے ہیں۔ٹو_ڈیٹ ٹائم () فنکشن ڈیٹ ٹائم آبجیکٹ کی ایک سیریز لوٹاتا ہے ، جسے ہم ڈیٹا فریم کے 'تاریخ' کالم کو واپس تفویض کرتے ہیں۔ اس تبدیلی کے بعد ، 'تاریخ' کالم میں موجود اقدار کو ڈیٹ ٹائم آبجیکٹ کے طور پر محفوظ کیا جاتا ہے ، جو آسان ہیرا پھیری کی اجازت دیتا ہے اورتاریخوں کا تجزیہ۔آپ ڈیٹ ٹائم آبجیکٹ پر مختلف کاروائیاں انجام دے سکتے ہیں ، جیسے دن ، مہینہ ، یا سال نکالنا ، وقت کے اختلافات کا حساب لگانا ، اور بہت کچھ۔ اگر کالم میں ڈوروں میں معیاری ISO 8601 فارمیٹ ('yyyy-mm) سے مختلف تاریخ کی شکل ہے۔-DD ') ، آپ ٹو_ڈیٹ ٹائم () فنکشن کے فارمیٹ پیرامیٹر کا استعمال کرتے ہوئے مناسب شکل فراہم کرسکتے ہیں۔مثال کے طور پر ، اگر ڈور 'DD-mm-yyyy' فارمیٹ میں ہیں تو ، آپ اس طرح کی شکل بیان کرسکتے ہیں: پائیٹون کوپی کوڈڈف ['تاریخ'] = pd.to_datetime (df ['تاریخ'] ، فارمیٹ = '٪ d-٪ m- ٪ y ') اپنے کالم میں ڈور کی شکل سے ملنے کے لئے صحیح فارمیٹ سٹرنگ کی وضاحت کرنا یقینی بنائیں۔ پہلے سے طے شدہ ، to_datetime () فنکشن یہ فرض کرتا ہے کہ ڈور تاریخوں کی نمائندگی کرتے ہیں۔اگر آپ کے کالم میں وقت یا ڈیٹا ٹائم کی اقدار کی نمائندگی کرنے والے تار شامل ہیں تو ، آپ پانڈوں کو خود بخود ڈیٹ ٹائم فارمیٹ.پیتھون کوپی کوڈڈف ['وقت'] = pd.to_datetime (df ['وقت'] ، infer_datetime_format = true) ، infer_datetime_format = true) کی نمائندگی کرنے کے لئے انفر_ڈیٹ ٹائم_فورمیٹ پیرامیٹر کا استعمال کرسکتے ہیں۔کالم ڈاٹ کام میں فراہم کردہ ڈوروں کی بنیاد پر ڈیٹ ٹائم فارمیٹ کا اندازہ لگانے کی کوشش کریں گے۔آپ کے ڈیٹا میں"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر سپورٹ ٹکٹ ہوتے ہیں۔آپ عام مسائل کا تجزیہ اور شناخت کیسے کریں گے اور قدرتی زبان پروسیسنگ کی تکنیکوں کا استعمال کرتے ہوئے خود بخود ٹکٹوں کی درجہ بندی کریں گے؟",
        "Answer": "پانڈاس سٹرنگ ہیرا پھیری کے متعدد طریقے مہیا کرتا ہے جو تار پر مشتمل کالموں پر سٹرنگ آپریشن کو سنبھالنے کے لئے استعمال ہوسکتے ہیں۔یہ طریقے .str لوازمات کے ذریعے دستیاب ہیں ، جو آپ کو مختلف تار کے کام انجام دینے کے ل string سٹرنگ طریقوں کے سوٹ تک رسائی حاصل کرنے کی سہولت دیتا ہے۔پانڈوں میں سٹرنگ ہیرا پھیری کو کس طرح سنبھالنے کی ایک مثال یہ ہے: PD# کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس اسٹرنگس ڈیٹا = {'سٹرنگ' کے کالم کے ساتھ ایک ڈیٹا فریم بنائیں: ['ہیلو ، ورلڈ!' ، 'ازگر بہت اچھا ہے' ، 'پانڈاس بہت اچھا ہے'']} df = pd.dataframe (ڈیٹا)# کالم ڈی ایف [' سبسٹرنگ '] = df [' string ']. str.extract (' (\\ w+) ') df [' placease '] = df [')'سٹرنگ'].str.contains ('عظیم')# کالم ڈی ایف میں ایک اسٹرنگ کو تبدیل کریں ['تبدیل'] = df ['string']. str.replace ('حیرت انگیز' ، 'حیرت انگیز')# ایک کالم کو متعدد کالم ایس ڈی ایف میں تقسیم کریں [[[['فرسٹ ورڈ' ، 'سیکنڈ ورڈ']] = df ['سٹرنگ']۔ str.split ('،' ، '، توسیع = سچ) اس مثال میں ، ہمارے پاس ایک ڈیٹا فریم DF ہے جس میں' اسٹرنگ 'پر مشتمل کالم ہے جس میں ڈور شامل ہیں۔ہم اس کالم میں سٹرنگ ہیرا پھیری کے مختلف طریقوں کو لاگو کرنے کے لئے .str لوازمات کا استعمال کرسکتے ہیں: ڈوروں سے ایک سٹرنگ نکالنے کے ل we ، ہم .str.extract () طریقہ استعمال کرتے ہیں اور ایک باقاعدہ اظہار کا نمونہ ((\\ w+)) نکالنے کے لئے فراہم کرتے ہیں۔ہر تار کا پہلا لفظ۔نتیجہ 'اسٹرنگ' کالم میں محفوظ ہے۔ تاروں کو بڑے میں تبدیل کرنے کے لئے ، ہم .str.upper () طریقہ استعمال کرتے ہیں۔نتیجہ 'اپر کیس' کالم میں محفوظ ہے۔ ہر تار کی لمبائی حاصل کرنے کے ل we ، ہم .str.len () طریقہ استعمال کرتے ہیں۔نتیجہ 'لمبائی' کے کالم میں محفوظ ہے۔ چیک کرنے کے لئے کہ آیا ہر تار میں کوئی مخصوص اسٹرنگ موجود ہے ، ہم .str.contains () طریقہ استعمال کرتے ہیں۔نتیجہ 'پر مشتمل' کالم میں محفوظ کیا جاتا ہے۔ ہر تار میں ایک سٹرنگ کو تبدیل کرنے کے ل we ، ہم .str.replace () طریقہ استعمال کرتے ہیں۔ہم لفظ 'حیرت انگیز' کو 'حیرت انگیز' کے ساتھ تبدیل کرتے ہیں۔نتیجہ 'تبدیل' کالم میں محفوظ کیا جاتا ہے۔ تاروں کو متعدد کالموں میں تقسیم کرنے کے لئے ، ایک حد بندی کی بنیاد پر ، ہم .str.split () طریقہ استعمال کرتے ہیں۔ہم کوما ('،') میں تاروں کو تقسیم کرتے ہیں اور اس کے نتیجے کو علیحدہ کالموں کو 'فرسٹ ورڈ' اور 'سیکنڈ ورڈ' میں بڑھا دیتے ہیں۔ یہ سٹرنگ ہیرا پھیری کی کارروائیوں کی صرف چند مثالیں ہیں جو آپ پانڈوں میں انجام دے سکتے ہیں۔.straps () ، Startswith () ، endswith () ، اور بہت کچھ کے ذریعے اور بھی بہت سارے سٹرنگ طریقے دستیاب ہیں۔آپ دستیاب سٹرنگ طریقوں کی جامع فہرست کے لئے سٹرنگ ہینڈلنگ پر پانڈاس دستاویزات کا حوالہ دے سکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کریڈٹ کارڈ فراڈ کا ڈیٹا ہوتا ہے۔آپ بے ضابطگی کا پتہ لگانے والے الگورتھم کا استعمال کرتے ہوئے جعلی لین دین کے نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "پانڈوں میں ٹیکسٹ سرچ اور مماثلت انجام دینے کے ل you ، آپ .str لوازمات کے ذریعہ فراہم کردہ مختلف تار کے طریقوں اور باقاعدہ تاثرات استعمال کرسکتے ہیں۔یہاں کچھ عام تکنیکیں ہیں: عین مطابق مماثلت: آپ == آپریٹر یا .eq () طریقہ کا استعمال کرتے ہوئے عین مطابق میچوں کی جانچ کرسکتے ہیں۔مثال کے طور پر: پائیتھون کوپی کوڈیمپورٹ پانڈاس بطور PD# اسٹرنگس ڈیٹا = {'متن' کے کالم کے ساتھ ایک ڈیٹا فریم بنائیں: ['ہیلو ، ورلڈ!' ، 'ازگر بہت اچھا ہے' ، 'پانڈاس بہت اچھا ہے']} df = pd.dataframe (ڈیٹا)# عین مطابق میچنگ ڈی ایف_سیکٹ_مچ = ڈی ایف [ڈی ایف ['متن'] == 'ازگر بہت اچھا ہے'] جزوی ملاپ: متن کے اندر سبسٹرنگز کی تلاش کے ل you ، آپ .str.contains () طریقہ استعمال کرسکتے ہیں۔یہ بولین ماسک لوٹاتا ہے جس سے یہ ظاہر ہوتا ہے کہ آیا ہر عنصر میں پیٹرن پایا جاتا ہے۔مثال کے طور پر: پائیٹون کوپی کوڈ# جزوی میچنگ ڈی ایف_پارٹیل_مچ = ڈی ایف [ڈی ایف ['ٹیکسٹ']۔ str.contains ('IS')] کیس غیر حساس مماثلت: کیس غیر حساس مماثلت انجام دینے کے ل you ، آپ کیس = جھوٹے پیرامیٹر کو استعمال کرسکتے ہیں۔.str.contains () طریقہ۔مثال کے طور پر: پائیٹون کوپی کوڈ# انجام دیں کیس غیر حساس مماثل میچنگ ڈی ایف_ کیس_یسنسیٹیو_مچٹ = ڈی ایف [ڈی ایف ['متن'].str.contains () طریقہ۔باقاعدگی سے اظہار متن کے نمونے کے ملاپ کے ل powerful طاقتور صلاحیتوں کو فراہم کرتا ہے۔مثال کے طور پر: پائیتھون کوپی کوڈ# باقاعدگی سے اظہار کریں مماثل ڈیف_ریجیکس_مچ = ڈی ایف [ڈی ایف ['ٹیکسٹ']۔.isin () طریقہ کار کا استعمال کرتے ہوئے اقدار کی فہرست کے خلاف عین مطابق سٹرنگ میچوں کی جانچ کریں۔مثال کے طور پر: پائیٹون کوپی کوڈ# اقدار کی فہرست کے ساتھ عین مطابق مماثلت = ['ہیلو ، ورلڈ!' ، 'پانڈاس بہت اچھا ہے'] df_exact_match_list = df [df ['text']۔ isin (values)] یہ صرف کچھ ہیںپانڈوں میں متن کی تلاش اور مماثل تکنیک کی مثالیں۔اپنی مخصوص ضروریات پر منحصر ہے ، آپ ان طریقوں کو منطقی آپریٹرز (جیسے ، اور کے لئے اور ، کے لئے) کے ساتھ جوڑ سکتے ہیں تاکہ متن کی مزید پیچیدہ کام انجام دیں۔مزید برآں ، آپ اپنے متن کے ملاپ کے کاموں کو مزید بہتر بنانے کے لئے اسٹارٹ ویتھ () ، اینڈسیتھ () ، میچ () ، اور فائنڈال () جیسے دوسرے سٹرنگ طریقوں کا استعمال کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں اسٹاک مارکیٹ کا ڈیٹا ہوتا ہے۔ایونٹ کے مطالعے کے تجزیے کا استعمال کرتے ہوئے آپ اسٹاک کی قیمتوں میں نقل و حرکت پر خبروں کے واقعات کے اثرات کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "پانڈوں میں اعلی کارڈنلٹی کے ساتھ زمرہ دار ڈیٹا کو سنبھالنا مشکل ہوسکتا ہے کیونکہ اس سے میموری کی نا اہلی اور سست کارکردگی کا باعث بن سکتا ہے۔اعلی کارڈنلٹی سے مراد ایک بڑی تعداد میں منفرد قسموں یا ایک متغیر متغیر میں سطح ہے۔پانڈوں میں اعلی کارڈنلٹی کے ساتھ زمرہ دار اعداد و شمار کو سنبھالنے کے لئے کچھ تکنیک یہ ہیں: زمرے کی تعداد کو کم کریں: اگر اعلی کارڈنلٹی بڑی تعداد میں نایاب یا غیر معمولی زمرے کی وجہ سے ہے تو ، آپ انہیں ایک علیحدہ زمرے میں گروپ کرنے یا اسی طرح کے ساتھ جوڑنے پر غور کرسکتے ہیں۔اقسام.اس سے اہم معلومات کو حاصل کرتے ہوئے کارڈنلٹی کو کم کرنے میں مدد مل سکتی ہے۔آپ ویلیو_کونٹ () جیسے طریقوں کا استعمال کرسکتے ہیں اور غیر معمولی زمرے کی نشاندہی کرنے اور گروپ کرنے کے لئے ایک حد کا اطلاق کرسکتے ہیں۔پانڈاس مختلف انکوڈنگ تکنیک مہیا کرتا ہے ، جیسے لیبل انکوڈنگ اور ایک گرم انکوڈنگ ، جو متغیر متغیرات کو عددی نمائندگی میں تبدیل کرسکتا ہے۔لیبل انکوڈنگ ہر زمرے میں ایک انوکھا عددی لیبل تفویض کرتا ہے ، جبکہ ایک گرم انکوڈنگ ہر زمرے کے لئے ڈمی متغیر پیدا کرتی ہے۔تاہم ، یہ بات ذہن میں رکھیں کہ ایک گرم انکوڈنگ کے نتیجے میں کالموں کی تعداد میں نمایاں اضافہ ہوسکتا ہے ، جو اعلی کارڈنلٹی ڈیٹا کے لئے ممکن نہیں ہوسکتا ہے۔ فریکوینسی انکوڈنگ: فریکوینسی انکوڈنگ ہر زمرے کو ڈیٹاسیٹ میں اپنی فریکوئنسی کے ساتھ تبدیل کرتی ہے۔یہ نقطہ نظر ہر زمرے کے واقعات کے تناسب کا استعمال کرتے ہوئے زمرہاتی متغیر کو انکوڈ کرتا ہے ، جو معلومات کی مفید نمائندگی ہوسکتا ہے۔آپ ہر زمرے کی تعدد کا حساب لگانے کے لئے ویلیو_کونٹ () فنکشن کا استعمال کرسکتے ہیں اور پھر تعدد کو اصل کالم پر نقشہ بنا سکتے ہیں۔اس زمرے کے لئے ہدف متغیر کی قدر۔اس تکنیک نے متغیر متغیر اور ہدف متغیر کے مابین تعلقات کو اپنی گرفت میں لے لیا ہے ، جو پیش گوئی کرنے والے ماڈلنگ کے لئے ممکنہ طور پر مفید معلومات فراہم کرتا ہے۔تاہم ، ٹارگٹ انکوڈنگ کے لئے محتاط توثیق کی ضرورت ہوتی ہے اور اسے زیادہ سے زیادہ مناسب ہونے کا خطرہ ہوسکتا ہے ، لہذا اسے احتیاط کے ساتھ استعمال کیا جانا چاہئے۔اس سے کارڈنلٹی کو منفرد اقدار کی پہلے سے طے شدہ تعداد میں کم کیا جاتا ہے۔ہیش فنکشن ہر زمرے کو بالٹیوں میں سے ایک پر نقشہ بناتا ہے ، جس سے موثر اسٹوریج اور حساب کتاب کی اجازت ملتی ہے۔تاہم ، یہ تصادم کا تعارف کرسکتا ہے ، جہاں مختلف قسموں کو ایک ہی بالٹی میں نقش کیا جاتا ہے۔ جہتی کمی: اگر اعلی کارڈنلٹی میموری یا کمپیوٹیشنل وسائل کے لحاظ سے ایک اہم مسئلہ پیدا کرتی ہے تو ، آپ طول و عرض میں کمی کی تکنیک جیسے پرنسپل جزو تجزیہ (پی سی اے) کے استعمال پر غور کرسکتے ہیں۔یا t-sne زمرہ متغیر کی جہت کو کم کرنے کے لئے۔یہ تکنیک اہم معلومات کو محفوظ کرتے ہوئے ایک کم جہتی جگہ میں متغیر متغیر کو پیش کرتی ہے۔ یہ بات اہم ہے کہ اعلی کارڈنلٹی کو سنبھالنے کا انتخاب مخصوص مسئلے ، اعداد و شمار کی نوعیت ، اور آپ کے تجزیہ یا ماڈلنگ کے کام کی ضروریات پر منحصر ہے۔میموری کے استعمال ، گنتی کے وقت ، تشریح ، اور بہاو تجزیہ یا ماڈلز پر ممکنہ اثرات کے مابین تجارتی تعلقات پر غور کریں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں سوشل میڈیا پر اثر انداز ہوتا ہے۔آپ منگنی میٹرکس پر مبنی اثر و رسوخ کے تعاون کے لئے زیادہ سے زیادہ وقت کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "پانڈوں میں دو ڈیٹا فریموں کے مابین عنصر کے حساب سے موازنہ کرنے کے ل you ، آپ موازنہ آپریٹرز (== ،! = ، <،> ، <= ،> =) یا مساوی () طریقہ استعمال کرسکتے ہیں۔یہ طریقے آپ کو دو ڈیٹا فریموں کے مابین متعلقہ عناصر کا موازنہ کرنے اور موازنہ کے نتائج کی نشاندہی کرنے والے ایک نیا ڈیٹا فریم یا بولین ماسک تیار کرنے کی اجازت دیتے ہیں۔یہاں آپ عنصر کے حساب سے موازنہ کیسے کرسکتے ہیں: موازنہ آپریٹرز کا استعمال: آپ موازنہ آپریٹرز کو براہ راست استعمال کرسکتے ہیں تاکہ دو ڈیٹا فریم عنصر کے مطابق موازنہ کیا جاسکے۔نتیجہ اصل ڈیٹا فریموں کی طرح ایک ہی شکل کا ڈیٹا فریم ہوگا ، جہاں ہر عنصر کے مقابلے کا نتیجہ ہوتا ہے۔مثال کے طور پر: PDTHONCOPY CODEMPORT پانڈاس PD# دو ڈیٹا اے ایف آر اے ایم ایس ڈی ایف 1 = pd.dataframe ({'A': [1 ، 2 ، 3] ، 'B': [4 ، 5 ، 6]}) DF2 = PD.Dataframe ({بنائیں'A': [1 ، 2 ، 4] ، 'B': [4 ، 5 ، 6]})# موازنہ آپریٹرز کامپارسن_ریسولٹ = DF1 == DF2in کا استعمال کرتے ہوئے عنصر کے لحاظ سے موازنہ کریں ، اس مثال کے ساتھ ، موازنہ_ریسولٹ اسی کے ساتھ ایک ڈیٹا فریم ہوگا۔شکل DF1 اور DF2 کے طور پر۔موازنہ_ریسولٹ میں ہر عنصر میں صحیح ہوگا اگر ڈی ایف 1 اور ڈی ایف 2 میں متعلقہ عناصر برابر ہیں ، اور غلط۔برابر ہیں یا نہیں۔یہ چیک کرتا ہے کہ آیا شکل ، کالم کے نام ، اور عنصر کی اقدار ایک جیسی ہیں۔مثال کے طور پر: پائیتھون کوپی کوڈ# چیک کریں کہ آیا اس کی مثال میں ایکولس () میتھڈیر_ ای کیوئل = ڈی ایف 1.equals (DF2) کا استعمال کرتے ہوئے دو ڈیٹا فریم برابر ہیں یا نہیں۔آپ پانڈوں میں دو ڈیٹا فریموں کے مابین عنصر کے حساب سے موازنہ کریں۔اپنی مخصوص ضروریات پر منحصر ہے ، آپ ان موازنہوں کو مختلف طریقوں سے ڈیٹا کو فلٹر ، ماسک یا جوڑ توڑ کرنے کے لئے استعمال کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر کی خریداری کا ڈیٹا ہوتا ہے۔ایسوسی ایشن رول کان کنی کا استعمال کرتے ہوئے آپ مارکیٹ کی ٹوکریوں میں اکثر خریدی گئی اشیاء کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم میں عدم توازن کی کلاسوں کو سنبھالنا مشین لرننگ میں ایک اہم کام ہے جب ہدف متغیر میں نمایاں طور پر غیر مساوی طبقاتی تقسیم ہوتی ہے۔متوازن کلاسز متعصب ماڈلز کا باعث بن سکتی ہیں جو اکثریتی طبقے کے حق میں ہیں اور اقلیتی طبقے پر ناقص کارکردگی کا حامل ہے۔متوازن کلاسوں کو سنبھالنے کے لئے یہاں کچھ تکنیکیں ہیں: ڈیٹا کو دوبارہ ترتیب دینے: ڈیٹا کو دوبارہ ترتیب دینے کی تکنیک میں یا تو اقلیتی طبقے کی حد سے تجاوز کرنا یا متوازن طبقاتی تقسیم کے حصول کے لئے اکثریتی طبقے کو کم کرنا شامل ہے۔اوورمپلنگ کے طریقے اقلیتی طبقے کے لئے مصنوعی نمونے تیار کرتے ہیں ، جیسے سموٹ (مصنوعی اقلیت سے زیادہ نمونے لینے کی تکنیک) ، اڈاسین (انکولی مصنوعی نمونے لینے) ، یا بے ترتیب اوور سمپلنگ۔انڈرسمپلنگ کے طریقوں نے اکثریتی طبقے میں نمونوں کی تعداد کو کم کیا ، جیسے بے ترتیب انڈرسمپلنگ یا کلسٹر پر مبنی انڈرسمپلنگ۔ان تکنیکوں کا مقصد طبقاتی تقسیم کو متوازن کرنا اور دونوں طبقات کو زیادہ مساوی نمائندگی فراہم کرنا ہے۔ کلاس وزن: زیادہ تر مشین لرننگ الگورتھم آپ کو کلاس میں عدم توازن سے نمٹنے کے لئے کلاسوں میں وزن تفویض کرنے کی اجازت دیتے ہیں۔اقلیتی طبقے کو زیادہ وزن تفویض کرکے اور اکثریت والے طبقے کو کم وزن تفویض کرکے ، آپ ماڈل کی تربیت کے دوران اقلیتی طبقے کو زیادہ اہمیت دے سکتے ہیں۔طبقاتی وزن کو طبقاتی تقسیم کی بنیاد پر دستی طور پر سیٹ کیا جاسکتا ہے یا کلاس فریکوئنسی کے لئے خود بخود متناسب تناسب کا حساب لگایا جاسکتا ہے۔اسکیکیٹ لرن میں بہت سے مشین لرننگ الگورتھم میں ایک کلاس_ ویٹ پیرامیٹر ہوتا ہے جو اس کے مطابق ترتیب دیا جاسکتا ہے۔ لاگت سے حساس سیکھنے: لاگت سے حساس سیکھنے میں مختلف طبقات کو ان کی اہمیت یا ندرت کی بنیاد پر غلط طبقاتی اخراجات تفویض کرنا شامل ہے۔اقلیتی طبقے کو غلط درجہ بندی کرنے کے لئے ایک اعلی قیمت تفویض کرکے ، ماڈل اقلیتی طبقے کے واقعات کی صحیح پیش گوئی کرنے پر زیادہ توجہ مرکوز کرنا سیکھ سکتا ہے۔یہ نقطہ نظر مفید ثابت ہوسکتا ہے جب مختلف کلاسوں کے لئے غلط طبقاتی اخراجات برابر نہیں ہوتے ہیں۔بے ترتیب جنگل یا تدریجی فروغ جیسے بیگنگ پر مبنی طریقے ، اعداد و شمار کی تقسیم کو سنبھالنے کی صلاحیت کی وجہ سے عدم توازن کی کلاسوں کو بہتر طریقے سے سنبھال سکتے ہیں۔یہ الگورتھم اکثریتی طبقے کی طرف تعصب کو کم کرسکتے ہیں اور اقلیتی طبقے کے لئے بہتر کارکردگی فراہم کرسکتے ہیں۔ تشخیص میٹرکس: عدم توازن کی کلاسوں سے نمٹنے کے دوران صرف درستگی قابل اعتماد میٹرک نہیں ہے۔اس کے بجائے ، آپ کو تشخیصی میٹرکس پر غور کرنا چاہئے جو متوازن ڈیٹاسیٹس کے لئے زیادہ موزوں ہیں۔میٹرک جیسے صحت سے متعلق ، یاد ، F1-اسکور ، اور ROC وکر (AUC-ROC) کے تحت علاقہ ماڈل کی کارکردگی کا بہتر اندازہ فراہم کرسکتا ہے۔یہ میٹرکس مجموعی طور پر درستگی کے بجائے دونوں طبقوں کی کارکردگی پر قبضہ کرنے پر مرکوز ہے۔ ڈیٹا بڑھاوا: ڈیٹا کو بڑھاوا دینے کی تکنیکوں میں موجودہ اعداد و شمار میں مختلف تبدیلیوں یا گھٹیا پنوں کا اطلاق کرکے نئے مصنوعی نمونے تیار کرنا شامل ہیں۔یہ نقطہ نظر اقلیتی طبقے میں نمونوں کی تعداد کو بڑھانے اور عام کرنے کی ماڈل کی صلاحیت کو بہتر بنانے میں مدد فراہم کرسکتا ہے۔ مخصوص مسئلے ، دستیاب اعداد و شمار اور مطلوبہ نتائج کی بنیاد پر مناسب تکنیک کا انتخاب کرنا ضروری ہے۔آپ کو مختلف طریقوں کے ساتھ تجربہ کرنے اور ماڈل کی کارکردگی پر ان کے اثرات کا اندازہ کرنے کی ضرورت پڑسکتی ہے۔مزید برآں ، یہ ضروری ہے کہ متوازن کلاسوں کو سنبھال کر اور نتائج کو احتیاط سے توثیق کرکے متعارف کروائے جانے والے ممکنہ تعصب سے محتاط رہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں مریضوں کے میڈیکل ریکارڈ ہوتے ہیں۔بقا کے تجزیہ کی تکنیکوں کا استعمال کرتے ہوئے آپ بیماری کے بڑھنے کے نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "کسی ڈیٹا فریم میں کالم کی چلتی اوسط کا حساب لگانے کے ل you ، آپ پانڈوں کے ذریعہ فراہم کردہ رولنگ () فنکشن استعمال کرسکتے ہیں۔رولنگ () فنکشن آپ کو کالم پر رولنگ ونڈو بنانے اور مختلف جمع کرنے کے افعال کا اطلاق کرنے کی اجازت دیتا ہے ، جس میں چلتی اوسط کا حساب کتاب بھی شامل ہے۔یہ ہے کہ آپ چلتی اوسط کا حساب کیسے لگاسکتے ہیں: پی ڈی کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس PD# عددی اقدار کے کالم کے ساتھ ایک ڈیٹا فریم بنائیں = {'ویلیو': [10 ، 15 ، 20 ، 25 ، 30]} df = pd.dataframe (ڈیٹا)# رولنگ () فنکشن ونڈو_سائز = 3moving_average = df ['ویلیو'] کا استعمال کرتے ہوئے چلتی اوسط کا حساب لگائیں۔ رولنگ (ونڈو = ونڈو_سائز) .مین () اس مثال میں ، ہم ایک کالم کے ساتھ ایک ڈیٹا فریم ڈی ایف بناتے ہیں جس میں 'ویلیو' ہوتا ہے جس میں 'ویلیو' ہوتا ہے۔اقدار۔چلتی اوسط کا حساب لگانے کے ل we ، ہم 'ویلیو' کالم پر رولنگ () فنکشن کا اطلاق کرتے ہیں اور ونڈو کے سائز کو ونڈو = 3 کے بطور وضاحت کرتے ہیں۔اس کے بعد رولنگ ونڈو پر مطلب () فنکشن کا اطلاق ہوتا ہے ، جو ہر ونڈو کے وسط کا حساب لگاتا ہے۔نتیجہ موونگ_اوریج متغیر میں محفوظ ہے۔ آپ اپنی ضروریات کے مطابق ونڈو_ سائز پیرامیٹر کو ایڈجسٹ کرسکتے ہیں۔ونڈو کا سائز ہر متحرک اوسط حساب کتاب کے لئے سمجھے جانے والے مشاہدات کی تعداد کا تعین کرتا ہے۔مثال کے طور پر ، ونڈو سائز 3 کے ساتھ ، موجودہ قیمت اور دو سابقہ اقدار کا استعمال کرتے ہوئے چلتی اوسط کا حساب لگایا جائے گا۔ نوٹ کریں کہ چلتی اوسط میں ابتدائی ونڈو_سائز -1 قطاروں کے لئے نان اقدار ہوں گی ، کیونکہ اس میں کافی مشاہدات نہیں ہیں۔اوسط کا حساب لگائیں۔اگر آپ ان نان اقدار کو ختم کرنا چاہتے ہیں تو ، آپ .dropna () طریقہ استعمال کرسکتے ہیں: پائیتھون کوپی کوڈمونگ_اوریج = موونگ_اویورج۔ ڈروپنا () اس سے آپ کو نان اندراجات کے بغیر اوسطا اوسط اقدار ملیں گے۔اور اپنے ڈیٹا فریم میں ٹائم سیریز یا کسی دوسرے ترتیب والے ڈیٹا میں اتار چڑھاو کو ہموار کریں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں آن لائن اشتہاری ڈیٹا ہوتا ہے۔انتساب ماڈلنگ کا استعمال کرتے ہوئے آپ اشتہاری چینلز اور مہمات کا سب سے موثر تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "ٹائم سیریز کے ڈیٹا کو سنبھالنے کے لئے پانڈاس بہترین فعالیت فراہم کرتا ہے۔پانڈوں میں ٹائم سیریز کے اعداد و شمار کو سنبھالنے کے لئے کچھ کلیدی خصوصیات اور تکنیک یہ ہیں: تاریخ اور وقت کی تجزیہ: پانڈاس تاریخوں اور اوقات کی تار کی نمائندگی کو ڈیٹ ٹائم آبجیکٹ میں تبدیل کرنے کے لئے ٹو_ڈیٹ ٹائم () فنکشن فراہم کرتا ہے۔آپ مناسب تجزیہ کو یقینی بنانے کے لئے فارمیٹ کوڈز کا استعمال کرتے ہوئے تاریخ یا ٹائم سٹرنگ کی شکل کی وضاحت کرسکتے ہیں۔مثال کے طور پر: پی ڈی## کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس ڈیڈ ٹائم آبجیکٹ ڈی ایف ['تاریخ'] = pd.to_datetime (df ['تاریخ'] ، فارمیٹ = '٪ y- ٪ m- ٪ d') میں تبدیل کریں) اشاریہ سازی اور سلائسنگ: پانڈاس آپ کو سیٹ_ انڈیکس () طریقہ کار کا استعمال کرتے ہوئے ڈیٹا فریم انڈیکس کے طور پر ڈیٹ ٹائم کالم کو سیٹ کرنے کی اجازت دیتا ہے۔اس سے وقت کی بنیاد پر آسانی سے اشاریہ سازی اور سلائسنگ کا اہل بناتا ہے۔آپ متعلقہ قطاروں کو بازیافت کرنے کے لئے ایک مخصوص تاریخ یا تاریخوں کی ایک حد استعمال کرسکتے ہیں۔مثال کے طور پر: پائیتھون کوپی کوڈ# 'تاریخ' کالم کو بطور انڈیکس ڈی ایف ڈاٹ ایسٹ_ انڈیکس ('تاریخ' ، ان پلیس = سچ) سیٹ کریں# مخصوص ڈیٹیٹس اسپیسیفک_ڈیٹ_ڈیٹا = df.loc ['2023-07-01'] کے لئے ڈیٹا کو بازیافت کریں]# اعداد و شمار کو بازیافت کریں اعداد و شمار کو بازیافت کریںdatesdate_range_data = df.loc ['2023-07-01': '2023-07-31'] دوبارہ ترتیب دینے اور تعدد تبادلوں کی ایک رینج: پانڈاس مختلف تعدد کے لئے ٹائم سیریز کے اعداد و شمار کو دوبارہ ترتیب دینے کے لئے دوبارہ نمونہ () فنکشن فراہم کرتا ہے۔آپ مطلوبہ تعدد کی بنیاد پر ڈیٹا کو مجموعی یا انٹرپولیٹ کرسکتے ہیں۔مثال کے طور پر ، آپ ہر ماہ کی اقدار کی اوسط لے کر روزانہ کے اعداد و شمار کو ماہانہ ڈیٹا میں تبدیل کرسکتے ہیں۔یہاں ایک مثال ہے: پائیٹون کوپی کوڈ# اعداد و شمار کو ماہانہ فریکوینسی مونتھلی_ڈیٹا = df.resample ('m') پر دوبارہ نمونہ کریں۔ مطلب () وقت کی تبدیلی: آپ شفٹ () فنکشن کا استعمال کرتے ہوئے ڈیٹا فریم کے ٹائم انڈیکس کو منتقل کرسکتے ہیں۔اس سے آپ کو مختلف ٹائم پوائنٹس پر اقدار کے مابین اختلافات کا حساب لگانے یا پیچھے رہ جانے والے متغیر پیدا کرنے کی اجازت ملتی ہے۔مثال کے طور پر: پائیٹون کوپی کوڈ# ڈیٹا کو 1 دن کے دن_ڈیٹا = df.shift (1) رولنگ ونڈوز اور چلتی اوسط کے ذریعہ شفٹ کریں: جیسا کہ پہلے ذکر کیا گیا ہے ، آپ رولنگ () فنکشن کو رولنگ کے اعدادوشمار کا حساب لگانے کے لئے استعمال کرسکتے ہیں ، جیسے حرکت پذیر اوسط سے زیادہوقت کی ونڈویہ ڈیٹا کو ہموار کرنے اور رجحانات کی نشاندہی کرنے کے لئے مفید ہے۔یہاں 7 دن کی حرکت پذیر اوسط کا حساب لگانے کی ایک مثال ہے: پائیٹون کوپی کوڈ## 7 دن کی حرکت پذیر اوسطا میومونگ_اوریج = ڈی ایف ['ویلیو'] کا حساب لگائیں۔ رولنگ (ونڈو = 7)ڈیٹ ٹائم انڈیکس میں ٹی زیڈ پیرامیٹر کا استعمال کرتے ہوئے زون۔آپ ٹائم زون کی معلومات کو تبدیل کرسکتے ہیں ، ٹائم اسٹیمپ کو مقامی بنا سکتے ہیں ، اور ٹائم زون سے واقف کاروں کو انجام دے سکتے ہیں۔مثال کے طور پر: پائیتھون کوپی کوڈ# انڈیکس ڈی ایف کے ٹائم زون کو تبدیل کریں۔سیریز کا ڈیٹا۔پانڈاس وقت پر مبنی اشاریہ سازی ، تعدد تبادلوں ، تاریخ کی حد کی پیداوار ، اور ٹائم سیریز کے تصو .رات کے لئے وسیع رینج بھی فراہم کرتا ہے۔پانڈوں کی وسیع دستاویزات ان خصوصیات اور بہت کچھ کے بارے میں تفصیلی معلومات فراہم کرتی ہیں ، جس سے آپ کو ٹائم سیریز کے اعداد و شمار کے ساتھ موثر انداز میں کام کرنے میں مدد ملتی ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں موسم کا ڈیٹا ہوتا ہے۔آپ موسم کی صورتحال اور مخصوص مصنوعات کی فروخت کے مابین ارتباط کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "جب پانڈوں میں بڑے ڈیٹاسیٹس کے ساتھ کام کرتے ہو تو ، نظام کے وسائل کے موثر استعمال کو یقینی بنانے کے لئے میموری کی اصلاح بہت ضروری ہے۔پانڈوں میں میموری کی اصلاح کو سنبھالنے کے لئے کچھ تکنیک یہ ہیں: ڈیٹا کی اقسام کی اصلاح: اپنے کالموں کے لئے مناسب ڈیٹا کی اقسام کا انتخاب میموری کے استعمال کو نمایاں طور پر کم کرسکتا ہے۔پانڈاس مختلف سائز کے ساتھ ڈیٹا کی مختلف اقسام فراہم کرتا ہے۔مثال کے طور پر ، انٹیجر اقدار کے لئے INT64 کے بجائے INT8 کا استعمال کرنا یا فلوٹ 64 کے بجائے فلوٹ 32 کا استعمال فلوٹنگ پوائنٹ نمبر کے لئے فلوٹ 64 میموری کی کھپت کو کم کرسکتا ہے۔آپ کالموں کو واضح طور پر مناسب اعداد و شمار کی اقسام میں تبدیل کرنے کے لئے ASTYPE () طریقہ استعمال کرسکتے ہیں۔مثال کے طور پر: پائیٹون کوپی کوڈ# کالم کو ایک چھوٹے سے انٹیجر ڈیٹا ٹائپڈف ['کالم'] = ڈی ایف ['کالم'] میں تبدیل کریں۔ ایسٹائپ ('انٹ 8') زمرہ دار اعداد و شمار: اگر آپ کے پاس محدود تعداد میں منفرد اقدار کے ساتھ کالم ہیں تو ، کنورٹنگان کو واضح ڈیٹا کی قسم میں میموری کے استعمال کو نمایاں طور پر کم کیا جاسکتا ہے۔واضح ڈیٹا ٹائپ انفرادی اقدار کو ایک علیحدہ نظر ٹیبل میں محفوظ کرتا ہے اور کالم میں اقدار کی نمائندگی کرنے کے لئے انٹیجر کوڈ کا استعمال کرتا ہے۔آپ کالموں کو زمرہ دار ڈیٹا کی قسم میں تبدیل کرنے کے لئے ASTYPE () کا طریقہ استعمال کرسکتے ہیں۔مثال کے طور پر: پائیٹون کوپی کوڈ# کالم کو زمرہ دار ڈیٹا ٹائپڈ میں تبدیل کریں ['کالم'] = ڈی ایف ['کالم']پانڈوں میں پڑھیں_ سی ایس وی () یا ریڈ_ ٹیبل () میں ایک ساتھ ہی پورے ڈیٹاسیٹ کو میموری میں لوڈ کرنے کے بجائے چھوٹے حصوں میں ڈیٹا کو لوڈ کرنے کے لئے افعال۔اس سے آپ کو چھوٹے حصوں میں ڈیٹا پر کارروائی اور تجزیہ کرنے کی سہولت ملتی ہے۔ پیتھون کوپی کوڈ # CSV filechunk_size = 10000 for chunk سے pd.read_csv ('data.csv' ، cunksize = chunk_size) میں حصوں میں ڈیٹا لوڈ کریں: # ڈیٹا کا حصہ # پروسیس کریں #... لو_ میموری پیرامیٹر کا استعمال کریں: جب بڑے ڈیٹاسیٹس کو پڑھتے ہو تو ، آپ کم_میموری پیرامیٹر کو READ_CSV () یا READ_TABLE () افعال میں درست پر سیٹ کرسکتے ہیں۔اس سے پانڈوں کو ڈیٹا پڑھنے کے عمل کے دوران میموری کے استعمال کو بہتر بنانے کی اجازت ملتی ہے۔ پیتھون کوپی کوڈ# کم میموری کے استعمال کی اصلاح کے ساتھ سی ایس وی فائل پڑھیں۔تجزیہ کرنے یا پروسیسنگ کے لئے اس کی ضرورت نہیں ہے ، آپ انہیں ڈراپ () کے طریقہ کار کا استعمال کرکے چھوڑ سکتے ہیں۔غیر ضروری کالموں کو ہٹانا میموری کی کھپت کو کم کرتا ہے۔مثال کے طور پر: پائیٹون کوپی کوڈ# ڈیٹا فریمڈف ڈاٹ ڈراپ (['کالم 1' ، 'کالم 2'] ، محور = 1 ، ان پلیس = سچ) سے غیر ضروری کالموں کو چھوڑیں HDF5 فارمیٹ: بہت بڑے ڈیٹاسیٹس کے ل you ، آپ ڈیٹا کو ذخیرہ کرنے پر غور کرسکتے ہیں۔ایچ ڈی ایف 5 فارمیٹ ، جو موثر اسٹوریج اور بڑے عددی ڈیٹاسیٹس کی بازیافت فراہم کرتا ہے۔پانڈاس ریڈ_ ایچ ڈی ایف () اور ٹو_ ایچ ڈی ایف () فنکشنس.پیتھونکپی کوڈ# کو ایچ ڈی ایف 5 فائلڈف ڈاٹ ٹی ایچ ڈی ایف ('ڈیٹا ڈاٹ ایچ 5' ، کلید = 'ڈی ایف' ، موڈ = 'ڈبلیو کو لکھیں')# HDF5 فائلڈف = PD.READ_HDF (' data.h5 '، key =' DF ') سے ڈیٹا فریم پڑھیں ان تکنیکوں کو لاگو کرکے ، آپ پانڈوں میں بڑے ڈیٹاسیٹس کے ساتھ کام کرتے وقت میموری کے استعمال کو مؤثر طریقے سے بہتر بناسکتے ہیں۔یہ ضروری ہے کہ آپ اپنے سسٹم کی میموری رکاوٹوں پر غور کریں اور اپنی مخصوص ضروریات کی بنیاد پر مناسب اصلاح کی مناسب تکنیک کا انتخاب کریں۔"
    },
    {
        "Question": "آن لائن گیم میں آپ کو صارف کے طرز عمل کا ڈیٹا پر مشتمل ڈیٹاسیٹ دیا جاتا ہے۔آپ منشیات کے تجزیہ کی تکنیکوں کا استعمال کرتے ہوئے کھلاڑیوں کو برقرار رکھنے کے عوامل کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "پانڈاس ڈیٹا انکوڈنگ اور ضابطہ کشائی کو سنبھالنے کے لئے متعدد طریقے مہیا کرتا ہے ، جس میں JSON اور XML فارمیٹس شامل ہیں۔یہاں آپ ان فارمیٹس کے ساتھ پانڈوں میں کس طرح کام کرسکتے ہیں: JSON: JSON فارمیٹ میں ڈیٹا کو انکوڈ کرنے یا ڈیکوڈ کرنے کے لئے ، پانڈاس مندرجہ ذیل طریقے فراہم کرتے ہیں: TO_JSON (): یہ طریقہ ایک پانڈاس آبجیکٹ (جیسے ، ڈیٹا فریم ، سیریز) کو JSON تار میں تبدیل کرتا ہے۔پائیتھون کوپی کوڈ# ڈیٹا فریم کو jsonjson_data = df.to_json () read_json () میں تبدیل کریں: یہ طریقہ JSON فائل یا JSON سٹرنگ کو پڑھتا ہے اور ایک ڈیٹا فیم.پیتھون کوپی کوڈ# JSON فائل کو ڈیٹا فیمڈف = pd.read_json ('ڈیٹا. joson' میں پڑھیں۔) آپ انکوڈنگ یا ضابطہ کشائی کے عمل کو اپنی مرضی کے مطابق بنانے کے ل these ان طریقوں میں اضافی پیرامیٹرز کی وضاحت کرسکتے ہیں ، جیسے اورینٹ ، لائنز ، کمپریشن ، اور بہت کچھ۔ان پیرامیٹرز کے بارے میں مزید تفصیلات کے لئے پانڈاس دستاویزات کا حوالہ دیں۔یہاں xml.etree.elementTree کا استعمال کرتے ہوئے ایک مثال ہے: XML کو پارس کرنا: آپ xml.etree.element ٹری ماڈیول کا استعمال کرتے ہوئے XML ڈیٹا کو پارس کرسکتے ہیں اور اسے پانڈاس ڈیٹا فیم میں تبدیل کرسکتے ہیں۔= et.parse ('data.xml') روٹ = ٹری.گیٹرووٹ ()# XML سے ڈیٹا نکالیں اور جڑ میں بچے کے لئے ڈیٹا فریمیٹا = [] بنائیں: قطار = {child بچے میں ذیلی بچے کے لئے: قطار [subchild.tag] =subchild.text ڈیٹا.ایپینڈ (قطار) df = pd.dataframe (ڈیٹا) اس مثال میں ، ہم et.parse () کا استعمال کرتے ہوئے XML فائل کی تجزیہ کرتے ہیں اور درختوں کو استعمال کرتے ہوئے جڑ عنصر حاصل کرتے ہیں۔اس کے بعد ہم XML سے ڈیٹا نکالتے ہیں اور لغات کی ایک فہرست بناتے ہیں ، جہاں ہر لغت ڈیٹا فریم میں ایک قطار کی نمائندگی کرتی ہے۔آخر میں ، ہم pd.dataframe () کا استعمال کرتے ہوئے ڈیٹا فریم بناتے ہیں۔Etimport Pandas as Pd# as as dataframedf = pd.dataframe بنائیں ({'نام': ['جان' ، 'ایلس' ، 'باب'] ، 'عمر': [25 ، 30 ، 35]})# XML بنائیںانڈیکس کے لئے عنصری = et.element ('روٹ') ، df.iterrows () میں قطار ()۔('data.xml') اس مثال میں ، ہم ڈیٹا فریم میں ہر صف کی نمائندگی کرنے والے ذیلی خطوط کے ساتھ ایک XML عنصر کی جڑ تیار کرتے ہیں۔ہم Iterrows () کا استعمال کرتے ہوئے ڈیٹا فریم پر تکرار کرتے ہیں ، ہر کالم کے لئے سبیلیمنٹ تیار کرتے ہیں ، اور ان کو اقدار تفویض کرتے ہیں۔آخر میں ، ہم et.elementtree () کا استعمال کرتے ہوئے ایک XML درخت بناتے ہیں اور اسے درختوں میں لکھتے ہیں۔مزید پیچیدہ منظرناموں یا مخصوص تقاضوں کے ل you ، آپ کو تفصیلی استعمال اور اختیارات کے ل the پانڈوں اور متعلقہ لائبریری دستاویزات کا حوالہ دینے کی ضرورت پڑسکتی ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر فیڈ بیک ڈیٹا ہوتا ہے۔آپ متن کی کان کنی اور کلسٹرنگ الگورتھم کا استعمال کرتے ہوئے اکثر کثرت سے موضوعات اور جذبات کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "طریقہ زنجیر پانڈوں میں ایک طاقتور تکنیک ہے جو آپ کو کوڈ کی ایک لائن میں ڈیٹا فریم یا سیریز پر متعدد آپریشن کرنے کی اجازت دیتی ہے۔اس سے کوڈ پڑھنے کی اہلیت اور اجتماعی پن میں اضافہ ہوتا ہے۔یہاں ایک مثال ہے جو یہ ظاہر کرتی ہے کہ پانڈوں میں طریقہ کار کی زنجیروں کو کس طرح استعمال کرنا ہے: PD## مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'A': [1 ، 2 ، 3] ، 'B': [4 ، 5 ، 6]، 'C': [7 ، 8 ، 9]})# طریقہ کار زنجیروں کی مثالسچ) اس مثال میں ، ہم طریقہ کار زنجیر کا استعمال کرتے ہوئے ایک ہی لائن میں درج ذیل کاروائیاں انجام دیتے ہیں: گروپ بائی ('A'): کالم 'a'.mean () کے ذریعہ ڈیٹا فریم گروپ کریں: ہر گروپ کے لئے وسط کا حساب لگائیں۔'، چڑھائی = غلط): کالم' B 'کے ذریعہ ڈیٹا فریم کو نزولی ترتیب میں ترتیب دیں۔ reset_index (ڈراپ = سچ): ڈیٹا فریم کا انڈیکس کو دوبارہ ترتیب دیں۔ نتیجہ متغیر کے نتائج کو تفویض کیا گیا ہے۔ طریقہ کار کو مؤثر طریقے سے زنجیر استعمال کرنے کے لئے ، برقرار رکھیں ، برقرار رکھیں ، برقرار رکھیں۔مندرجہ ذیل رہنما خطوط کو ذہن میں رکھیں: ہر طریقہ بہتر پڑھنے کے ل a ایک نئی لائن پر ہونا چاہئے۔ اگلی لائن پر بیان جاری رکھنے کے لئے ہر لائن کے آخر میں بیک سلیش (\\) کا استعمال کریں۔ جب گروپ کام کرنے یا دلائل کی وضاحت کرنے کے لئے ضروری ہو تو قوسین کا استعمال کریں۔طریقہ کار زنجیر کا فائدہ اٹھانا ، آپ اپنے کوڈ کو ہموار کرسکتے ہیں اور جامع اور پڑھنے کے قابل انداز میں متعدد آپریشن انجام دے سکتے ہیں۔تاہم ، محتاط رہیں کہ زنجیروں والے کوڈ کو بہت پیچیدہ یا سمجھنے میں مشکل نہ بنائیں۔کوڈ پڑھنے کی اہلیت اور ایک ساتھ جکڑے ہوئے آپریشنوں کی تعداد کے مابین توازن برقرار رکھنا ضروری ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر سبسکرپشن کا ڈیٹا ہوتا ہے۔بقا کے تجزیے اور کسٹمر سلوک کے اعداد و شمار کا استعمال کرتے ہوئے آپ سبسکرپشن گھومنے پر اثر انداز کرنے والے عوامل کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "پانڈوں میں ، آپ کراس ٹیبلولیشن انجام دے سکتے ہیں ، جسے کراسسٹاب () فنکشن کا استعمال کرتے ہوئے ، ہنگامی جدول کے نام سے بھی جانا جاتا ہے۔کراس ٹیبولیشن آپ کو ڈیٹا فریم میں دو یا زیادہ زمرہ متغیر کے مابین تعلقات کا تجزیہ کرنے کی اجازت دیتا ہے۔یہاں پانڈوں میں کراسسٹاب () فنکشن کو کس طرح استعمال کرنے کی ایک مثال ہے: پی ڈی کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس کو PD# مثال کے طور پر ڈیٹا فریمڈف = PD.Dataframe ({'صنف': ['مرد' ، 'مرد' ، 'مرد' ، 'عورت' ،'خواتین'] ، 'عمر': [25 ، 30 ، 35 ، 25 ، 30] ، 'قومیت': ['USA' ، 'USA' ، 'کینیڈا' ، 'کینیڈا' ، 'USA']})# پرفارمکراس-ٹیبولیشن کراس_ٹاب = پی ڈی کروسسٹاب (ڈی ایف ['صنف'] ، ڈی ایف ['قومیت'])# کراس ٹیبولیشن پرنٹ (کراس_ٹاب) پرنٹ کریں اس مثال میں ، ہمارے پاس تین کالموں کے ساتھ ایک ڈیٹا فریم ہے: 'صنف' ، 'عمر' '، اور 'قومیت'۔ہم کراس ٹیبولیشن کا استعمال کرتے ہوئے 'صنف' اور 'قومیت' متغیر کے مابین تعلقات کا تجزیہ کرنا چاہتے ہیں۔ کراسسٹاب () فنکشن ان پٹ کے طور پر دو یا زیادہ واضح متغیرات لیتا ہے اور کراس ٹیبلولیشن ڈیٹا فریم تیار کرتا ہے۔اس معاملے میں ، ہم DF ['صنف'] اور DF ['قومیت'] کو کراسسٹاب () کے دلائل کے طور پر پاس کرتے ہیں۔قطاریں پہلے متغیر کی انوکھی قسموں کی نمائندگی کرتی ہیں (اس معاملے میں ، 'صنف') ، اور کالم دوسرے متغیر کی انوکھی قسموں کی نمائندگی کرتے ہیں (اس معاملے میں ، 'قومیت')۔ مندرجہ بالا مثال کی پیداوار ہے: کاپیکوڈینیشنلٹی کینیڈا یوسجینڈر فیملی 1 2 مل 1 1 1 ٹیبل سے پتہ چلتا ہے کہ کینیڈا کی قومیت والی ایک خاتون ہے ، امریکی قومیت کے ساتھ دو خواتین ، کینیڈا کی قومیت والا ایک مرد ، اور امریکی قومیت والا ایک مرد۔ کراس ٹیبلولیشن کے ذریعہ ، آپ اس میں بصیرت حاصل کرسکتے ہیں۔آپ کے ڈیٹاسیٹ میں متغیر متغیر کے مابین تقسیم اور رشتہ۔آپ قطار یا کالم مارجن کی وضاحت کرنے ، اقدار کو معمول پر لانے اور بہت کچھ کرنے کے لئے کراسسٹاب () فنکشن میں اضافی پیرامیٹرز بھی شامل کرسکتے ہیں۔دستیاب اختیارات سے متعلق مزید معلومات کے لئے پانڈاس دستاویزات کا حوالہ دیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں ملازمین کی کارکردگی کا ڈیٹا ہوتا ہے۔آپ کس طرح ان عوامل کا تجزیہ اور شناخت کریں گے جو رجعت تجزیہ کا استعمال کرتے ہوئے اعلی ملازمین کی پیداواری صلاحیت میں معاون ہیں؟",
        "Answer": ""
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا گیا ہے جس میں سوشل میڈیا ڈیٹا ہے۔نیٹ ورک سنٹرلیٹی اقدامات کا استعمال کرتے ہوئے آپ بااثر صارفین اور برادریوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "پانڈوں میں ، آپ مختلف طریقوں اور افعال کا استعمال کرتے ہوئے ڈیٹا کی تبدیلی اور فیچر انجینئرنگ کو سنبھال سکتے ہیں۔یہاں کچھ عام تکنیک ہیں: 1۔ایک یا زیادہ کالموں یا پورے ڈیٹا فریم پر کسٹم فنکشن کا اطلاق کرنے کے لئے DATAYOU پر افعال کا اطلاق (استعمال () فنکشن کا استعمال کرسکتے ہیں۔اس سے آپ کو اپنے ڈیٹا پر پیچیدہ تبدیلیاں انجام دینے کی سہولت ملتی ہے۔یہاں ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس بطور PD#کالم 'a'df [' a_squared '] = df [' a '] میں اقدار۔لیمبڈا فنکشن جو ان پٹ ویلیو کو مربع کرتا ہے۔اس کے بعد ہم اس فنکشن کو 'A' کالم پر DF ['A'] کا استعمال کرتے ہوئے لاگو کرتے ہیں۔ () استعمال کریں۔اس کے نتیجے میں اقدار ڈیٹا فریم 2 میں ایک نئے کالم 'A_SQUARED' کو تفویض کی گئی ہیں۔ڈمی متغیر کی تخلیق کرتے ہوئے جب متغیر متغیرات سے نمٹنے کے بعد ، آپ ڈمی متغیرات بنانے کے لئے گیٹ_ڈمی () فنکشن کا استعمال کرسکتے ہیں ، جسے ایک گرم انکوڈنگ بھی کہا جاتا ہے۔ڈمی متغیر الگ الگ کالموں میں بائنری متغیر (0 یا 1) کے طور پر واضح متغیر کی نمائندگی کرتے ہیں۔یہاں ایک مثال یہ ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور PD# مثال کے طور پر ڈیٹا فریم 'color'df = pd.dataframe ({' رنگ ': [' سرخ '،' نیلے '،' سبز ']})# ڈمی متغیرات بنائیں'رنگ' کالم ڈومی_ڈیف = pd.get_dummies (df ['color'])# ڈمی متغیرات کو اصل dataframedf = pd.concat ([df ، dummy_df] ، محور = 1)# پرنٹ کریں ٹرانسفارمڈ ڈیٹا فیم پرنٹ (df) میں پرنٹ کریںاس مثال کے طور پر ، ہمارے پاس ایک ڈیٹا فریم ہے جس میں ایک زمرہ کالم 'رنگ' ہے۔ہم 'رنگ' کالم کے لئے ڈمی متغیر بنانے کے لئے PD.get_dmise () استعمال کرتے ہیں۔اس کے نتیجے میں ڈمی متغیرات کو پھر PD.concat (). 3 کا استعمال کرتے ہوئے اصل ڈیٹا فریم کے ساتھ جوڑ دیا جاتا ہے۔گمشدہ ویلیوز پانڈاس کو ہینڈل کرنا گمشدہ اقدار کو سنبھالنے کے ل various مختلف افعال مہیا کرتا ہے ، جیسے فلنا () کو ایک مخصوص قدر یا طریقہ کار سے لاپتہ اقدار کو بھرنے کے ل ، ، قطاروں یا کالموں کو لاپتہ اقدار کے ساتھ ہٹانے کے لئے ، اور انٹرپولیشن کا استعمال کرتے ہوئے گمشدہ اقدار کو پُر کرنے کے لئے انٹرپولیٹ ()۔اس کی ایک مثال یہ ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور Pdimport numpy کے طور پر NP# مثال کے طور پر Dataframe گمشدہ اقدار کے ساتھ DDF = pd.dataframe ({'A': [1 ، np.nan ، 3] ، 'B': [np.nan ، 5 ، 6]})# گمشدہ اقدار کو 0df_fled = df.fillna (0)# گمشدہ اقدار کے ساتھ ڈراپ قطاریں DF_Dropped = df.dropna ()# لکیری انٹرپولیشن ڈیف_ٹرپولیٹڈ = df.interpolate کا استعمال کرتے ہوئے گمشدہ اقدار کو پُر کریں۔(df_dropped) پرنٹ (df_interpolated) اس مثال میں ، ہمارے پاس ایک ڈیٹا فریم ہے جس میں گمشدہ اقدار ہیں جن کی نمائندگی NP.nan کے طور پر کی جاتی ہے۔ہم گمشدہ اقدار کو 0 ، ڈراپنا () سے محروم اقدار کے ساتھ قطاریں ہٹانے کے لئے ، اور لکیری انٹرپولیشن 4 کا استعمال کرتے ہوئے گمشدہ اقدار کو پُر کرنے کے ل fl فلنا (0) کا استعمال کرتے ہیں۔اسکیلنگ اور معمول بنانا ڈیٹا آپ کے اعداد و شمار کو پیمانے یا معمول پر لانے کے لئے مختلف تکنیکوں کا استعمال کرسکتے ہیں۔اس مقصد کے لئے سکیٹ لرن لائبریری سے منیماکس اسکیلر ، اسٹینڈرڈس اسکیلر ، یا روبسٹ اسکیلر کلاس استعمال کی جاسکتی ہیں۔یہاں ایک مثال یہ ہے: PDFROMESSSCALER PANDAS PDFROM SKLEREN.Preprocessing درآمد Minmaxcaler# مثال کے ساتھ اعداد و شمار کے کالم ایس ڈی ایف = PD.Dataframe ({'A': [1 ، 2 ، 3] ، 'بی': [4 ، 5 ، 6]})# اسکیل"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں رئیل اسٹیٹ کا ڈیٹا ہوتا ہے۔رجعت تجزیہ اور جغرافیائی اعداد و شمار کا استعمال کرتے ہوئے جائیداد کی قیمتوں کو متاثر کرنے والے عوامل کا آپ کس طرح تجزیہ اور شناخت کریں گے؟",
        "Answer": "پانڈوں میں ، آپ مختلف طریقوں اور افعال کا استعمال کرتے ہوئے ڈیٹا کو معمول پر لانے اور اسکیلنگ کو سنبھال سکتے ہیں۔یہاں دو عام تکنیک ہیں: 1۔من میکس اسکیلنگ (نارملائزیشن) من میکس اسکیلنگ ، جسے معمول کے نام سے بھی جانا جاتا ہے ، اعداد و شمار کو ایک خاص حد میں ، عام طور پر 0 اور 1 کے درمیان بازیافت کرتا ہے ، آپ کم سے کم میکس اسکیلنگ انجام دینے کے لئے سکیٹ لرن لائبریری سے من میکس اسکیلر کلاس استعمال کرسکتے ہیں۔یہاں ایک مثال یہ ہے: PDFROMESSSSCALER# PDFROMOSSING.Preprocessing درآمد MINMAXSCALER# مثال کے ساتھ اعداد و شمار کے کالم ایس ڈی ایف = PD.Dataframe ({'A': [10 ، 20 ، 30] ، 'بی': [5 ، 15 ، 25]})# مین میکس اسکیلسکلر = منیماکس اسکیلر ()# کو ڈیٹی فریمڈف_سکلڈ = pd.dataframe (اسکیلر.فیٹ_ٹرانسفارم (ڈی ایف) ، کالم = ڈی ایف.و کالمز) کے ساتھ سیٹ کریں ، اس طرح کے ڈیٹا فیم پرنٹ (DF_Scaled) کو پرنٹ کریں ، ہم پرنٹ کریں ،عددی کالم 'A' اور 'B'۔ہم منیماکس اسکیلر کلاس کی ایک مثال بناتے ہیں اور ڈیٹا کو اسکیل کرنے کے لئے Fit_transform () طریقہ استعمال کرتے ہیں۔اس کے نتیجے میں اسکیلڈ اقدار کو ایک نیا ڈیٹا فریم بنانے کے لئے استعمال کیا جاتا ہے ، ایک ہی کالم کے ناموں کے ساتھ ، DF_SCALED۔ مذکورہ بالا مثال کی آؤٹ پٹ یہ ہوگی: CSSCOPY کوڈ A B0 0.0 0.01 0.5 0.52 0.52 1.0 1.0 HERE ، ہر کالم میں اقدار کے درمیان اسکیل کیا جاتا ہے۔0 اور 1 اس کالم 2 میں کم سے کم اور زیادہ سے زیادہ اقدار کی بنیاد پر۔اسٹینڈرڈائزیشن اسٹینڈرڈائزیشن ڈیٹا کو صفر کا مطلب اور یونٹ کے تغیر میں تبدیل کرتی ہے۔آپ معیاری کاری کو انجام دینے کے لئے سککیٹ لرن لائبریری سے اسٹینڈرڈرس اسکیلر کلاس استعمال کرسکتے ہیں۔اس کی ایک مثال یہ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس بطور PDFROM SKLEREN.Preprocessing امپورٹ اسٹینڈرڈس اسکیلر# مثال کے ساتھ عددی کالم ایس ڈی ایف = PD.Dataframe ({'A': [10 ، 20 ، 30] ، 'B': [5 ، 15 ، 25]})# اسٹینڈرڈرس اسکیلر = اسٹینڈرڈسکلر ()# فٹ اور تبدیل کریں dataframedf_scaled = pd.dataframe (scaler.fit_transfor (df) ، کالم = df.columons)# اسکیلڈ ڈیٹا فیم پرنٹ (df_scaled) کے ساتھ پرنٹ کریں ، ہم پرنٹ کریں A ataframe پرنٹ (df_scaled)عددی کالم 'A' اور 'B'۔ہم اسٹینڈرڈرس اسکیلر کلاس کی ایک مثال تیار کرتے ہیں اور ڈیٹا کو معیاری بنانے کے لئے Fit_transform () طریقہ استعمال کرتے ہیں۔اس کے نتیجے میں معیاری اقدار کو ایک نیا ڈیٹا فریم بنانے کے لئے استعمال کیا جاتا ہے ، اسی کالم کے ناموں کے ساتھ ، DF_SCALED۔ مذکورہ بالا مثال کی آؤٹ پٹ یہ ہوگی: CSSCOPY کوڈ A B0 -1.224745 -1.2247451 0.0000000000000000002 1.224747474745 ہیری میں ، وینس میں۔صفر کا مطلب اور یونٹ کے تغیرات کے لئے معیاری۔ اپنے ڈیٹا کو اسکیلنگ یا معیاری بنانا ، آپ اس بات کو یقینی بناسکتے ہیں کہ عددی متغیر اسی طرح کے پیمانے پر ہیں ، جو مشین لرننگ الگورتھم اور ڈیٹا تجزیہ کے کاموں کے لئے فائدہ مند ثابت ہوسکتے ہیں۔ نوٹ کریں۔، عام طور پر یہ تجویز کیا جاتا ہے کہ تربیت کے اعداد و شمار پر اسکیلر کو فٹ کریں اور اعداد و شمار کے رساو سے بچنے کے لئے ٹیسٹ یا نظر نہ آنے والے ڈیٹا کو تبدیل کرنے کے لئے اسی اسکیلر کا استعمال کریں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر سروے کا ڈیٹا ہوتا ہے۔کلسٹرنگ الگورتھم اور آبادیاتی متغیرات کا استعمال کرتے ہوئے آپ کسٹمر سیگمنٹیشن کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "پانڈوں میں ، آپ مختلف طریقوں اور افعال کا استعمال کرتے ہوئے ڈیٹا بائننگ اور صوابدیدی کو سنبھال سکتے ہیں۔یہاں دو عام تکنیک ہیں: 1۔کٹ اور QCUT فنکشنز کٹ () اور QCUT () پانڈوں میں افعال کو مستقل متغیرات کو مجرد وقفوں یا زمرے میں باندھنے یا عکاسی کرنے کے لئے استعمال کیا جاسکتا ہے۔یہ اعداد و شمار کو مساوی چوڑائی کے ٹوکریوں میں تقسیم کرتا ہے۔ کیو کٹ () فنکشن: یہ فنکشن ڈیٹا کو کوانٹائل میں تقسیم کرتا ہے ، جس سے ہر بن میں تقریبا برابر تعداد میں ڈیٹا پوائنٹس کو یقینی بنایا جاتا ہے۔بن کناروں کا تعین اعداد و شمار کی تقسیم کی بنیاد پر کیا جاتا ہے۔ یہاں کی ایک مثال جو ان افعال کے استعمال کو ظاہر کرتی ہے: PDimport numpy کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس کو NP# مثال کے طور پر ایک عددی کالم ڈی ایف = PD.Dataframe کے ساتھ ڈیٹا فریم ({'عمر': [[[عمر ': [22 ، 25 ، 30 ، 35 ، 40 ، 45 ، 50]})# کٹ () ڈی ایف ['ایج_بنس'] = pd.cut (df ['عمر'] ، ڈبے = [20 ، 30 کا استعمال کرتے ہوئے برابر چوڑائی بائننگ انجام دیں.مثال کے طور پر ، ہمارے پاس عددی کالم 'عمر' کے ساتھ ایک ڈیٹا فریم ہے۔ہم PD.cut () کو برابر چوڑائی بائننگ انجام دینے کے لئے استعمال کرتے ہیں ، جس میں بن کناروں کو [20 ، 30 ، 40 ، 50] کی وضاحت کی گئی ہے۔نتیجے میں بن لیبل ایک نئے کالم 'AGE_BINS' کو تفویض کیے گئے ہیں۔ہم کوانٹائل پر مبنی بائننگ انجام دینے کے لئے PD.QCUT () کا استعمال بھی کرتے ہیں ، جس میں کوانٹائل کی تعداد 3 کے طور پر بتائی جاتی ہے۔ نتیجے میں بن لیبل ایک نئے کالم 'AGE_QUANTILES' میں تفویض کیے جاتے ہیں۔ مذکورہ بالا مثال کی آؤٹ پٹ یہ ہوگی: کاپی کوڈ ایج_بنسAGE_QUANTILES0 22 (20 ، 30] (21.999 ، 33.0] 1 25 (20 ، 30] (21.999 ، 33.0] 2 30 (20 ، 30] (33.0 ، 40.0] 3 35 (30 ، 40] (33.0 ، 40] 40 40].AGE_QUANTILES کا کالم کوانٹائل پر مبنی بِنز 2 کی نمائندگی کرتا ہے۔ کسٹم بائننگ اگر آپ کو بائننگ کے ل specific مخصوص تقاضے ہیں یا اپنی اپنی مرضی کے مطابق بنوں کی وضاحت کرنا چاہتے ہیں تو ، آپ لیبل پیرامیٹر کے ساتھ PD.cut () فنکشن استعمال کرسکتے ہیں۔ اس سے آپ کو کسٹم لیبل تفویض کرنے کی اجازت ملتی ہے۔ہر بن کے لئے۔ یہاں کی ایک مثال ہے: پائیتھون کوپی کوڈیمپورٹ پانڈاس بطور PDimport numpy کے طور پر NP# مثال کے طور پر ایک عددی کالم ڈی ایف = pd.dataframe ({'عمر': [22 ، 25 ، 30 ، 35 ، 40 ، 45 ، 50]})})# کسٹم بِنز اور لیبل بنس کی وضاحت کریں = [20 ، 30 ، 40 ، 50] لیبل = ['یوتھ' ، 'بالغ' ، 'سینئر']# کسٹم لیبلز ڈی ایف کے ساتھ کٹ () کا استعمال کرتے ہوئے بائننگ پرفارم کریں ['ایج_ٹیٹریجری'] = pd.cut."
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں صحت انشورنس دعوے کا ڈیٹا ہوتا ہے۔آپ مشین لرننگ اور بے ضابطگی کا پتہ لگانے کی تکنیکوں کا استعمال کرتے ہوئے جعلی دعوؤں کے نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "پانڈوں میں ، آپ ڈیٹ ٹائم انڈیکس یا ٹائم اسٹیمپ آبجیکٹ کے TZ_CONVERT () اور TZ_Localize () طریقوں کا استعمال کرتے ہوئے ٹائم زون کے تبادلوں کو سنبھال سکتے ہیں۔یہاں آپ ٹائم زون کے تبادلوں کو کس طرح انجام دے سکتے ہیں: ڈیٹا فریم کالم کو ڈیٹ ٹائم انڈیکس یا ٹائم اسٹیمپ آبجیکٹ میں تبدیل کریں اگر یہ پہلے سے ہی اس فارمیٹ میں نہیں ہے۔ پی ڈی کوپی کوڈیمپورٹ پانڈاس بطور PD# مثال ڈیٹا ٹائم کالم ڈی ایف = پی ڈی ڈی اے ایف آر اے ایم (time 'ٹائم اسٹیمپ': [[{'ٹائم اسٹیمپ': ['2022-01-01 12:00:00' ، '2022-01-01 13:00:00'] ، 'ویلیو': [10 ، 20]})# 'ٹائم اسٹیمپ' کالم کو ڈیٹیمیڈف میں تبدیل کریں ['ٹائم اسٹیمپ'] = pd.to_datetime (df [' Timestamp '])#' ٹائم اسٹیمپ 'کالم کو بطور انڈیکسڈف.سیٹ_ انڈیکس (' ٹائم اسٹیمپ '، ان پلیس = سچ) ڈیٹا فریم کے ٹائم زون کو تبدیل کرنے کے لئے TZ_Convert () کا طریقہ استعمال کریں۔مطلوبہ ٹائم زون ۔پیتھون کوپی کوڈ# ٹائم زون کو 'امریکہ/new_york'df = df.tz_convert (' امریکہ/new_york ') میں تبدیل کریں ، اس مثال میں ، ہم ڈیٹا فریم کے ٹائم زون کو ڈیفالٹ ٹائم زون سے' امریکہ میں تبدیل کرتے ہیں۔/new_york'.if اگر ڈیٹا فریم میں ٹائم زون سیٹ نہیں ہے تو ، آپ ڈیٹا فریم کو کسی مخصوص ٹائم زون میں مقامی بنانے کے لئے tz_localize () کا طریقہ استعمال کرسکتے ہیں۔ پیتھون کوپی کوڈ# ڈیٹا فریم کو 'امریکہ/LOS_ANGELS' میں مقامی بنائیں۔.tz_localize ('امریکہ/LOS_ANGELES') یہاں ، ہم ڈیٹا فریم کو 'امریکہ/LOS_ANGELES' ٹائم زون پر مقامی بناتے ہیں۔ نوٹ کریں کہ جب ٹائم زون کی تبدیلی انجام دیتے ہو تو ، یہ یقینی بنانا ضروری ہے کہ آپ کے ڈیٹا میں ٹائم زون کے بارے میں ضروری معلومات موجود ہوں۔تبادلوں صرف اس صورت میں درست ہوگا جب اصل ٹائم زون کی معلومات درست ہو۔ آپ ان کالموں میں ڈیٹا ٹائم انڈیکس یا ٹائم اسٹیمپ آبجیکٹ تک رسائی حاصل کرکے اور ان پر TZ_CONVERT () یا TZ_LOCALIZE () کے طریقوں کا استعمال کرکے ڈیٹا فریم کے اندر مخصوص کالموں میں ٹائم زون کے تبادلوں کا اطلاق کرسکتے ہیں۔براہ راست۔ مزید اعلی درجے کی ٹائم زون ہینڈلنگ اور تبادلوں کے ل you ، آپ PYTZ لائبریری کو بھی دریافت کرسکتے ہیں ، جو ازگر میں ٹائم زون کے لئے وسیع پیمانے پر مدد فراہم کرتا ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں آن لائن مصنوعات کی درجہ بندی ہوتی ہے۔آپ کس طرح ان عوامل کا تجزیہ اور شناخت کریں گے جو جذبات کے تجزیہ اور فیچر انجینئرنگ کا استعمال کرتے ہوئے اعلی مصنوعات کی درجہ بندی میں شراکت کرتے ہیں؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ڈیٹا فریم میں کالم کے وسط ، میڈین اور موڈ کا حساب لگانے کے لئے یہاں ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس ڈیٹا فریمڈف = PD.Dataframe ({'قدر': [10 ، 20 ، 30 ، 30 ، 30 ، 40 40.). ویلیوز [0] پرنٹ (\"مطلب:\" ، مطلب) پرنٹ (\"میڈین:\" ، میڈین) پرنٹ (\"موڈ:\" ، موڈ) اس مثال میں ، ہمارے پاس 'ویلیو' نامی کالم والا ڈیٹا فریم ہے۔ہم وسط کا حساب لگانے کے لئے 'ویلیو' کالم کے وسط () طریقہ کا استعمال کرتے ہیں ، میڈین کا حساب لگانے کے لئے میڈین () طریقہ ، اور موڈ کا حساب لگانے کے لئے موڈ () کا طریقہ۔ویلیو وصولی کا استعمال کرتے ہوئے موڈ کو نکالا جاتا ہے ، یہ فرض کرتے ہوئے کہ ڈیٹاسیٹ میں صرف ایک ہی موڈ ہے۔ آؤٹ پٹ یہ ہوگا: میک فیل کوپی کوڈیمین: 36.25 میڈیم: 35.0Mod، اور موڈ 50 ہے۔ نوٹ کریں کہ اگر ڈیٹاسیٹ میں متعدد طریقوں موجود ہیں تو موڈ () کا طریقہ متعدد اقدار کو واپس کرسکتا ہے۔اس مثال میں ، ہم فرض کرتے ہیں کہ صرف ایک ہی موڈ ہے اور انڈیکسنگ (اقدار [0]) کا استعمال کرتے ہوئے پہلی قدر نکالیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا گیا ہے جس میں سوشل میڈیا ڈیٹا ہے۔آپ کس طرح اثر انداز کرنے والوں کا تجزیہ اور شناخت کریں گے اور نیٹ ورک کے تجزیہ اور جذبات کے تجزیے کا استعمال کرتے ہوئے صارف کی مصروفیت پر ان کے اثرات کی نشاندہی کریں گے؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے متعدد شرائط پر مبنی ڈیٹا فریم میں قطاروں کو فلٹر کرنے کے لئے یہاں ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس ڈیٹا فریمڈف = pd.dataframe ({'نام': ['ایلس' ، 'چارلی' ، 'ڈیو'] ،' عمر ': [25 ، 30 ، 35 ، 40] ،' شہر ': [' نیویارک '،' لندن '،' پیرس '،' ٹوکیو ']})# متعدد شرائط فلٹرڈ_ڈیف = ڈی ایف پر مبنی فلٹر قطاریں۔شہر '۔ہم دو شرائط کی بنیاد پر قطار کو فلٹر کرنا چاہتے ہیں: 30 سے زیادہ عمر اور شہر 'لندن' کے برابر۔ہم [] انڈیکسنگ آپریٹر کو قوسین کے اندر کی شرائط کی وضاحت کرنے کے لئے استعمال کرتے ہیں ، جسے \"اور\" حالت کے لئے اینڈ آپریٹر کے ذریعہ الگ کیا جاتا ہے۔ آؤٹ پٹ یہ ہوگا: کاپی کوڈ کا نام ایج سٹی 1 باب 30 لندن ہیر ، صرف 'نام' کے ساتھ 'باب' کے ساتھ ہی قطار'،' عمر '30 کے طور پر ، اور' سٹی 'بطور' لندن 'دونوں شرائط کو پورا کرتا ہے اور اسے فلٹر شدہ ڈیٹا فریم (فلٹرڈ_ ڈی ایف) میں شامل کیا جاتا ہے۔ آپ مختلف منطقی آپریٹرز جیسے \"اور\" اور \"شرائط ، |\"یا\" شرائط ، اور \"نہیں\" شرائط کے لئے ڈیٹا فریم میں قطاروں کو فلٹر کرنے کے لئے متعدد شرائط کو یکجا کرنے کے لئے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا گیا ہے جس میں ویب ٹریفک کا ڈیٹا ہے۔لاگ ان تجزیہ اور تصو .ر کی تکنیکوں کا استعمال کرتے ہوئے آپ ویب سائٹ کی کارکردگی کی رکاوٹوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ڈیٹا فریم میں کسی دوسرے کالم میں گروپ کردہ کالم میں اقدار کے جوڑے کا حساب لگانے کے لئے یہاں ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'شہر': ['نیو یارک' ، 'لندن'، 'پیرس' ، 'لندن' ، 'پیرس'] ، 'آبادی': [8500000 ، 8900000 ، 2200000 ، 8300000 ، 2400000]})# 'آبادی' کالم میں 'سٹی' ایس یو ایم_بی_سیٹی = ڈی ایف کے ذریعہ گروپوں میں اقدار کی رقم کا حساب لگائیں۔. گروپ بائی ('شہر') ['آبادی']۔ رقم () پرنٹ (SUM_BY_CITY) اس مثال میں ، ہمارے پاس کالم 'شہر' اور 'آبادی' کے ساتھ ایک ڈیٹا فریم ہے۔ہم 'سٹی' کالم کے ذریعہ گروپ کردہ آبادی کی اقدار کی رقم کا حساب لگانا چاہتے ہیں۔ہم 'سٹی' کالم کے ذریعہ ڈیٹا فریم کو گروپ کرنے کے لئے گروپ بائی () کے طریقہ کار کا استعمال کرتے ہیں اور پھر ہر گروپ کے اندر 'آبادی' کالم میں اقدار کی رقم کا حساب لگانے کے لئے رقم () طریقہ کا اطلاق کرتے ہیں۔8500000PARIS 4600000NAME: آبادی ، DTYPE: INT64HERE ، 'سٹی' کالم میں ہر منفرد شہر کے لئے آبادی کی اقدار کا مجموعہ حساب کیا جاتا ہے۔نتیجے میں سیریز آبجیکٹ (SUM_BY_CITY) میں اقدار کے طور پر اشاریہ اور آبادی کی اقدار کی رقم کے طور پر شہر ہیں۔) ، وغیرہ ، مطلوبہ اجتماعی فنکشن کے ساتھ صرف () کی جگہ لے کر۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر ٹرانزیکشن ڈیٹا ہوتا ہے۔آپ کس طرح صارفین کی خریداری کے نمونوں کا تجزیہ اور شناخت کریں گے اور باہمی تعاون کے ساتھ فلٹرنگ کی تکنیکوں کا استعمال کرتے ہوئے ذاتی نوعیت کی مصنوعات کی سفارشات کی سفارش کریں گے؟",
        "Answer": "یقینا!ڈیٹا فریم کو پانڈوں کا استعمال کرتے ہوئے ایک لغت میں تبدیل کرنے کے لئے ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'نام': ['ایلس' ، 'چارلی'] ، 'عمر':۔مثال کے طور پر ، ہمارے پاس کالم 'نام' ، 'عمر' ، اور 'شہر' کے ساتھ ایک ڈیٹا فریم ہے۔ہم ڈیٹا فریم کے TO_DICT () کا طریقہ استعمال کرتے ہیں تاکہ اسے لغت میں تبدیل کیا جاسکے۔اورینٹ = 'ریکارڈز' دلیل نتیجے میں لغت کی شکل کی وضاحت کرتی ہے ، جہاں ڈیٹا فریم کی ہر قطار لغت کا ریکارڈ بن جاتی ہے۔ آؤٹ پٹ یہ ہوگا: سی ایس ایس کوپی کوڈ [{'نام': 'ایلس' ، 'عمر': 25 ، 'شہر ':' نیویارک '} ، {' نام ':' باب '،' عمر ': 30 ،' شہر ':' لندن '} ، {' نام ':' چارلی '،' عمر ': 35 ،' شہر':' پیرس '}] یہاں ، ڈیٹا فریم کو لغت کی فہرست میں تبدیل کیا گیا ہے ، جہاں ہر لغت ڈیٹا فریم کی ایک قطار کی نمائندگی کرتی ہے۔لغات کی کلیدیں کالم کے ناموں سے مطابقت رکھتی ہیں ، اور اقدار اسی سیل اقدار کے مطابق ہیں۔ نوٹ کریں کہ TO_DICT () طریقہ مختلف لغت کی شکلوں کے لئے مختلف دیگر اختیارات فراہم کرتا ہے۔آپ کالم کے ناموں کی لغت کو کلیدوں اور کالم کی اقدار کے طور پر اقدار کے طور پر ، یا 'فہرست' کے طور پر 'ڈکٹ' کے طور پر اورینٹ پیرامیٹر کی وضاحت کرسکتے ہیں جہاں ہر کالم کا نام اپنی اقدار کی فہرست میں نقشہ بناتا ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں ملازمین کی اطمینان کا ڈیٹا ہوتا ہے۔آپ کس طرح ان عوامل کا تجزیہ اور شناخت کریں گے جو رجعت تجزیہ اور سروے کے اعداد و شمار کا استعمال کرتے ہوئے ملازمین کی اطمینان اور مشغولیت میں معاون ہیں؟",
        "Answer": "یقینا!یہاں ڈیٹا فریم کو JSON سٹرنگ میں تبدیل کرنے کے لئے ایک مثال کا کوڈ ہے جس کا استعمال کرتے ہوئے پانڈوں کا استعمال کرتے ہوئے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹی فریمف = PD.Dataframe ({'نام': ['ایلس' ، 'چارلی'] ، 'عمر' '.اس مثال میں ، ہمارے پاس کالم 'نام' ، 'عمر' ، اور 'شہر' کے ساتھ ایک ڈیٹا فریم ہے۔ہم ڈیٹا فریم کے TO_JSON () کا طریقہ استعمال کرتے ہیں تاکہ اسے JSON تار میں تبدیل کیا جاسکے۔اورینٹ = 'ریکارڈز' دلیل کے نتیجے میں JSON سٹرنگ کی شکل کی وضاحت ہوتی ہے ، جہاں ڈیٹا فریم کی ہر قطار JSON ریکارڈ بن جاتی ہے۔ آؤٹ پٹ ہوگا: CSSCOPY کوڈ [{\"نام\": \"ایلس\" ، \"عمر\": 25 ،\"سٹی\": \"نیو یارک\"} ، {\"نام\": \"باب\" ، \"عمر\": 30 ، \"شہر\": \"لندن\"} ، {\"نام\": \"چارلی\" ، \"عمر\": 35 ، \"شہر \":\" پیرس \"}] یہاں ، ڈیٹا فریم کو JSON تار میں تبدیل کیا گیا ہے جو لغت کی فہرست کی نمائندگی کرتا ہے۔ہر لغت ڈیٹا فریم کی ایک قطار کی نمائندگی کرتی ہے ، جہاں کلیدیں کالم کے ناموں سے مطابقت رکھتی ہیں اور اقدار اسی سیل اقدار سے مطابقت رکھتی ہیں۔ نوٹ کریں کہ TO_JSON () طریقہ مختلف JSON فارمیٹس کے لئے مختلف دیگر اختیارات فراہم کرتا ہے۔آپ JSON سٹرنگ حاصل کرنے کے لئے 'کالم' کے طور پر اورینٹ پیرامیٹر کی وضاحت کرسکتے ہیں جہاں کالم کے نام چابیاں بن جاتے ہیں اور کالم کی اقدار اقدار بن جاتی ہیں ، یا 'انڈیکس' JSON سٹرنگ میں انڈیکس اقدار کو شامل کرنے کے لئے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں مریض الیکٹرانک صحت کے ریکارڈ ہوتے ہیں۔ایسوسی ایشن رول کان کنی اور کلینیکل ڈیٹا کا استعمال کرتے ہوئے آپ بیماری کے شریک ہونے کے نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ڈیٹا فریم میں کالم کی مجموعی مصنوعات کا حساب لگانے کے لئے یہاں ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس ڈیٹا فریمڈف = pd.dataframe ({'ویلیو': [2 ، 3 ، 4 ، 5]})# مجموعی حساب کتاب کریں'ویلیو' کالمکومولیٹو_ پروڈکٹ = ڈی ایف ['ویلیو'] کی مصنوعات۔ کمپروڈ () پرنٹ (مجموعی_ پروڈکٹ) اس مثال میں ، ہمارے پاس 'ویلیو' نامی کالم والا ڈیٹا فریم ہے۔ہم مجموعی مصنوعات کا حساب لگانے کے لئے 'ویلیو' کالم کے کمپروڈ () طریقہ کار کا استعمال کرتے ہیں۔کمپرڈ () کا طریقہ کالم کے آغاز سے لے کر ہر صف تک تمام اقدار کی پیداوار کا حساب لگاتا ہے ، جس کے نتیجے میں مجموعی مصنوعات کی ایک سیریز ہوتی ہے۔ آؤٹ پٹ یہ ہوگا: یامل کوپی کوڈ 0 21 62 243 120Name: ویلیہر صف کے لئے 'ویلیو' کالم کی مصنوعات کا حساب لگایا جاتا ہے۔نتیجے میں سیریز آبجیکٹ (مجموعی_ پروڈکٹ) کی لمبائی ڈیٹا فریم کی طرح ہوتی ہے ، جہاں ہر قدر اس صف تک مجموعی مصنوع کی نمائندگی کرتی ہے۔ نوٹ کریں کہ اگر کالم میں کوئی گمشدہ اقدار (این اے این) موجود ہیں تو ، مجموعی مصنوع بھی نان ہوگا۔اس نقطہ کے بعد.اگر ضرورت ہو تو فلنا () یا ڈراپنا () جیسے طریقوں کا استعمال کرتے ہوئے مجموعی مصنوع کا حساب لگانے سے پہلے آپ گمشدہ اقدار کو سنبھال سکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا گیا ہے جس میں سوشل میڈیا ڈیٹا ہے۔ٹیکسٹ مائننگ اور ٹائم سیریز تجزیہ کا استعمال کرتے ہوئے آپ رجحان سازی کے موضوعات اور ہیش ٹیگ کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ڈیٹا فریم کے کالم میں لگاتار قطاروں کے درمیان فرق کا حساب لگانے کے لئے یہاں ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'ویلیو': [2 ، 5 ، 8 ، 12]})#'ویلیو' کالم ڈف = ڈی ایف ['ویلیو'] میں لگاتار قطاروں کے درمیان فرق کا حساب لگائیں۔ ڈف () پرنٹ (فرق) اس مثال میں ، ہمارے پاس 'ویلیو' نامی کالم والا ڈیٹا فریم ہے۔ہم لگاتار قطاروں کے مابین فرق کا حساب لگانے کے لئے 'ویلیو' کالم کے مختلف () طریقہ کار کا استعمال کرتے ہیں۔ڈف () طریقہ کالم میں ہر قدر اور پچھلی قدر کے درمیان فرق کا حساب لگاتا ہے ، جس کے نتیجے میں اختلافات کی ایک سیریز ہوتی ہے۔ آؤٹ پٹ یہ ہوگا: یامل کوپی کوڈ 0 نان 1 3.02 3.03 4.0Name: ویلی'ویلیو' کالم کا حساب لگایا جاتا ہے۔نتیجے میں سیریز آبجیکٹ (DIFF) کی لمبائی ڈیٹا فریم کی طرح ہے ، جہاں پہلی قیمت نان ہے کیونکہ فرق کی گنتی کرنے کے لئے کوئی پچھلی قیمت نہیں ہے ، اور اس کے بعد کی اقدار ہر قدر اور پچھلی قدر کے درمیان فرق کی نمائندگی کرتی ہیں۔ نوٹ کریں کہ آپ کر سکتے ہیں۔کسی خاص وقفے میں اقدار کے مابین فرق کا حساب لگانے کے لئے ڈف () طریقہ کار کے پیرامیٹر کی بھی وضاحت کریں۔مثال کے طور پر ، ڈی ایف ['ویلیو']۔ ڈف (ادوار = 2) اس سے پہلے ہر قدر اور قیمت کی دو قطاروں کے درمیان فرق کا حساب لگائے گا۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں موبائل ایپ میں صارف کی سرگرمی کا ڈیٹا ہوتا ہے۔آپ کس طرح ان عوامل کا تجزیہ اور شناخت کریں گے جو ہم آہنگی کے تجزیہ اور طرز عمل کی پیمائش کا استعمال کرتے ہوئے صارف کی برقراری اور مشغولیت کو متاثر کرتے ہیں؟",
        "Answer": "یقینا!ڈیٹا فریم کی ہر قطار میں فنکشن کا اطلاق کرنے اور پانڈوں کا استعمال کرتے ہوئے نتائج کی بنیاد پر ایک نیا کالم بنانے کے لئے ایک مثال کوڈ ہے: پی ڈی کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس کو PD# مثال کے طور پر ڈیٹا فیمڈف = PD.Dataframe ({'نام': ['ایلس' ، '،'باب '،' چارلی '] ،' عمر ': [25 ، 30 ، 35]})# ہر روڈف پر لاگو ہونے کے لئے کسی فنکشن کی وضاحت کریں۔# فنکشن کو ہر صف پر لاگو کریں اور ایک نیا کالم 'زمرہ' ڈی ایف ['زمرہ'] = ڈی ایف ['عمر'] بنائیں۔ اس مثال کے طور پر ، ہمارے پاس کالم 'نام' کے ساتھ ایک ڈیٹا فریم ہے۔اور 'عمر'۔ہم ایک فنکشن کا حساب کتاب_کیٹری (عمر) کی وضاحت کرتے ہیں جو ان پٹ کے طور پر عمر لیتا ہے اور عمر کی بنیاد پر ایک زمرہ لوٹاتا ہے۔اس کے بعد ہم ہر صف پر فنکشن کو لاگو کرنے اور نتائج کی بنیاد پر ایک نیا کالم 'زمرہ' بنانے کے لئے 'عمر' کالم پر لاگو () طریقہ استعمال کرتے ہیں۔چارلی 35 جوانی ، فنکشن کا حساب کتاب_کیٹری (عمر) 'عمر' کالم میں ہر قدر پر لاگو ہوتا ہے ، جس کے نتیجے میں ایک نیا کالم 'زمرہ' ہوتا ہے جو ہر عمر کو حالت کی بنیاد پر 'جوان' یا 'بالغ' کے طور پر درجہ بندی کرتا ہے۔نتیجے میں ڈیٹا فریم (ڈی ایف) میں نیا کالم شامل ہے۔ آپ کسی بھی کسٹم فنکشن کو لاگو () طریقہ کار کا استعمال کرتے ہوئے ہر صف میں لاگو کرسکتے ہیں اور نتیجہ کی بنیاد پر ایک نیا کالم تشکیل دے سکتے ہیں۔فنکشن کو الگ الگ یا لیمبڈا فنکشن ان لائن کے طور پر اطلاق () طریقہ کار کے ساتھ بیان کیا جاسکتا ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں صارفین کی شکایات کا ڈیٹا ہوتا ہے۔آپ متن کی کان کنی اور قدرتی زبان پروسیسنگ کی تکنیکوں کا استعمال کرتے ہوئے شکایات کی سب سے عام اقسام اور ان کے حل کے اوقات کا تجزیہ اور ان کی شناخت کیسے کریں گے؟",
        "Answer": "یقینا!ڈیٹا فریم میں کالم کی وزن کے اوسط کا حساب لگانے کے لئے یہاں ایک مثال کوڈ ہے جس کا استعمال کسی دوسرے کالم کا استعمال کرتے ہوئے پانڈوں کا استعمال کرتے ہوئے ہوتا ہے: پیڈون کوپی کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹا فریمڈف = pd.dataframe ({'اقدار': [10 ، 20 ، 30 ، 40]، 'وزن': [0.2 ، 0.3 ، 0.4 ، 0.1]})# 'وزن' کالم کے وزن کے اوسط 'کالم' کالم وائٹ_اوریج = (DF ['اقدار'] * DF ['وزن'])۔ رقم () ())۔ رقم ()/ df ['وزن']۔ رقم () پرنٹ (وزن والے_اوریج) اس مثال میں ، ہمارے پاس کالم 'اقدار' اور 'وزن' کے ساتھ ایک ڈیٹا فریم ہے۔ہم 'وزن' کالم کا استعمال کرتے ہوئے 'اقدار' کالم کی وزن اوسط کا حساب لگاتے ہیں۔ہم 'ویلیوز' کالم میں ہر قدر کو 'ویٹ' کالم میں اسی قدر کے ساتھ ضرب دیتے ہیں ، مصنوعات کا خلاصہ کرتے ہیں ، اور اسے 'ویٹ' کالم کے مجموعہ سے تقسیم کرتے ہیں۔ آؤٹ پٹ یہ ہوگا: کاپی کوڈ 23.0 ہیئر ،'ویلیوز' کالم کی وزنی اوسط کا حساب 'وزن' کالم کا استعمال کرتے ہوئے کیا جاتا ہے۔نتیجے میں قیمت 'اقدار' کالم کی اوسط کی نمائندگی کرتی ہے ، جہاں ہر قیمت کو 'وزن' کالم میں اسی قدر کے مطابق وزن کیا جاتا ہے۔ نوٹ کریں کہ وزن کے درست وزن کے حساب کتاب کے لئے وزن 1 تک 1 تک ہونا چاہئے۔اگر ضرورت ہو تو ، آپ وزن کے اوسط کا حساب لگانے سے پہلے 'وزن' کے کالم کو اس کی رقم کو تقسیم کرکے معمول بنا سکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں گاڑی ٹیلی میٹری کا ڈیٹا ہوتا ہے۔کلسٹرنگ الگورتھم اور سینسر ڈیٹا کا استعمال کرتے ہوئے آپ ڈرائیونگ کے نمونوں اور طرز عمل کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے متعلقہ کالم کے وسط کے ساتھ کسی ڈیٹا فریم میں گمشدہ اقدار کو تبدیل کرنے کے لئے ایک مثال کوڈ ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور PDimport numpy کے طور پر NP# مثال کے طور پر گمشدہ قدروں کے ساتھ ڈیٹا فریم ({'A': [1 ، 2 ، 2 ، [1 ، 2 ، 2 ، [1 ، 2 ،np.nan ، 4 ، 5] ، 'B': [6 ، NP.Nan ، 8 ، NP.Nan ، 10]})# گمشدہ اقدار کو کالم کے ذریعہ تبدیل کریں۔DF_FLED) اس مثال میں ، ہمارے پاس کالم 'A' اور 'B' کے ساتھ ایک ڈیٹا فریم ہے ، جہاں کچھ اقدار NP.nan کی نمائندگی کرتے ہیں۔ہم گمشدہ اقدار کو متعلقہ کالم کے وسط سے تبدیل کرنے کے لئے ڈیٹا فریم کے فلنا () طریقہ کا استعمال کرتے ہیں۔وسط () فنکشن ہر کالم کے وسیلہ کا حساب لگاتا ہے ، اور فلنا () گمشدہ اقدار کو اپنے متعلقہ کالم کے ذرائع سے تبدیل کرتا ہے۔ آؤٹ پٹ یہ ہوگا: CSSCOPY کوڈ A B0 1.0 6.01 2.0 8.02 3.0 8.03 4.0 8.04 5.0 10.0 HERE ، گمشدہ اقدارکالموں میں 'A' اور 'B' کو ہر متعلقہ کالم کے وسط کے ساتھ تبدیل کیا جاتا ہے۔نتیجے میں ڈیٹا فریم (DF_FLED) میں وہ اصل اقدار پر مشتمل ہیں جہاں وہ دستیاب تھے اور کالم کا مطلب ہے جہاں گمشدہ اقدار موجود ہیں۔ نوٹ کریں کہ فلنا () کے طریقہ کار میں یہ کنٹرول کرنے کے لئے مختلف پیرامیٹرز ہوتے ہیں ، جیسے کہ گمشدہ اقدار کو کس طرح بھرا جاتا ہے ، جیسے اس کی بجائے کسی خاص قدر کی وضاحت کرنامطلب ، ایف فل یا بی فل طریقوں کا استعمال کرتے ہوئے ، یا انٹرپولیشن طریقوں کا استعمال کرتے ہوئے آگے یا پیچھے بھرنا۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں آن لائن ڈیٹنگ پروفائلز ہوتے ہیں۔آپ کس طرح صارف کی ترجیحات میں نمونوں کا تجزیہ اور شناخت کریں گے اور کلسٹرنگ اور سفارش الگورتھم کا استعمال کرتے ہوئے مطابقت کو مماثل بنائیں گے؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ڈیٹا فریم میں ڈیٹ ٹائم اقدار کے کالم سے سال ، مہینہ اور دن نکالنے کے لئے ایک مثال کوڈ ہے: پی ڈی کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹا ٹائم کالم ڈی ایف = پی ڈی ڈی اے ایف آر اے ایم ({'2022- [' 2022- '05-10 14:30:00 '،' 2022-06-15 09:45:00 '،' 2022-07-20 18:20:00 ']})#' ڈیٹ ٹائم 'کالم کو ڈیٹ ٹائم ٹائپڈ میں تبدیل کریں [' ڈیٹ ٹائم'] = pd.to_dattime (df [' dattime '])#' ڈیٹ ٹائم 'کالم ڈی ایف [' سال '] = df [' ڈیٹ ٹائم '] سے سال ، مہینہ اور دن کا عرق سال ، مہینہ ، اور دن['ڈیٹ ٹائم']ہم پہلے 'ڈیٹ ٹائم' کالم کو PD.TO_DATETIME () فنکشن کا استعمال کرتے ہوئے ڈیٹ ٹائم ٹائپ میں تبدیل کرتے ہیں۔اس کے بعد ، ہم ڈیٹ ٹائم پراپرٹیز تک رسائی حاصل کرنے اور سال ، مہینے اور دن کو الگ الگ کالموں 'سال' ، 'مہینے' ، اور 'ڈے' میں بالترتیب نکالنے کے لئے .DT رسار کا استعمال کرتے ہیں۔ آؤٹ پٹ ہو گا: YAMLCOPY کوڈ ڈیٹ ٹائم سال کا مہینہڈے 0 2022-05-10 14:30:00 2022 5 101 2022-06-15 09:45:00 2022 6 152 202-07-20 18:20:00 2022 7 20 20 یہاں ، سال ، مہینہ ، اور دن نکالا جاتا ہے'ڈیٹ ٹائم' کالم سے اور علیحدہ کالموں میں محفوظ۔نتیجے میں ڈیٹا فریم (ڈی ایف) میں 'ڈیٹ ٹائم' کالم اور نئے کالم 'سال' ، 'مہینہ' ، اور 'ڈے' میں نکالی گئی اقدار کے ساتھ اصل ڈیٹ ٹائم اقدار پر مشتمل ہے۔دوسرا ، ہفتے کا دن ، وغیرہ ، اسی .DT رسار اور مناسب ڈیٹ ٹائم پراپرٹیز جیسے گھنٹے ، منٹ ، دوسرا ، ڈے آف ویک ، وغیرہ کا استعمال کرتے ہوئے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر کی خریداری کا ڈیٹا ہوتا ہے۔آپ ریگریشن تجزیہ اور خصوصیت کی اہمیت کی تکنیک کا استعمال کرتے ہوئے صارفین کے اخراجات کو آگے بڑھانے والے انتہائی بااثر عوامل کا تجزیہ اور ان کی نشاندہی کیسے کریں گے؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ایک ڈیٹا فریم میں متعدد کالموں کے مابین ارتباط میٹرکس کا حساب لگانے کے لئے ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'A': [1 ، 2 ، 3 ، 4 ، 5] ، 'بی۔': [6 ، 7 ، 8 ، 9 ، 10] ،' C ': [11 ، 12 ، 13 ، 14 ، 15]})# اس مثال کے طور پر ، ہم ارتباط میٹرکسکوریلیشن_میٹرکس = df.corr () پرنٹ (ارتباط_میٹرکس) کا حساب لگائیں۔کالم 'A' ، 'B' ، اور 'C' کے ساتھ ڈیٹا فریم رکھیں۔ہم ان کالموں کے مابین ارتباط میٹرکس کا حساب لگانے کے لئے ڈیٹا فریم کے CORR () طریقہ کار کا استعمال کرتے ہیں۔کور () کا طریقہ ان کی اقدار کی بنیاد پر کالموں کے مابین جوڑے کے ارتباط کی گنتی کرتا ہے۔ آؤٹ پٹ یہ ہوگا: سی ایس ایس سی او پی سی کوڈ اے بی سی اے 1.000000 1.0000 1.000000 1.0000 1.000000000000000000c 1.000000 1.000000 1.0000 here ، ارتباط میٹرکس کا حساب ہے ، جو ایک مربع میٹکس ہے ، جو ایک مربع میٹرکس ہے ، جو ایک مربع میٹرکس ہے ، جو ایک مربع میٹرکس ہے ، جو ایک مربع میٹرکس ہےکالموں کے ہر جوڑے کے درمیان باہمی ربط۔چونکہ ہر کالم میں اقدار اس مثال میں ایک جیسی ہیں ، لہذا کالموں کے ہر جوڑے کے مابین ارتباط 1 ہے۔ نوٹ کریں کہ ارتباط کی اقدار -1 سے 1 تک ہوتی ہیں ، جہاں 1 ایک مضبوط مثبت ارتباط کی نشاندہی کرتا ہے ، -1 ایک مضبوط منفی ارتباط کی نشاندہی کرتا ہے۔، اور 0 کالموں کے مابین کوئی ارتباط کی نشاندہی نہیں کرتا ہے۔ آپ ہیٹ میپس کا استعمال کرتے ہوئے ارتباط میٹرکس کو بھی تصور کرسکتے ہیں یا مزید تجزیہ کے لئے میٹرکس سے انفرادی ارتباط کی اقدار تک رسائی حاصل کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں نیٹ ورک ٹریفک کا ڈیٹا ہوتا ہے۔آپ بے ضابطگی کا پتہ لگانے والے الگورتھم اور نیٹ ورک کے بہاؤ کے تجزیے کا استعمال کرتے ہوئے نیٹ ورک کے حملوں کے نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے کسی دوسرے کالم کی حالت پر مبنی ڈیٹا فریم میں ایک نیا کالم بنانے کے لئے ایک مثال کوڈ ہے: PD# مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس ڈیٹا فریمڈف = PD.Dataframe ({'اقدار': [10 ، 20 ، 30 ، 40 ، 50]})# 'اقدار' کالم ڈی ایف ['زمرہ'] کی حالت پر مبنی ایک نیا کالم 'زمرہ' بنائیں۔) اس مثال میں ، ہمارے پاس 'اقدار' کے نام سے کالم والا ڈیٹا فریم ہے۔ہم 'اقدار' کالم کی حالت پر مبنی ایک نیا کالم 'زمرہ' تشکیل دیتے ہیں۔ہم 'اقدار' کالم میں اقدار پر اعادہ کرنے کے لئے فہرست کی تفہیم کا استعمال کرتے ہیں ، حالت کو چیک کریں (اس معاملے میں ، اگر قیمت 30 سے زیادہ ہے) ، اور اسی زمرے ('اعلی' یا 'کم') کو رائل پر تفویض کریں۔نیا 'زمرہ' کالم۔ آؤٹ پٹ یہ ہوگا: ریاضی کا کوڈ ویلیو کیٹیگری 0 10 LOW1 20 LOW2 30 LOW3 40 HIGHHERE ، ایک نیا کالم 'زمرہ' اس شرط کی بنیاد پر بنایا گیا ہے کہ اگر 'اقدار' کالم میں قدر زیادہ ہے تو30 سے زیادہ ، اسے 'ہائی' تفویض کیا گیا ہے۔بصورت دیگر ، یہ 'کم' تفویض کیا جاتا ہے۔ آپ اپنی مخصوص ضروریات کے مطابق حالت اور اس سے متعلقہ اقدار میں ترمیم کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر سروے کا ڈیٹا ہوتا ہے۔آپ کس طرح اہم ترین عوامل کا تجزیہ اور شناخت کریں گے جو خصوصیت کی اہمیت کی تکنیک اور پیش گوئی کرنے والی ماڈلنگ کا استعمال کرتے ہوئے صارفین کی وفاداری اور اطمینان میں معاون ہیں؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے عمودی طور پر دو ڈیٹا فریموں کو ہم آہنگ کرنے کے لئے ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframesdf1 = pd.dataframe ({'A': [1 ، 2 ، 3] ، 'B': [4 ، 5 ، 6]}) df2 = pd.dataframe ({'a': [7 ، 8 ، 9] ، 'بی': [10 ، 11 ، 12]})# ڈیٹا فیموں کو عمودی طور پر ڈیف_کونکاٹینیٹڈ = پی ڈی ڈاٹ کوکیٹ ([ڈی ایف 1 ، ڈی ایف 2]) پرنٹ کریں(df_concatenated) اس مثال میں ، ہمارے پاس ایک ہی کالم کے نام 'A' اور 'B' کے ساتھ دو ڈیٹا فیمس DF1 اور DF2 ہیں۔عمودی طور پر ان کو جوڑنے کے ل we ، ہم PD.CONCAT () فنکشن کا استعمال کرتے ہیں اور ڈیٹا فریموں کو بطور فہرست پاس کرتے ہیں۔پہلے سے طے شدہ طور پر ، pd.concat () عمودی عمل (محور = 0) انجام دیتا ہے۔ آؤٹ پٹ یہ ہوگا: CSSCOPY کوڈ A B0 1 41 2 52 3 60 7 101 8 112 9 12 یہاں ، دو ڈیٹا فیمس DF1 اور DF2 عمودی طور پر شامل ہیں ،ایک نیا ڈیٹا فریم DF_CONCATENATET کے نتیجے میں۔نتیجے میں ہونے والے ڈیٹا فریم میں دونوں ڈیٹا فریموں کی تمام قطاریں شامل ہیں ، اصل قطار کے اشاریے محفوظ ہیں۔ نوٹ کریں کہ کالم کے نام اور کالم آرڈر کو کنیٹیٹیٹڈ ڈیٹا فریم میں برقرار رکھا گیا ہے۔اگر آپ نتیجے میں ہونے والے ڈیٹا فریم میں قطار انڈیکس کو دوبارہ ترتیب دینا چاہتے ہیں تو ، آپ RESET_INDEX () کا طریقہ استعمال کرسکتے ہیں ، جیسے DF_CONCATENATED.reset_index (ڈراپ = سچ)۔ اگر ڈیٹا فریموں کے کالم کے مختلف نام یا آرڈر ہیں تو ، آپ محور = 1 کی وضاحت بھی کرسکتے ہیں۔پیرامیٹر ان کو افقی طور پر (کالم وار) کو جوڑنے کے لئے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں مالیاتی مارکیٹ کا ڈیٹا ہوتا ہے۔آپ کس طرح مارکیٹ میں اتار چڑھاؤ کے نمونوں کا تجزیہ اور شناخت کریں گے اور ٹائم سیریز تجزیہ اور مشین لرننگ الگورتھم کا استعمال کرتے ہوئے اتار چڑھاؤ کی پیشن گوئی ماڈل تیار کریں گے؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے ڈیٹا فریم میں ڈور کے کالم کو چھوٹے کے کالم میں تبدیل کرنے کے لئے ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'متن': ['ہیلو' ، 'اوپن' ، 'اوپنائی' ، 'ازگر ']})#' ٹیکسٹ 'کالم کو کم سے کم [' متن '] = DF [' متن '] میں تبدیل کریں۔ str.lower () پرنٹ (DF) اس مثال میں ، ہمارے پاس' متن 'کے نام سے کالم والا ڈیٹا فریم ہے۔ڈور پر مشتملہم تمام ڈوروں کو کم کرنے کے لئے 'ٹیکسٹ' کالم کے .Str.lower () کا طریقہ استعمال کرتے ہیں۔ آؤٹ پٹ ہوگا: مارک ڈاون کوپی کوڈ ٹیکسٹ 0.lower () طریقہ.کالم میں موجود تمام ڈوروں کو لوئر کیس میں تبدیل کیا جاتا ہے ، جس کے نتیجے میں ایک نیا ڈیٹا فریم ہوتا ہے جہاں 'ٹیکسٹ' کالم میں لوئر کیسز ڈور ہوتے ہیں۔پانڈوں میں سٹرنگ آپریشن کے لئے دستیاب ہے۔یہ کالم میں ہر تار کو چھوٹے حصے میں تبدیل کرتا ہے۔ آپ اسی طرح کے سٹرنگ ایکسیسر طریقوں جیسے .str.upper () کو بڑے میں تبدیل کرنے کے لئے استعمال کرسکتے ہیں۔مختلف سٹرنگ آپریشنز کے لئے پانڈوں کے ذریعہ۔"
    },
    {
        "Question": "",
        "Answer": "ڈیٹا فریم میں دو کالموں کے مابین یکلیڈین فاصلے کا حساب لگانے کے ل you ، آپ نیپی لائبریری استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور پی ڈیمپورٹ نیمپی بطور این پی#، 10]})# 'x' اور 'y' کالم سیوکلیڈین_ڈیسٹنس = np.linalg.norm (df ['x'] - df ['y']) پرنٹ (euclidean_distance) کے درمیان یوکلیڈین فاصلے کا حساب لگائیں ، اس مثال میں ، ہمارے پاس ایک ہے۔کالم 'X' اور 'y' کے ساتھ ڈیٹا فریم۔ہم 'X' اور 'Y' کالموں کے مابین یوکلیڈین فاصلے کا حساب لگانے کے لئے NP.LINLG.NORM () NUMPY سے فنکشن کا استعمال کرتے ہیں۔یوکلیڈین فاصلے کا حساب دو کالموں میں اسی عناصر کے مابین مربع اختلافات کی رقم کے مربع جڑ کے طور پر کیا جاتا ہے۔ آؤٹ پٹ یہ ہوگا: کاپی کوڈ 8.660254037844387here ، 'X' اور 'Y' کالموں کے درمیان یوکلیڈین فاصلہ کا استعمال کرتے ہوئے حساب کیا جاتا ہے۔NP.LINLG.Norm () فنکشن۔نتیجہ ایک ہی قیمت ہے جو دو کالموں کے مابین فاصلے کی نمائندگی کرتی ہے۔ نوٹ کریں کہ NP.LINLG.Norm () فنکشن عام طور پر صفوں یا ویکٹروں کے مابین یکلیڈین فاصلے کا حساب لگانے کے لئے استعمال کیا جاسکتا ہے ، نہ کہ صرف ڈیٹا فریم کالموں تک۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا گیا ہے جس میں سوشل میڈیا ڈیٹا ہے۔نیٹ ورک تجزیہ اور گراف الگورتھم کا استعمال کرتے ہوئے آپ صارف کے اثر و رسوخ اور مشغولیت کے نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "یقینا!پانڈوں کا استعمال کرتے ہوئے سٹرنگ کالم کی لمبائی پر مبنی ڈیٹا فریم میں قطاروں کو فلٹر کرنے کے لئے ایک مثال کا کوڈ یہاں ہے: PD# مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'متن': ['ہیلو' ، 'ورلڈ' ، 'اوپنائی'،' ازگر ']})#' ٹیکسٹ 'کالم فلٹرڈ_ ڈی ایف = ڈی ایف [ڈی ایف [ڈی ایف [' ٹیکسٹ '] کی لمبائی پر مبنی فلٹر قطاریں۔ str.len ()> 5] پرنٹ (فلٹرڈ_ ڈی ایف) اس مثال کے طور پر ، ہمارے پاس ایک ڈیٹا فریم ہے جس کے ساتھ ہمارے پاس ایک ڈیٹا فریم ہے۔'متن' نامی ایک کالم جس میں ڈور شامل ہیں۔ہم ہر تار کی لمبائی کا حساب لگانے کے لئے 'ٹیکسٹ' کالم کے .str.len () طریقہ استعمال کرتے ہیں۔اس کے بعد ، ہم قطاروں کو فلٹر کرنے کے لئے ایک شرط لگاتے ہیں جہاں 'ٹیکسٹ' کالم کی لمبائی 5 سے زیادہ ہے۔کالمصرف وہ صف جہاں 'متن' ویلیو 'اوپنائی' ہے (5 سے زیادہ لمبائی کے ساتھ) فلٹرڈ ڈیٹا فریم میں شامل ہے۔ آپ اپنی مخصوص ضروریات کے مطابق حالت میں ترمیم کرسکتے ہیں۔مثال کے طور پر ، آپ ڈی ایف ['متن'] استعمال کرسکتے ہیں۔کالم میں ہر تار کی لمبائی حاصل کرنے کے لئے۔اس کے بعد ، نتیجے میں بولین سیریز مماثل قطار کو منتخب کرنے کے لئے ڈیٹا فریم پر فلٹر کے طور پر استعمال ہوتی ہے۔"
    },
    {
        "Question": "\"آپ کو ایک ڈیٹاسیٹ دیا گیا ہے جس میں کسٹمر کی خریداری کا ڈیٹا موجود ہے۔ آپ آر ایف ایم (ریسنسی ، تعدد ، مانیٹری) تجزیہ اور کلسٹرنگ تکنیکوں کا استعمال کرتے ہوئے انتہائی منافع بخش صارفین کے طبقات کا تجزیہ اور شناخت کیسے کریں گے؟\"",
        "Answer": "کسی ڈیٹا فریم میں کالم کی زیادہ سے زیادہ کا حساب لگانے کے ل you ، آپ پانڈوں میں .کومیکس () طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'اقدار': [10 ، 5 ، 5 ، 8 ، 12 ، 6]})# 'اقدار' کالم ڈی ایف ['cumulative_max'] کے مجموعی زیادہ سے زیادہ کا حساب لگائیں۔= df ['values']. cummax () پرنٹ (DF) اس مثال میں ، ہمارے پاس 'اقدار' کے نام سے کالم والا ڈیٹا فریم ہے۔ہم ہر صف میں مجموعی طور پر زیادہ سے زیادہ کا حساب لگانے کے لئے 'اقدار' کالم پر .کومیکس () طریقہ استعمال کرتے ہیں۔ آؤٹ پٹ ہو گا: ریاضی کا کوڈ کوڈ ویلیو کی ویلیوز مجموعی_میکس 0 101 5 102 8 103 12 124 6 12 یہاں ، 'کمولیٹو_میکس' کالم شامل کیا گیا ہے.کومیکس () طریقہ کار کا استعمال کرتے ہوئے ڈیٹا فریم میں۔نتیجے میں آنے والے کالم میں ہر صف میں 'اقدار' کالم کی مجموعی زیادہ سے زیادہ ہوتی ہے۔یہ ایک نئی سیریز لوٹتا ہے جس میں مجموعی زیادہ سے زیادہ اقدار شامل ہیں۔ آپ اسی طرح کے مجموعی آپریشنز کا اطلاق کرسکتے ہیں جیسے. cumumum () مجموعی رقم کے لئے یا .کومپرڈ () ایک ڈیٹا فریم میں کالم پر دوسرے مجموعی حساب کتاب کرنے کے لئے مجموعی مصنوع کے لئے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر کلیک اسٹریم ڈیٹا ہوتا ہے۔آپ راستہ تجزیہ اور تصو .ر کی تکنیک کا استعمال کرتے ہوئے صارف کے انتہائی موثر تبادلوں کے فننوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم کو ایکسل فائل میں تبدیل کرنے کے ل you ، آپ پانڈوں میں TO_EXCEL () کا طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'نام': ['ایلس' ، 'باب' ، 'چارلی'] ، 'عمر': [25 ، 30 ، 35]})# ڈیٹا فریم کو ایکسل فائلڈف ڈاٹ ٹی او ایکسسل ('آؤٹ پٹ. ایکس ایل ایس ایکس' ، انڈیکس = غلط) پرنٹ (\"ڈیٹا فریم ایکسل فائل میں محفوظ کیا گیا ہے۔\") میں تبدیل کریں ، اس مثال میں ، ہمارے پاس ڈی ایف نامی ڈیٹا فریم ہے۔ہم ڈیٹا فریم پر TO_EXCEL () کا طریقہ استعمال کرتے ہیں تاکہ اسے ایکسل فائل کے طور پر محفوظ کیا جاسکے۔TO_EXCEL () کی پہلی دلیل فائل کا راستہ اور نام ہے جہاں آپ ایکسل فائل کو محفوظ کرنا چاہتے ہیں۔اس معاملے میں ، ہم اسے \"آؤٹ پٹ. ایکس ایل ایس ایکس\" کے طور پر محفوظ کرتے ہیں۔انڈیکس = جھوٹے پیرامیٹر کا استعمال انڈیکس کالم کو ایکسل فائل میں محفوظ ہونے سے خارج کرنے کے لئے کیا جاتا ہے۔ آؤٹ پٹ یہ ہوگا: سی ایس ایس کوپی کوڈیٹا اے ایف آر اے ایم ایکسل فائل کو محفوظ کیا جاتا ہے۔ کوڈ کو چلانے کے بعد ، \"آؤٹ پٹ. ایکس ایل ایس ایکس\" کے نام سے ایک فائل تشکیل دی جائے گی۔موجودہ ڈائرکٹری ، جس میں ایکسل فارمیٹ میں ڈیٹا فریم ڈیٹا موجود ہے۔ نوٹ کریں کہ TO_EXCEL () طریقہ استعمال کرنے کے ل you ، آپ کو اوپن پِکس ایل لائبریری انسٹال کی ضرورت ہے۔اگر آپ نے اسے انسٹال نہیں کیا ہے تو ، آپ اسے PIP انسٹال اوپن پِلکس ایل کا استعمال کرتے ہوئے انسٹال کرسکتے ہیں۔دستیاب اختیارات کے بارے میں مزید معلومات کے لئے دستاویزات: پانڈاس.ڈیٹافریم.ٹو_کسسل ()"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں آن لائن ملازمت پوسٹنگ کا ڈیٹا ہوتا ہے۔آپ ٹیکسٹ مائننگ اور ٹرینڈ تجزیہ کا استعمال کرتے ہوئے ملازمت کی سب سے زیادہ مہارت اور ملازمت کے بازار کے رجحانات کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "مشترکہ کالم کی بنیاد پر دو ڈیٹا فریموں کو ضم/شامل کرنے کے ل you ، آپ پانڈوں میں انضمام () فنکشن استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس ڈیٹا فیمس ڈی ایف 1 = pd.dataframe ({'ID': [1 ، 2 ، 3 ، 4] ، 'نام': ['ایلس' ، 'باب' ، 'چارلی' ،'ڈیو']}) df2 = pd.dataframe ({'ID': [3 ، 4 ، 5 ، 6] ، 'عمر': [25 ، 30 ، 35 ، 40]})# 'ID' پر مبنی ڈیٹا فریموں کو ضم کریںاس مثال میں کالم میجرڈ_ ڈی ایف = پی ڈی ایم (ڈی ایف 1 ، ڈی ایف 2 ، آن = 'آئی ڈی') پرنٹ (مرجڈ_ ڈی ایف) پرنٹ (مرجڈ_ ڈی ایف) ، ہمارے پاس دو ڈیٹا فیمز ، ڈی ایف 1 اور ڈی ایف 2 ہیں ، جو ایک عام کالم 'آئی ڈی' کا اشتراک کرتے ہیں۔ہم 'ID' کالم کی بنیاد پر ڈیٹا فریموں کو ضم کرنے کے لئے انضمام () فنکشن کا استعمال کرتے ہیں۔آن پیرامیٹر کو ضم کرنے کے لئے عام کالم کی نشاندہی کرنے کے لئے 'ID' پر سیٹ کیا گیا ہے۔ آؤٹ پٹ یہ ہوگا: کاپی کوڈ ID نام AGE0 3 چارلی 251 4 ڈیو 30 کے بعد ، دونوں ڈیٹا فریموں کو 'ID' کالم ، اور 'کی بنیاد پر ضم کیا گیا ہے۔نتیجے میں ڈیٹا فریم مرج_ڈیف میں دونوں ڈیٹا فیمز سے ملاپ کی قطاریں شامل ہیں۔مماثل 'ID' اقدار (3 اور 4) کے ساتھ صرف قطاروں کو ضم شدہ ڈیٹا فریم میں شامل کیا گیا ہے۔ آپ مختلف قسم کے شامل ہونے کی بھی وضاحت کرسکتے ہیں ، جیسے اندرونی شمولیت ، بائیں شمولیت ، دائیں شمولیت ، یا بیرونی شمولیت ، کس طرح پیرامیٹر کا استعمال کرتے ہوئے۔انضمام () فنکشن میں۔دستیاب اختیارات کے بارے میں مزید معلومات کے لئے پانڈاس دستاویزات کا حوالہ دیں: پانڈاس ۔مریج ()"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر کی مصنوعات کی درجہ بندی ہوتی ہے۔آپ خصوصیت کی اہمیت کی تکنیک اور پیش گوئی کرنے والی ماڈلنگ کا استعمال کرتے ہوئے مصنوعات کی درجہ بندی پر اثر انداز ہونے والے انتہائی بااثر عوامل کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "کسی حالت کی بنیاد پر ڈیٹا فریم سے قطاریں چھوڑنے کے ل you ، آپ پانڈوں میں بولین انڈیکسنگ استعمال کرسکتے ہیں۔یہاں ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'نام': ['ایلس' ، 'باب' ، 'چارلی'] ، 'عمر': [25 ، 30 ، 35]})# کنڈیشن ڈی ایف = ڈی ایف [ڈی ایف ['عمر']> 25] پرنٹ (ڈی ایف) پر مبنی قطاریں ڈراپ (ڈی ایف) پرنٹ (ڈی ایف) ، ہمارے پاس ڈی ایف نامی ڈیٹا فریم ہے۔ہم کسی حالت کی بنیاد پر ڈیٹا فریم سے قطاریں چھوڑنے کے لئے بولین انڈیکسنگ کا استعمال کرتے ہیں۔حالت DF ['Age']> 25 قطاریں منتخب کرتی ہے جہاں 'عمر' کالم 25 سے زیادہ ہے۔ آؤٹ پٹ ہوگا: مارک ڈاون کاپی کوڈ نام AGE1 باب 302 چارلی 35 ہائر ، ایسی قطاریں جو حالت کو پورا نہیں کرتی ہیں (DF ['عمر' ']> 25) ڈیٹا فریم سے خارج کردیئے گئے ہیں ، اور اس کے نتیجے میں ڈیٹا فریم کو ڈی ایف میں واپس اسٹور کیا جاتا ہے۔ بولین انڈیکسنگ کا استعمال کرتے ہوئے ، آپ مختلف شرائط کا اطلاق مختلف معیارات کی بنیاد پر قطاروں کو چھوڑنے کے لئے کرسکتے ہیں۔فلٹر شدہ نتیجہاگر آپ اصل میں ترمیم کیے بغیر ایک نیا ڈیٹا فریم بنانا چاہتے ہیں تو ، آپ نتیجہ کو ایک نئے متغیر کو تفویض کرسکتے ہیں: پائیٹون کوپی کوڈفلٹرڈ_ڈیف = ڈی ایف [ڈی ایف ['عمر']> 25] اس معاملے میں ، اصل ڈی ایف میں کوئی تبدیلی نہیں کی جاتی ہے ، اورفلٹرڈ قطاریں فلٹر_ڈف میں محفوظ ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا گیا ہے جس میں سوشل میڈیا ڈیٹا ہے۔آپ جذبات کے تجزیہ اور وقت کی سیریز کے تجزیے کا استعمال کرتے ہوئے مخصوص واقعات یا مہمات کے دوران صارف کے جذبات اور مشغولیت کے نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم میں کالم سے انوکھی اقدار نکالنے کے ل you ، آپ پانڈوں میں انوکھا () طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'نام': ['ایلس' ، 'باب' ، 'چارلی' ، 'باب' ، 'ڈیو']# انوکھی اقداراس مثال میں 'نام' کالم یونیک_والیوز = ڈی ایف ['نام'] سے منفرد () پرنٹ (منفرد_اولیوس) سے ، ہمارے پاس 'نام' کے نام سے ایک کالم کے ساتھ ڈی ایف نامی ڈیٹا فریم ہے۔ہم منفرد اقدار کو نکالنے کے لئے 'نام' کالم پر انوکھا () طریقہ استعمال کرتے ہیں۔ آؤٹ پٹ یہ ہوگا: CSSCOPY کوڈ ['ایلس' 'باب' 'چارلی' 'ڈیو'] یہاں ، انوکھا () طریقہ کار ایک صف لوٹاتا ہے'نام' کالم سے انوکھی اقدار کی۔سرنی میں ہر ایک انوکھا نام ہوتا ہے جو ڈیٹا فریم کے 'نام' کالم میں ظاہر ہوتا ہے۔ آپ مطلوبہ کالم نام کے ساتھ 'نام' کی جگہ لے کر ڈیٹا فریم میں دوسرے کالموں سے انوکھی اقدار نکالنے کے ل simillion اسی طرح کی کاروائیاں انجام دے سکتے ہیں۔ نوٹ کریں کہ منفرد کا حکمنتیجے میں صف میں اقدار اس ترتیب پر مبنی ہیں جس میں وہ اصل کالم میں ظاہر ہوتے ہیں۔انوکھی اقدار کو ترتیب دینے کے ل you ، آپ نتیجے میں صف پر ترتیب_اولیوز () کا طریقہ استعمال کرسکتے ہیں: پائیٹون کوپی کوڈونیک_ ویلیوز_سورٹڈ = ڈی ایف ['نام']۔ منفرد ()"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں آن لائن اشتہاری ڈیٹا ہوتا ہے۔آپ A/B ٹیسٹنگ اور اعدادوشمار کے تجزیے کا استعمال کرتے ہوئے مہم کی کارکردگی کو بہتر بنانے اور انتخابی کارکردگی کو بہتر بنانے اور انتخابی کارکردگی کو بہتر بنانے کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "ایک سے زیادہ کالموں سے اقدار کو یکجا کرکے ڈیٹا فریم میں ایک نیا کالم بنانے کے ل you ، آپ سٹرنگ کنکیٹیشن یا کسی اور مطلوبہ تبدیلی کا استعمال کرسکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PD## مثال کے طور پر پائیتھون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'پہلا نام': ['ایلس' ، 'باب' ، 'چارلی'] ، 'آخری نام': ['سمتھ' ، 'جانسن'،' براؤن ']})#' پہلا نام 'اور' آخری نام 'ڈی ایف [' مکمل نام '] = DF [' پہلا نام '] +' ' + DF [' آخری نام '] کے امتزاج کرکے ایک نیا کالم بنائیں۔اس مثال میں پرنٹ (ڈی ایف) ، ہمارے پاس کالموں کے 'پہلا نام' اور 'آخری نام' کے ساتھ DF نامی ڈیٹا فریم ہے۔ہم 'پہلا نام' اور 'آخری نام' کالموں سے '+' آپریٹر اور اس کے درمیان جگہ کا استعمال کرتے ہوئے اقدار کو ہم آہنگ کرکے 'مکمل نام' کے نام سے ایک نیا کالم بناتے ہیں۔ آؤٹ پٹ ہوگا: ریاضی کا کوڈ پہلا نام آخری نام مکمل نام 0 ایلساسمتھ ایلس اسمتھ 1 باب جانسن باب جانسن 2 چارلی براؤن چارلی براؤنیہیر ، نیا کالم 'مکمل نام' ڈیٹا فریم میں ہر قطار کے لئے 'پہلے نام' اور 'آخری نام' کالموں کی اقدار کو یکجا کرکے تیار کیا گیا ہے۔ آپ کسی بھی مطلوبہ تبدیلی کو انجام دے سکتے ہیں۔ایک سے زیادہ کالموں سے اقدار کی بنیاد پر نیا کالم بنانے کے لئے کونکیٹیشن لاجک۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسٹمر ڈیموگرافک ڈیٹا ہوتا ہے۔کلسٹرنگ الگورتھم اور ڈیموگرافک متغیرات کا استعمال کرتے ہوئے آپ کسٹمر تقسیم اور ہدف مارکیٹنگ کی حکمت عملی کے نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم میں دو ڈیٹ ٹائم کالموں کے مابین فرق کا حساب لگانے کے ل you ، آپ ایک کالم کو دوسرے سے گھٹا سکتے ہیں۔یہاں ایک مثال کا کوڈ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹا فریمڈف = pd.dataframe (start 'اسٹارٹ ٹائم': ['2022-01-01 10:00:00' ، '2022-01-01 12:30:00'] ، 'اختتامی وقت': ['2022-01-01 11:30:00' ، '2022-01-01 14:15:00']})# کالموں کو ڈیٹ ٹیمڈف میں تبدیل کریں ['اسٹارٹ ٹائم'] = PD۔to_datetime (df ['start وقت']) df ['end وقت'] = pd.to_datetime (df ['اختتامی وقت'])# 'اختتامی وقت' اور 'اسٹارٹ ٹائم' ڈی ایف ['مدت' 'کے درمیان فرق کا حساب لگائیں]= DF ['اختتامی وقت'] - DF ['اسٹارٹ ٹائم'] پرنٹ (DF) اس مثال میں ، ہمارے پاس DF نامی ایک ڈیٹا فریم ہے جس میں کالم 'اسٹارٹ ٹائم' اور 'اختتامی وقت' ہے جس میں ڈیٹا ٹائم ویلیوز پر مشتمل ہے۔ہم سب سے پہلے ان کالموں کو PD.TO_DATETIME () کا استعمال کرتے ہوئے ڈیٹ ٹائم فارمیٹ میں تبدیل کرتے ہیں۔ پھر ، ہم 'اختتامی وقت' کالم کو 'اختتامی وقت' کالم سے گھٹا کر 'اختتامی وقت' اور 'اسٹارٹ ٹائم' کے درمیان فرق کا حساب لگاتے ہیں۔نتیجے میں ٹائم ڈیلٹا کی اقدار کو 'دورانیہ' کے نام سے ایک نئے کالم میں تفویض کیا گیا ہے۔ آؤٹ پٹ یہ ہوگا: SQLCOPY کوڈ اسٹارٹ ٹائم اینڈ ٹائم ٹائم کی مدت 2022-01-01 10:00:00 2022-01-01 11:30:00 0 دن 01 01.'ڈیٹا فریم میں ہر صف کے لئے۔ نوٹ کریں کہ نتیجے میں کالم ٹائپ ٹائم ڈیلٹا کا ہے ، جو دو تاریخ کے وقت کی اقدار کے درمیان مدت یا فرق کی نمائندگی کرتا ہے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں صحت کی دیکھ بھال کا ڈیٹا ہوتا ہے۔آپ ایسوسی ایشن رول کان کنی اور پیش گوئی کرنے والی ماڈلنگ کا استعمال کرتے ہوئے بیماری کے ساتھ مرض کے نمونوں کا تجزیہ اور شناخت کیسے کریں گے اور بیماری کے خطرے کو اسکورنگ ماڈل تیار کریں گے؟",
        "Answer": "کم سے کم میکس اسکیلنگ کا استعمال کرتے ہوئے ڈیٹا فریم میں عددی کالم کو معمول پر لانے کے ل you ، آپ اسکلرن.پروسیسنگ ماڈیول سے من میکس اسکیلر کلاس استعمال کرسکتے ہیں۔یہاں ایک مثال کوڈ ہے: پائیٹون کوپی کوڈیمپورٹ پانڈاس بطور PDFROM SKLEREN.Preprocessing درآمد Minmaxscaler# مثال Dataframedf = pd.dataframe ({'اقدار': [10 ، 20 ، 30 ، 40 ، 50]})# MinMaxScaler آبجیکٹسکلر = MinMaxcaler = MinMaxscaler آبجیکٹسکلر = MinMaxsscaler بنائیںکم سے کم میکس اسکیلنگ ڈی ایف ['عام اقدار'] = اسکیلر.فٹ_ٹرانسفارم (ڈی ایف [['اقدار']]) پرنٹ (ڈی ایف) کا استعمال کرتے ہوئے 'اقدار' کالم کو عام کریں (ڈی ایف) پرنٹ (ڈی ایف) اس مثال میں ، ہمارے پاس ایک ڈیٹا فریم ہے جس کا نام ڈی ایف ہے جس کا نام ایک عددی کالم ہے 'اقدار '۔ہم ایک من میکس اسکیلر آبجیکٹ تیار کرتے ہیں اور پھر اسے کم سے کم میکس اسکیلنگ کا اطلاق کرکے 'اقدار' کالم کو معمول پر لانے کے لئے استعمال کرتے ہیں۔ اسکیلر کا FIT_TRANSFORM () طریقہ استعمال کیا جاتا ہے تاکہ 'اقدار' کالم کی کم سے کم اور زیادہ سے زیادہ اقدار کی گنتی کی جاسکے اور اقدار کی پیمائش کی جاسکے۔حد تک [0 ، 1]۔عام اقدار کو ڈیٹا فریم میں 'نارملائزڈ ویلیوز' نامی ایک نئے کالم میں تفویض کیا جاتا ہے۔ آؤٹ پٹ یہ ہوگا: ریاضی کا کوڈ کوڈ اقدار کو معمول پر مبنی اقدار 0 0.001 20 0.252 30 0.503 40 0.754 50 1.00 HERE ، 'عام اقدار' کالم میں عام اقدار پر مشتمل ہے۔من میکس اسکیلنگ کا استعمال کرتے ہوئے 'اقدار' کالم کا۔اقدار کو متناسب طور پر 0 اور 1 کے درمیان اصل کالم کی کم سے کم اور زیادہ سے زیادہ اقدار کی بنیاد پر اسکیل کیا جاتا ہے۔ نوٹ کریں کہ من میکس اسکیلر 2D سرنی نما آبجیکٹ پر کام کرتا ہے ، لہذا ہم صرف DF کی بجائے DF [['اقدار']] سے گزرتے ہیں۔'اقدار'] اس بات کو یقینی بنانے کے لئے کہ اس کو 2D سرنی سمجھا جائے۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں اسمارٹ ہوم سے سینسر ڈیٹا ہوتا ہے۔آپ کس طرح توانائی کی کھپت کے نمونوں کا تجزیہ اور شناخت کریں گے اور ٹائم سیریز تجزیہ اور مشین لرننگ الگورتھم کا استعمال کرتے ہوئے توانائی کے استعمال کی پیش گوئی کرنے والے ماڈل کو کس طرح تیار کریں گے؟",
        "Answer": "ڈیٹا فریم میں کالم کی کفایت شعاری اوسط (EMA) کا حساب لگانے کے لئے ، آپ پانڈوں میں EWM () کا طریقہ استعمال کرسکتے ہیں۔EWM () طریقہ کار کالم میں اقدار پر کفایت شعاری وزن کا اطلاق کرتا ہے ، جس سے حالیہ اقدار کو زیادہ وزن ملتا ہے۔یہاں ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'اقدار': [10 ، 20 ، 30 ، 40 ، 50]})# اسپین کے ساتھ 'اقدار' کالم کی اوسطا اوسط اوسط کا حساب لگائیں =2df ['ema'] = df ['values']. EWM (SPAN = 2 ، ایڈجسٹ = غلط)ہم 'اقدار' کالم پر EWM () کے طریقہ کار کا استعمال کرتے ہیں جس میں 2 پر مقرر کردہ اسپین پیرامیٹر 2 پر سیٹ ہوتا ہے۔تعصب کے لئے ایڈجسٹ نہیں کیا جاتا ہے۔اگر آپ اسے سچ پر مرتب کرتے ہیں تو ، EMA میں پہلی قدر ایک سادہ حرکت پذیر اوسط ہوگی۔ حساب کتاب کی جانے والی اوسط قدر اوسط اقدار کو ڈیٹا فریم میں 'EMA' نامی ایک نئے کالم میں تفویض کیا گیا ہے۔10.0000001 20 16.6666672 30 25.0000003 40 33.3333334 50 42.500000"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں کسی مووی اسٹریمنگ سروس کے لئے کسٹمر کے جائزے ہوتے ہیں۔آپ جذبات کے تجزیہ اور باہمی تعاون کے ساتھ فلٹرنگ کی تکنیکوں کا استعمال کرتے ہوئے مووی کی درجہ بندی اور سفارشات کو متاثر کرنے والے انتہائی بااثر عوامل کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم میں کالم سے اعلی اقدار کے ساتھ اوپر کی ن قطاریں نکالنے کے ل you ، آپ پانڈوں میں nlargest () طریقہ استعمال کرسکتے ہیں۔یہاں ایک مثال کوڈ ہے: PD## مثال کے طور پر پائیٹون کوپی کوڈیمپورٹ پانڈاس dataframedf = pd.dataframe ({'اقدار': [10 ، 20 ، 30 ، 40 ، 50]})# 'اقدار' میں اعلی ترین اقدار کے ساتھ اوپر 3 قطاریں نکالیں۔کالم = 3 ٹاپ_ن_روز = df.nlarget (n ، 'اقدار') پرنٹ (ٹاپ_ن_رو) اس مثال میں ، ہمارے پاس 'اقدار' کے نام سے کالم کے ساتھ ڈی ایف نامی ایک ڈیٹا فریم ہے۔ہم 'اقدار' کالم میں اعلی ترین اقدار کے ساتھ اوپر کی N قطاریں نکالنے کے لئے ڈیٹا فریم پر NLARGET () کا طریقہ استعمال کرتے ہیں۔ن پیرامیٹر نکالنے کے لئے قطاروں کی تعداد کی وضاحت کرتا ہے۔ آؤٹ پٹ یہ ہوگا: ریاضی کا کوڈ ویلیو 4 503 402 30 اگر ، ٹاپ_ن_رو ڈیٹا فریم میں 'اقدار' کالم میں اعلی ترین اقدار کے ساتھ ٹاپ 3 قطاریں شامل ہیں۔ آپ N کی قدر کو ایڈجسٹ کرسکتے ہیں۔آپ کی ضرورت کی بنیاد پر مختلف تعداد میں قطاروں کو نکالنے کے لئے متغیر۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا جاتا ہے جس میں مالی لین دین کا ڈیٹا ہوتا ہے۔نیٹ ورک تجزیہ اور بے ضابطگی کا پتہ لگانے والے الگورتھم کا استعمال کرتے ہوئے آپ منی لانڈرنگ اور جعلی لین دین کے نمونوں کا تجزیہ اور شناخت کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم میں ایک سے زیادہ بائنری کالموں میں دوٹوک اقدار کے کالم کو تبدیل کرنے کے ل you ، آپ پانڈوں سے get_dmumies () فنکشن استعمال کرسکتے ہیں۔یہ فنکشن اصل کالم میں ہر انوکھی قدر کے لئے نئے بائنری کالم تخلیق کرتا ہے۔یہاں ایک مثال کا کوڈ ہے: PDITHONCOPY کوڈیمپورٹ پانڈاس PD# مثال کے طور پر ڈیٹا فریمڈف = pd.dataframe ({'زمرہ': ['A' ، 'B' ، 'A' ، 'C' ، 'B']})# کنورٹ 'زمرہ'ایک سے زیادہ بائنری کالم بائنری_کولمز میں کالم = PD.GET_DUMMIES (DF [' زمرہ '])# بائنری کالموں کو اصل ڈیٹا فریمڈف = PD.CONCAT ([DF ، بائنری_کولمز] ، محور = 1) پرنٹ (DF) کے ساتھ جوڑیں ، اس مثال میں ،ہمارے پاس ڈی ایف نامی ایک ڈیٹا فریم ہے جس کا نام 'زمرہ' ہے جس میں زمرہ دار اقدار ہیں۔ہم 'زمرہ' کالم پر گیٹ_ڈمیز () فنکشن کو متعدد بائنری کالموں میں تبدیل کرنے کے لئے استعمال کرتے ہیں۔ گیٹ_ڈمیز () فنکشن بائنری کالموں کے ساتھ ایک نیا ڈیٹا فریم تشکیل دیتا ہے ، جہاں اصل 'زمرہ' کالم میں ہر انوکھی قیمت کو الگ الگ نمائندگی کیا جاتا ہے۔بائنری کالم۔کالم کے نام خود بخود منفرد اقدار کی بنیاد پر تیار ہوجاتے ہیں۔ ہم پھر کالموں (محور = 1) کے ساتھ اصل ڈیٹا فریم ڈی ایف کے ساتھ بائنری کالموں کو جوڑنے کے لئے pd.concat () فنکشن کا استعمال کرتے ہیں۔ آؤٹ پٹ ہوں گے: CSScopy کوڈ زمرہ A BC0 A 1 0 01 B 0 1 02 A 1 0 03 C 0 0 14 B 0 1 0 یہاں ، نئے بائنری کالم 'A' ، 'B' ، اور 'C' کو ڈیٹا فریم میں شامل کیا گیا ہے ، جو اصل 'زمرہ' کی نمائندگی کرتے ہیں۔کالمہر صف کی اس کیٹیگری پر مبنی بائنری کالم میں 1 کی قدر ہوتی ہے جس کا تعلق اس سے ہوتا ہے۔ نوٹ کریں کہ اصل 'زمرہ' کالم اب بھی ڈیٹا فریم میں موجود ہے ، اور اس کے ساتھ ہی نئے بائنری کالم شامل ہیں۔اگر آپ اصل کالم کو ہٹانا چاہتے ہیں تو ، آپ بائنری کالم بنانے کے بعد اسے چھوڑنے کے لئے ڈراپ () فنکشن کا استعمال کرسکتے ہیں۔"
    },
    {
        "Question": "آپ کو ایک ڈیٹاسیٹ دیا گیا ہے جس میں سوشل میڈیا ڈیٹا ہے۔آپ کس طرح بااثر صارفین کا تجزیہ اور ان کی شناخت کریں گے اور نیٹ ورک کی مرکزیت کے اقدامات اور بازی ماڈلز کا استعمال کرتے ہوئے معلومات کے پھیلاؤ اور وائرلٹی پر ان کے اثرات کی شناخت کیسے کریں گے؟",
        "Answer": "ڈیٹا فریم میں فارورڈ فلنگ (یا فارورڈ فلنگ) کے ذریعہ گمشدہ اقدار کو سنبھالنے کے ل you ، آپ 'ایف فل' پر سیٹ طریقہ پیرامیٹر کے ساتھ فلنا () طریقہ استعمال کرسکتے ہیں۔یہ طریقہ پچھلی صف سے حالیہ غیر نول قدر کے ساتھ گمشدہ اقدار کو پُر کرتا ہے۔یہاں ایک مثال کا کوڈ ہے: پائیتھون کوپی کوڈیمپورٹ پانڈاس بطور پیڈیمپورٹ نیمپی کے طور پر این پی# مثال کے طور پر NP# مثال کے طور پر گمشدہ اقدار کے ساتھ ڈیٹا فریم = pd.dataframe ({'اقدار': [1 ، np.nan ، 3 ، np.nan ، 5]})# فارورڈ لاپتہ لاپتہویلیوز ڈی ایف ['اقدار'] = ڈی ایف ['اقدار']۔ فلنا (طریقہ = 'فیل') پرنٹ (ڈی ایف) پرنٹ (ڈی ایف) اس مثال کے طور پر ، ہمارے پاس ڈی ایف نامی ایک ڈیٹا فریم ہے جس میں 'اقدار' کے نام سے ایک کالم ہے جس میں نان کی نمائندگی کی گئی ہے۔ہم 'اقدار' کالم پر فلنا () طریقہ استعمال کرتے ہیں اور طریقہ کار پیرامیٹر کو 'FFLE' پر سیٹ کرتے ہیں ، جس سے فارورڈ فلنگ کی نشاندہی ہوتی ہے۔ فلنا () طریقہ 'اقدار' کالم میں گمشدہ اقدار کو حالیہ غیر نول قدر کے ساتھ بدل دیتا ہے۔پچھلی قطار سے۔ آؤٹ پٹ یہ ہوگا: ریاضی کا کوڈ ویلیو 0 1.01 1.02 3.03 3.04 5.0.0 ہر ایک کی گمشدہ اقدار کو پچھلی صف سے حالیہ غیر نول قدر سے بھرا ہوا ہے۔قطار 1 اور 3 میں NAN اقدار کو پچھلی قطار سے قیمت 1 کے ساتھ تبدیل کیا گیا ہے ، اور قطار 4 میں NAN قیمت کو پچھلی قطار سے قیمت 3 کے ساتھ تبدیل کیا گیا ہے۔ نوٹ کریں کہ فارورڈ فلنگ یہ فرض کرتا ہے کہ گمشدہ اقدار کو پُر کرنا چاہئےسب سے حالیہ غیر نول قدر۔یہ طریقہ موزوں ہے جب گمشدہ اقدار کو کالم میں سابقہ اقدار کے ذریعہ معقول حد تک قریب کیا جاسکتا ہے۔"
    }
]